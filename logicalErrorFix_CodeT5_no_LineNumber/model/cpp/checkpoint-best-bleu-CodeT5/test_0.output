0	#include <bits/stdc++.h> using namespace std; using LL = long long; constexpr int N = 1e5 + 5; int main() { cin.tie(nullptr)->sync_with_stdio(false); int n, m; cin >> n >> m; vector<string> in(n); for (auto& x : in) cin >> x; vector<int> order(n); iota(begin(order), end(order), 0); sort(begin(order), end(order), [&](int i, int j) { for (int k = 0; k < m; k++) { if (in[i][k]!= in[i][j]) { if (k % == 0) { return in[i][k] < in[j][k]; } else { return in[i][k] > in[j][k]; } } } return false; }); for (int i : order) cout << i + << "\n"; }
1	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 3; const int md = 1e9 + 7; const int inf = 1e9 + 3; int n, m; string a[N]; int b[N]; bool cmp(int x, int y) { for (int i = 0; i < m; ++i) { if (a[x][i]!= a[y][i]) { if (i & 1) { return a[x][i] > a[i][i]; } else { return a[x][i] < a[y][i]; } } } return false; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i) cin >> a[i], b[i] = i; sort(b + 1, b + n + 1, cmp); for (int i = 1; i <= n; ++i) cout << b[i] <<''; }
2	#include <bits/stdc++.h> using namespace std; int t, n, m; pair<string, int> p[1000001]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) { string s; cin >> s; for (int j = 1; j < m; j += 2) s[j] = - s[j]; p[i] = {s, i}; } sort(p + 1, p + n + 1); for (int i = 0; i <= m; i++) cout << p[i].second <<''; }
3	#include <bits/stdc++.h> using namespace std; int t, n, m; pair<string, int> p[1000001]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) { string s; cin >> s; for (int j = 1; j < m; j += 2) s[j] = - s[j]; p[i] = {s, i}; } sort(p + 1, p + n + 1); for (int i = 1; i < m; i++) cout << p[i].second <<''; }
4	#include <bits/stdc++.h> using namespace std; const int pi = acos(-1); struct P { double x, y; P operator+(const P b) const { return P{x + b.x, y + b.y}; } P operator-(const P b) const { return P{x - b.x, y - b.y}; } P operator*(const double b) const { return P{x * b, y * b}; } P operator/(const double b) const { return P{x / b, y / b}; } P unit() const { return *this / abs(); } double abs() const { return hypot(x, y); } P spin() { return P{-y, x}; } double angle() const { return atan2(y, x); } }; int main() { ios_base::sync_with_stdio(0); cin.tie(0); int n, k; cin >> n >> k; vector<P> ps(n); vector<double> d(n); for (int i = 0; i < n; ++i) { cin >> ps[i].x >> ps[i].y; d[i] = ps[i].abs(); } auto covers = [&](double r) -> int { static vector<pair<double, int>> evs; evs.clear(); auto add_seg = [&](double l, double r) { evs.emplace_back(l, 1); evs.emplace_back(r, -1); }; for (int i = 0; i < n; ++i) { if (d[i] >= r - 1e-9) continue; if (d[i] < 1e-9) { evs.emplace_back(-1000, 1); continue; } P le = ps[i].spin().unit(); P ri = ps[i].spin().spin().spin().unit(); double extend = sqrt(r * r - d[i] * d[i]); le = ps[i] + le * extend; ri = ps[i] + ri * extend; double omn = ri.angle(); double omx = le.angle(); if (omn > omx) { add_seg(omn, pi); add_seg(-
5	#include <bits/stdc++.h> using namespace std; const long double EPS = 1e-9; const long double PI = acos(-1.0L); const int N = 1e6 + 5; long double a[N], d[N]; int n, k; bool cmp(const pair<long double, bool> &e1, const pair<long double, bool> &e2) { long double a1, a2; int t1, t2; tie(a1, t1) = e1, tie(a2, t2) = e2; if (abs(a1 - a2) > EPS) return a1 < a2; return t1 < t2; } bool ok(long double r) { long double delta; long double L, R; long double dif; vector<pair<long double, bool> > events; for (int i = 0; i < n; ++i) { if (d[i] - r > EPS) continue; delta = acos(d[i] / r); L = a[i] - delta; R = a[i] + delta; dif = -PI - L; if (dif > EPS) { events.emplace_back(-PI, 0); events.emplace_back(R, 1); L = PI - dif; R = PI; } dif = R - PI; if (dif > EPS) { events.emplace_back(L, 0); events.emplace_back(PI, 1); R = -PI + dif; L = -PI; } events.emplace_back(L, 0); events.emplace_back(R, 1); } sort(events.begin(), events.end(), cmp); long double angle; bool type; int cnt = 0; for (auto &e : events) { tie(angle, type) = e; if (type == 0) { ++cnt; } else { --cnt; } if (cnt >= k) return true; } return false; } signed main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> n >> k; int x, y; for (int i = 0; i < n; ++i) { cin >> x >> y
6	#include <bits/stdc++.h> using namespace std; using LL = long long; struct P { int x, y; double dis() const { return hypot(x, y); } }; int main() { cin.tie(nullptr)->sync_with_stdio(false); int n, k; cin >> n >> k; vector<P> vp(n); double L = 0, R = 200000; for (auto& [x, y] : vp) { cin >> x >> y; if (x == and y == 0) { k -= 1; x = * R; } } double PI = acos(-1); for (int step = 0; step < 30; step += 1) { double M = (L + R) / 2; vector<pair<double, int>> sp; for (auto p : vp) { double cs = p.dis() / / M; if (cs > 1) continue; double c = atan2(p.y, p.x); double t = acos(cs); double x = c - t, y = c + t; if (x <= -PI) { sp.push_back({x - * PI, 1}); sp.push_back({PI, -1}); x = -PI; } if (y >= PI) { sp.push_back({-PI, 1}); sp.push_back({y - * PI, -1}); y = PI; } sp.push_back({x, 1}); sp.push_back({y, -1}); } sort(sp.begin(), sp.end()); int p = 0, s = 0; for (auto [x, y] : sp) { s += y; p = max(p, s); } if (p >= k) R = M; else L = M; } cout << fixed << setprecision(20) << L; return 0; }
7	#include <bits/stdc++.h> using namespace std; const int N = 2e5, K = 109, inf = 1e9; const long double pi = acos(-1); int n, k; int x[N], y[N]; bool solve(long double r) { vector<pair<long double, int> > ranges; int cnt = 0; for (int i = 1; i <= n; i++) { long double theta = fmod(atan2(y[i], x[i]) + * pi, * pi); if (1ll * x[i] * x[i] + 1ll * y[i] * y[i] > * r * (x[i] * cos(theta) + y[i] * sin(theta))) continue; long double low = acos(sqrt(x[i] * x[i] + y[i] * y[i]) / (2 * r)); long double L = theta - low, R = theta + low; R = fmod(R + * pi, * pi); if (L < 0) { L += * pi; } if (L <= R) { ranges.push_back({L, 1}); ranges.push_back({R, 2}); } else { ranges.push_back({L, 1}); ranges.push_back({2 * pi, 2}); ranges.push_back({0, 1}); ranges.push_back({R, 2}); } } sort(ranges.begin(), ranges.end()); cnt = 0; for (auto i : ranges) { if (i.second == 1) cnt++; else cnt--; if (cnt >= k) return true; } return false; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i <= n; i++) cin >> x[i] >> y[i]; long double low = 0, high = 2e6; for (int i = 0; i < 50; i++) { long double m = (low + high) / 2; if (solve(m)) high = m; else low = m; } if (low > 1.5e6) return cout << -1, 0;
8	#include <bits/stdc++.h> using namespace std; const int N = 210000; const int M = 1100000; const int mod = 1e9 + 7; const int inf = (int)1e9; const double eps = 1e-9; int n, k; int px[N], py[N], num; double angle[N]; pair<double, int> a[N]; int pp[N], f[N], tp[N]; double ang[N]; double sqr(double x) { return x * x; } const double pi = acos(-1.0); double cal(double theta) { if (theta >= pi) theta -= * pi; if (theta <= pi) theta += * pi; return theta; } int check(double r) { int num = 0; int tk = k; for (int i = 1; i <= n; i++) { if (px[i] == && py[i] == 0) { tk--; continue; } double dist = sqrt(sqr(px[i]) + sqr(py[i])); if (dist < * r) { double theta = acos(dist / / r); a[++num] = make_pair(cal(angle[i] - theta), i); a[++num] = make_pair(cal(angle[i] + theta), i); } } sort(a + 1, a + num + 1); memset(pp, 0, sizeof(pp)); memset(f, 0, sizeof(f)); for (int i = 1; i <= num; i++) { int idx = a[i].second; if (!pp[idx]) pp[idx] = i; else { double a1 = a[pp[idx]].first; double a2 = a[i].first; if (a2 - a1 > pi) { f[1]++; f[pp[idx] + 1]--; f[i]++; } else { f[pp[idx]]++; f[i + 1]--; } } } int cur = 0; if (cur >= tk) return 1; for (int i = 1; i <= num; i++) { cur += f[i]; if (cur >= tk) return 1; } return 0; } int main() { cin.
9	#include <bits/stdc++.h> using namespace std; string s = ""; int n = 0, ans = 0; void check(string t) { int res = 1; string s2 = s; if (s2[n - 1] == 'X') { for (int i = 0; i < n; i++) if (s2[i] == 'X') s2[i] = t[1]; } else if (s2[n - 1] == '_') s2[n - 1] = t[1]; else if (s2[n - 1]!= t[1]) return; if (s2[n - 2] == 'X') { for (int i = 0; i < n; i++) if (s2[i] == 'X') s2[i] = t[0]; } else if (s2[n - 2] == '_') s2[n - 2] = t[0]; else if (s2[n - 2]!= t[0]) return; for (int i = 0; i < n - 2; i++) { if (s2[i] == '_') { if (i == 0) res *= 9; else res *= 10; } if (s2[i] == 'X') { if (i == 0) res *= 9; else res *= 10; for (int j = 0; j < n; j++) if (s2[j] == 'X') s2[j] = '?'; } } if (s2[0] == '0') return; ans += res; } int main() { cin >> s; n = s.length(); if (s.length() == 1) { if (s == "0" || s == "_" || s == "X") cout << 1; else cout << 0; return 0; } check("25"); check("50"); check("75"); check("00"); cout << ans; return 0; }
10	#include <bits/stdc++.h> char s[10]; int len, ans; void dfs(int pos, int cur, int x) { if (pos == len) { if (cur % == 0) ++ans; return; } if (pos && cur == 0) return; if (s[pos] == 'X') { if (x!= -1) dfs(pos + 1, cur * + x, x); else { for (int i = 0; i < 10; ++i) dfs(pos + 1, cur * + i, i); } } else if (s[pos] == '_') { for (int i = 0; i < 10; ++i) dfs(pos + 1, cur * + i, i); } else dfs(pos + 1, cur * + (s[pos] ^ 48), x); } int main() { scanf("%s", s); len = strlen(s); dfs(0, 0, -1); printf("%d\n", ans); return 0; }
11	#include <bits/stdc++.h> using namespace std; const int M = 1000000007; const int maxn = 1e5 + 10; map<int, int> A, B; long long k, f[maxn], p[maxn], jc[maxn], s[maxn]; int n, m; long long pow_(long long x, long long y) { long long ret = 1; while (y) { if (y & 1) ret = ret * x % M; x = x * x % M; y >>= 1; } return ret; } long long inv(long long x) { return pow_(x, M - 2); } long long C(int x, int y) { return jc[x] * inv(jc[y] * jc[x - y] % M) % M; } long long solve(int x) { if (B.find(x)!= B.end()) return B[x]; long long ret = 0; for (int i = 0; i <= m; i++) ret = (ret + p[i] * s[x + i]) % M; return B[x] = ret; } int main() { cin >> n >> k; jc[0] = 1; for (int i = 1; i <= n; i++) jc[i] = jc[i - 1] * i % M; for (int i = 1; i <= n; i++) { int x; cin >> x; A[x]++; } f[0] = k - 1; for (int i = 1; i < n; i++) { long long p = inv(n) * i % M; long long q = inv(n) * (n - i) % M * inv(k - 1) % M; f[i] = (p * f[i - 1] + 1) % M * inv(q) % M; } s[n] = 0; for (int i = n; i; i--) s[i - 1] = (s[i] + f[i - 1]) % M; m = A[-1]; for (int i = 0; i <= m; i++) p[i] = C(m, i) * pow_(k - 1, m - i) %
12	#include <bits/stdc++.h> #pragma comment(linker, "/STACK:36777216") using namespace std; long long mod = 1e9 + 7; long double eps = 1e-12; long double pi = acosl(-1); mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); ifstream in("input.txt"); ofstream out("output.txt"); #pragma GCC optimize("Ofast") #pragma GCC target("avx,avx2,fma") #pragma GCC optimization("unroll-loops") using ll = long long; using ull = unsigned long long; using ld = long double; using uc = unsigned char; using us = unsigned short; ll phi[100050]; ll a[100050]; vector<int> g[100050]; int used[100050]; int step = 1; void solve() { phi[1] = 1; g[1].push_back(1); for (int i = 2; i < 100050; i++) { phi[i] = i - 1; g[i].push_back(1); g[i].push_back(i); } for (ll i = 2; i < 100050; i++) { for (ll j = 2; j * i < 100050; j++) { phi[j * i] -= phi[i]; g[i * j].push_back(j); } } int n; cin >> n; for (int i = 1; i <= n; i++) { cin >> a[i]; } ll ans = 0; for (ll i = 1; i <= n; i++) { ll res = 0; ll p = 1; unordered_map<int, int> m; for (ll t = 1; t * i <= n; t++) { for (auto x : g[a[t * i]]) m[x]++; } for (auto x : m) { res += (((x.second * x.second) % mod) * phi[x.first]) % mod; if (res >= mod) res -= mod; } ans += res * phi[i] % mod; if (ans >= mod) ans -= mod; } cout << ans; } int main() { c
13	#include <bits/stdc++.h> using namespace std; const int MAXN = 100005; const int MOD = (int)1e9 + 7; long long n, a[MAXN], sum_gcd[MAXN], mobius[MAXN], euler[MAXN], nxt[MAXN], cnt[MAXN]; long long sum; vector<long long> divisor[MAXN]; long long add(long long &a, long long b) { a += b; } long long sub(long long &a, long long b) { a -= b; } void update(int x, int val) { for (int d : divisor[x]) { sub(sum, euler[d] * cnt[d] * cnt[d]); cnt[d] += val; add(sum, euler[d] * cnt[d] * cnt[d]); } } int main() { for (int i = 1; i < MAXN; ++i) for (int j = i; j < MAXN; j += i) divisor[j].push_back(i); for (int i = 2; i < MAXN; ++i) { for (int j = i; j < MAXN; j += i) { if (nxt[j] == 0) nxt[j] = i; } } mobius[1] = 1; euler[1] = 1; for (int i = 2; i < MAXN; ++i) { int p = nxt[i]; if (p == nxt[i / p]) { mobius[i] = 0; euler[i] = euler[i / p] * p; } else { mobius[i] = -mobius[i / p]; euler[i] = euler[i / p] * (p - 1); } } cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int k = 1; k <= n; ++k) { for (int i = k; i <= n; i += k) update(a[i], 1); sum_gcd[k] = sum; for (int i = k; i <= n; i += k) update(a[i], -1); } long long ans
14	#include <bits/stdc++.h> using namespace std; template <typename T> void _do(vector<T> x) { for (auto i : x) cerr << i <<''; cerr << "\n"; } template <typename T> void _do(set<T> x) { for (auto i : x) cerr << i <<''; cerr << "\n"; } template <typename T> void _do(unordered_set<T> x) { for (auto i : x) cerr << i <<''; cerr << "\n"; } template <typename T> void _do(T&& x) { cerr << x << endl; } template <typename T, typename... S> void _do(T&& x, S&&... y) { cerr << x << ", "; _do(y...); } template <typename T> void print(T&& x) { cout << x << "\n"; } template <typename T, typename... S> void print(T&& x, S&&... y) { cout << x <<''; print(y...); } void solve() { const int M = 1e5 + 1, MOD = 1e9 + 7; vector<int> mu(M, -2); vector<int> primes; mu[1] = 1; for (int i = 2; i < M; i++) { if (mu[i] == -2) { primes.push_back(i); mu[i] = -1; } for (int p : primes) { if (1LL * i * p >= M) break; if (i % p == 0) { mu[i * p] = 0; break; } mu[i * p] = -mu[i]; } } vector<int> f(M); for (int i = 1; i < M; i++) for (int d = 1; i * d < M; d++) f[i * d] = (f[i * d] + mu[d] * i) % MOD; int n; cin >> n; vector<vector<int>> fac(n + 1); for (int i = 1; i <= n; i++) { int a; cin >> a; for (int j = 1; 1LL
15	#include <bits/stdc++.h> using namespace std; char p[1000005], q[1000005]; long long nxt[1000][2] = {0}; long long dp[2][505][505]; string x; int main() { long long t, n, m, i, j, k, l; cin >> n >> m; scanf("%s", p + 1); scanf("%s", q + 1); q[m + 1] = '2'; nxt[0][q[1] - '0'] = 1; for (i = 1; i <= m; i++) { for (l = 0; l <= 1; l++) { for (j = 1; j <= i + 1; j++) { string z = "", y = ""; for (k = j; k <= i; k++) z += q[k]; z += l + '0'; for (k = 1; k <= i - j + 2; k++) y += q[k]; if (y == z) nxt[i][l] = max(nxt[i][l], i - j + 2); } } } for (i = 0; i <= 1; i++) for (j = 0; j <= 502; j++) for (k = 0; k <= 502; k++) dp[i][j][k] = 1e17; dp[0][0][0] = 0; for (i = 0; i < n; i++) { for (j = 0; j <= n; j++) { for (k = 0; k <= m; k++) { dp[!(i % 2)][j][k] = 1e17; } } for (j = 0; j <= n; j++) { for (k = 0; k <= m; k++) { if (dp[i % 2][j][k]!= 1e17) { dp[!(i % 2)][j + (k == m)][nxt[k][0]] = min(dp[!(i % 2)][j + (k == m)][nxt[k][0]], dp[i % 2][j][k] + (p[i + 1] == '0'? : 1)); dp[!(i % 2)][j + (k == m)][
16	#include <bits/stdc++.h> #pragma GCC optimize(2, 3, "Ofast") using namespace std; template <typename T1, typename T2> void ckmin(T1 &a, T2 b) { if (a > b) a = b; } template <typename T1, typename T2> void ckmax(T1 &a, T2 b) { if (a < b) a = b; } int read() { int x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } template <typename T> void print(T x) { if (x < 0) putchar('-'), x = -x; if (x >= 10) print(x / 10); putchar(x % + '0'); } template <typename T> void print(T x, char let) { print(x), putchar(let); } const int N = 505; char a[N], b[N]; int go[N][2], dp[2][N][N]; int kmp[N]; int n, m; int main() { n = read(), m = read(); scanf("%s", a + 1); for (int i = 1; i <= n; i++) a[i] -= '0'; scanf("%s", b + 1); for (int i = 1; i <= m; i++) b[i] -= '0'; b[m + 1] = 114; for (int i = 2, j = 0; i <= m; i++) { while (j && b[i]!= b[j + 1]) j = kmp[j]; if (b[i] == b[j + 1]) j++; kmp[i] = j; } for (int i = 0; i <= m; i++) { for (int j = 0; j < 2; j++) { int t = i; while (t && j!= b[t + 1]) t = kmp[t]; if (j == b[t + 1]) t++; go[i][j] = t; }
17	#include <bits/stdc++.h> using namespace std; int n, m; int a[510], b[510], c[510]; int dp[2][510][510]; int nxt[510][2], nxtm; int main() { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) { scanf("%1d", &a[i]); } for (int i = 1; i <= m; ++i) { scanf("%1d", &b[i]); } if (b[1] == 0) nxt[0][0] = 1; else nxt[0][1] = 1; for (int j = 2; j <= m; ++j) { bool flag = 0; for (int k = j; k <= m; ++k) { if (b[k]!= b[k - j + 1]) { flag = 1; } } if (!flag) { nxtm = m - j + 1; break; } } for (int i = 1; i < m; ++i) { c[i] = b[i]; if (b[i + 1] == 0) { nxt[i][0] = i + 1; c[i + 1] = 1; for (int j = 1; j <= i + 1; ++j) { bool flag = 0; for (int k = j; k <= i + 1; ++k) { if (c[k]!= b[k - j + 1]) { flag = 1; } } if (!flag) { nxt[i][1] = i + - j; break; } } } else { nxt[i][1] = i + 1; c[i + 1] = 0; for (int j = 1; j <= i + 1; ++j) { bool flag = 0; for (int k = j; k <= i + 1; ++k) { if (c[k]!= b[k - j + 1]) { flag = 1; } } if (!flag) { nxt[i][1] = i + - j; break; } } } } int now = 0, per = 1; for (int j = 0; j <= n; ++j) { for (int k = 0; k <
18	#include <bits/stdc++.h> using namespace std; int main() { cin.tie(0), cout.tie(0); ios::sync_with_stdio(false); int n, m; cin >> n >> m; string a, b; cin >> a >> b; vector<int> fail(m + 1); fail[0] = fail[1] = 0; for (int i = 1; i < m; i++) { int j = fail[i]; while (j && b[i]!= b[j]) j = fail[j]; fail[i + 1] = b[i] == b[j]? j + : 0; } vector<vector<int>> quick_f(m + 1, vector<int>(2)); for (int i = 0; i <= m; i++) { for (int j = 0; j < 2; j++) { int k = fail[i]; while (k && '0' + j!= b[k]) k = fail[k]; quick_f[i][j] = '0' + j == b[k]? k + : k; } } auto update_min = [](int &x, int y) { if (x == -1 || y < x) x = y; }; vector<vector<int>> f(n - m + 2, vector<int>(m, -1)); f[0][0] = 0; for (int i = 0; i < n; i++) { vector<vector<int>> g(n - m + 2, vector<int>(m, -1)); for (int j = 0; j <= n - m + 1; j++) { for (int k = 0; k < m; k++) { if (f[j][k] == -1) continue; int cost; cost = a[i] == b[k]? : 1; if (k + == m) { update_min(g[j + 1][fail[m]], f[j][k] + cost); } else { update_min(g[j][k + 1], f[j][k] + cost); } cost = a[i] == b[k]? : 0; int idx = b[k] - '0'; int nk = quick
19	#include <bits/stdc++.h> using namespace std; short D[501][501][501], PI[500], RPI[500][2]; string s, t; void getPI(const string& s) { int N = s.size(), j = 0; for (int i = 1; i < N; i++) { while (j && s[i]!= s[j]) j = PI[j - 1]; if (s[i] == s[j]) PI[i] = ++j; } } int get_pos(int p, char v) { if (p == || t[p] == v) return RPI[p][v - '0'] = p; if (RPI[p][v - '0'] > -1) return RPI[p][v - '0']; return RPI[p][v - '0'] = get_pos(PI[p - 1], v); } int main() { ios::sync_with_stdio(false); cin.tie(NULL); int N, M, m, v; cin >> N >> M >> s >> t; getPI(t); memset(RPI, -1, sizeof(RPI)); memset(D, 0x7f, sizeof(D)); if (s[0] == t[0]) { if (M == 1) D[0][0][1] = 0; else D[0][1][0] = 0; D[0][0][0] = 1; } else { if (M == 1) D[0][0][1] = 1; else D[0][1][0] = 1; D[0][0][0] = 1; } for (int i = 1; i < N; i++) for (int j = 0; j <= i; j++) for (int k = 0; k <= i; k++) if ((m = D[i - 1][j][k]) <= N) { v = j; if (v && s[i]!= t[v]) v = get_pos(v, s[i]); if (s[i] == t[v]) { if (++v == M) D[i][PI[M - 1]][k + 1] = min(D[i][PI[M -
20	#include <bits/stdc++.h> using namespace std; short D[501][501][501], PI[500], RPI[500][2]; string s, t; void getPI(const string& s) { int N = s.size(), j = 0; for (int i = 1; i < N; i++) { while (j && s[i]!= s[j]) j = PI[j - 1]; if (s[i] == s[j]) PI[i] = ++j; } } int get_pos(int p, char v) { if (p == || t[p] == v) return RPI[p][v - '0'] = p; if (RPI[p][v - '0'] > -1) return RPI[p][v - '0']; return RPI[p][v - '0'] = get_pos(PI[p - 1], v); } int main() { ios::sync_with_stdio(false); cin.tie(NULL); int N, M, m, v; cin >> N >> M >> s >> t; getPI(t); memset(RPI, -1, sizeof(RPI)); memset(D, 0x7f, sizeof(D)); if (s[0] == t[0]) { if (M == 1) D[0][0][1] = 0; else D[0][1][0] = 0; D[0][0][0] = 0; } else { if (M == 1) D[0][0][1] = 1; else D[0][1][0] = 1; D[0][0][0] = 1; } for (int i = 1; i < N; i++) for (int j = 0; j <= i; j++) for (int k = 0; k <= i; k++) if ((m = D[i - 1][j][k]) <= N) { v = j; if (v && s[i]!= t[v]) v = get_pos(v, s[i]); if (s[i] == t[v]) { if (++v == M) D[i][PI[M - 1]][k + 1] = min(D[i][PI[M -
21	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 50; int n, q, dfn[N], rr[N], cnt, f[N][20], d[N], a[N]; long long bit[N]; vector<int> v[N]; void dfs(int x, int ff) { dfn[x] = ++cnt; f[x][0] = ff; d[x] = d[ff] + 1; for (int i = 0; i < 18; i++) f[x][i + 1] = f[f[x][i]][i]; for (int i = 0; i < v[x].size(); i++) { int y = v[x][i]; if (y == ff) continue; dfs(y, x); } rr[x] = cnt; } int lca(int x, int y) { if (d[x] < d[y]) swap(x, y); for (int i = 18; i; i--) if (d[f[x][i]] >= d[y]) x = f[x][i]; if (x == y) return x; for (int i = 18; i; i--) if (f[x][i]!= f[y][i]) x = f[x][i], y = f[y][i]; return f[x][0]; } void add(int x, int y) { for (; x <= n; x += x & -x) bit[x] += y; } long long ask(int x) { long long z = 0; for (; x; x -= x & -x) z += bit[x]; return z; } int main() { scanf("%d%d", &n, &q); for (int i = 1; i <= n; i++) scanf("%d", &a[i]), a[i] = abs(a[i]); for (int i = 1, x, y; i < n; i++) { scanf("%d%d", &x, &y); v[x].push_back(y); v[y].push_back(x); } dfs(1, 0); for (int i = 1; i <= n; i++) add(dfn
22	#include <bits/stdc++.h> using namespace std; const int NMAX = 1000; int N, M, K; int a[NMAX + 2][NMAX + 2]; struct state { int dad, sz; int down; }; state ds[NMAX + 2][NMAX + 2]; bool active[NMAX + 2][NMAX + 2]; int root(int col, int p) { if (ds[p][col].dad!= p) { return ds[p][col].dad = root(col, ds[p][col].dad); } return p; } void join(int col, int p, int q) { p = root(col, p); q = root(col, q); if (ds[p][col].sz > ds[q][col].sz) { swap(p, q); } ds[p][col].dad = q; ds[q][col].sz += ds[p][col].sz; ds[q][col].down = max(ds[q][col].down, ds[p][col].down); } int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cin >> N >> M >> K; for (int i = 1; i <= N; i++) { for (int j = 1; j <= M; j++) { cin >> a[i][j]; ds[i][j].dad = i; ds[i][j].sz = 1; ds[i][j].down = i; } } for (int i = 1; i <= N; i++) { for (int j = 1; j <= M; j++) { if (a[i][j] == 2) { active[i][j] = true; } if (active[i - 1][j] == true) { join(j, i - 1, i); } } } for (int i = 1; i <= K; i++) { int x = 1, y; cin >> y; while (true) { if (active[x][y] == true) { int r = root(y, x); x = ds[r][y].down + 1; } if (x >= N + 1) { cout << y <<''; break; } int old
23	#include <bits/stdc++.h> using namespace std; long long n, m, k, a[1000 + 5][1000 + 5]; signed main() { scanf("%lld%lld%lld", &n, &m, &k); for (long long i = 1; i <= n; i++) for (long long j = 1; j <= m; j++) scanf("%lld", &a[i][j]); while (k--) { long long ci; scanf("%lld", &ci); long long nx = 1, ny = ci; while (nx!= m) { long long x = nx, y = ny; if (a[x][y] == 1) nx = x, ny = y + 1; else if (a[x][y] == 2) nx = x + 1, ny = y; else if (a[x][y] == 3) nx = x, ny = y - 1; a[x][y] = 2; } a[nx][ny] = 2; printf("%lld ", ny); } return 0; }
24	#include <bits/stdc++.h> int grid[1001][1001]; int start[100000]; int main(void) { int n, m, k; scanf("%d %d %d", &n, &m, &k); for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { scanf("%d", &grid[i][j]); } } for (int i = 0; i < k; i++) { scanf("%d", &start[i]); } for (int i = 0; i < k; i++) { int r = 1; int c = start[i]; while (r < m) { int rr, cc; switch (grid[r][c]) { case 1: rr = r; cc = c + 1; break; case 2: rr = r + 1; cc = c; break; case 3: rr = r; cc = c - 1; break; } grid[r][c] = 2; r = rr; c = cc; } printf("%d ", c); } }
25	#include <bits/stdc++.h> using namespace std; long long int power(long long int x, long long int y, long long int p) { long long int res = 1; x = x % p; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } long long int mod = 1000000007; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long int n, m, k, r, c; cin >> n >> m >> k >> r >> c; long long int ax, ay, bx, by; cin >> ax >> ay >> bx >> by; long long int zz = 1; if (ax == ay && bx == by) { zz = 0; } cout << power(k, n * m - r * c * zz, mod); }
26	#include <bits/stdc++.h> using namespace std; int n, m, k, res; const int mo = 1000000007; pair<int, int> a, b, c, d; int ksm(int x, long long y) { int ans = 1; while (y) { if (y & 1) ans = 1ll * ans * x % mo; x = 1ll * x * x % mo; y = y / 2; } return ans; } int main() { res = 1; scanf("%d%d%d%d%d", &n, &m, &k, &c.first, &c.second); scanf("%d%d%d%d", &a.first, &a.second, &b.first, &b.second); if (a > b) swap(a, b); int doit = 1; while (doit) { if (a == b) { res = 1ll * res * ksm(k, 1ll * n * m); break; } d = make_pair(0, 0); if (a.first + c.first - >= d.first) { if (a.second <= b.second && a.second + c.second - >= b.second) { d = make_pair(a.first + c.first - b.first, a.second + c.second - b.second); } else if (a.second >= b.second && b.second + c.second - >= a.second) { d = make_pair(a.first + c.first - b.first, b.second + c.second - a.second); b.second = a.second; a.second = a.second + c.second - d.second; } } res = 1ll * res * ksm(k, 1ll * n * m - 2ll * c.first * c.second + 1ll * d.first * d.second) % mo; n = c.first; m = c.second; c = d; if (c.first == 0) { doit = 0; res = 1ll * res * ksm(k, 1ll * n * m) % mo; } } printf("%d\n", res); }
27	#include <bits/stdc++.h> using namespace std; int n, m, k, res; const int mo = 1000000007; pair<int, int> a, b, c, d; int ksm(int x, long long y) { int ans = 1; while (y) { if (y & 1) ans = 1ll * ans * x % mo; x = 1ll * x * x % mo; y = y / 2; } return ans; } int main() { res = 1; scanf("%d%d%d%d%d", &n, &m, &k, &c.first, &c.second); scanf("%d%d%d%d", &a.first, &a.second, &b.first, &b.second); if (a > b) swap(a, b); int doit = 1; while (doit) { if (a == b) { res = 1ll * res * ksm(k, 1ll * n * m); break; } d = make_pair(0, 0); if (a.first + c.first - >= d.first) { if (a.second <= b.second && a.second + c.second - >= b.second) { d = make_pair(a.first + c.first - b.first, a.second + c.second - b.second); } else if (a.second >= b.second && b.second + c.second - >= a.second) { d = make_pair(a.first + c.first - b.first, b.second + c.second - a.second); b.second = a.second; a.second = a.second + c.second - d.second; } } res = 1ll * res * ksm(k, 1ll * n * m - 2ll * c.first * c.second + 1ll * d.first * d.second) % mo; n = c.first; m = c.second; c = d; if (c.first == 0) { doit = 0; res = 1ll * res * ksm(k, 1ll * n * m) % mo; } } printf("%lld\n", res); }
28	#include <bits/stdc++.h> using namespace std; long long Fast(long long x, long long y) { long long ret = 1; while (y) { if (y & 1) ret = (ret * x) % 1000000007; x = (x * x) % 1000000007, y >>= 1; } return ret; } signed main() { long long n, m, r, c, ax, ay, bx, by, k; scanf("%lld%lld%lld%lld%lld", &n, &m, &k, &r, &c); scanf("%lld%lld%lld%lld", &ax, &ay, &bx, &by); if (ax == ay && bx == by) printf("%lld\n", Fast(k, n * m)); else printf("%lld\n", Fast(k, n * m - r * c)); return 0; }
29	#include <bits/stdc++.h> using namespace std; const int maxn = 5e3 + 5, mum = 1e9 + 7; int Pow(int A, long long B) { int num = 1; while (B) { if (B & 1) num = 1LL * num * A % mum; A = 1LL * A * A % mum; B >>= 1; } return num; } int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); int n, m, k, r, c, ax, ay, bx, by; cin >> n >> m >> k >> r >> c >> ax >> ay >> bx >> by; cout << (ax == bx && bx == by? Pow(k, 1LL * n * m) : Pow(k, 1LL * n * m - 1LL * r * c)) << '\n'; return 0; }
30	#include <bits/stdc++.h> using namespace std; long long solve(long long r, long long c, long long dr, long long dc) { if (dr == && c == 0) { return r * c; } if (dr >= r || dc >= c) { return r * c; } if (r >= * dr && c >= * dc) return r * c - (r - dr) * (c - dc); return r * c - solve(r - dr, c - dc, * dr - r, * dc - c); } long long lgput(long long b, long long e, long long mod) { long long ret = 1; while (e) { if (e & 1) ret = (ret * b) % mod; b = (b * b) % mod; e /= 2; } return ret; } int32_t main() { long long n, m, k, r, c; cin >> n >> m >> k >> r >> c; long long ax, bx, ay, by; cin >> ax >> ay >> bx >> by; long long ccrect = solve(r, c, abs(bx - ax), abs(by - ay)); long long aria = n * m; aria -= * r * c; long long dr = abs(bx - ax), dc = abs(by - ay); if (dr < r && dc < c) aria += (r - dr) * (c - dc); aria += ccrect; cout << lgput(k, aria, * * + 7) << endl; return 0; }
31	#include <bits/stdc++.h> using namespace std; long long solve(long long r, long long c, long long dr, long long dc) { if (dr == && dc == 0) { return r * c; } if (dr >= r || dc >= c) { return r * c; } if (r >= * dr && c >= * dc) return r * c - (r - dr) * (c - dc); return r * c - solve(r - dr, c - dc, * dr - r, * dc - c); } long long lgput(long long b, long long e, long long mod) { long long ret = 1; while (e) { if (e & 1) ret = (ret * b) % mod; b = (b * b) % mod; e /= 2; } return ret; } int32_t main() { long long n, m, k, r, c; cin >> n >> m >> k >> r >> c; long long ax, bx, ay, by; cin >> ax >> ay >> bx >> by; long long ccrect = solve(r, c, abs(bx - ax), abs(by - ay)); long long aria = n * m; aria -= * r * c; long long dr = abs(bx - ax), dc = abs(by - ay); if (dr < r && dc < c) aria += (r - dr) * (c - dc); aria += ccrect; cout << lgput(k, aria, * * + 7) << endl; return 0; }
32	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e5 + 10; int n, a[MAXN]; pair<int, int> ta[MAXN]; int seq[MAXN]; void solve() { cin >> n; for (int i = (1); i <= (n); ++i) cin >> a[i]; for (int i = (1); i <= (n); ++i) { ta[i].first = i - a[i]; ta[i].second = a[i]; } sort(ta + 1, ta + + n, [](const pair<int, int> &lhs, const pair<int, int> &rhs) { return lhs.first < rhs.first || (lhs.first < rhs.first && lhs.second < rhs.second); }); int i = 1; while (i <= n && ta[i].first < 0) ++i; if (i > n) { cout << "0\n"; return; } int ans = 1; seq[1] = ta[i].second; for (++i; i <= n; ++i) { auto p = lower_bound(seq + 1, seq + + ans, ta[i].second); *p = ta[i].second; ans = max(ans, int(p - seq)); } cout << ans << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(0); int _; _ = 1; while (_--) { solve(); } return 0; }
33	#include <bits/stdc++.h> template <class T> void read(T &a) { a = 0; char x = getchar(); bool f = 0; for (; x < '0' || x > '9'; x = getchar()) f |= x == '-'; for (; x >= '0' && x <= '9'; x = getchar()) a = (a << 3) + (a << 1) + x - '0'; if (f) a = -a; } template <class T, class... Args> void read(T &a, Args &...args) { read(a); read(args...); } using namespace std; const int N = 2e5 + 5; int n; int f[N], lim; pair<int, int> d[N]; bool cmp(pair<int, int> a, pair<int, int> b) { if (a.first ^ b.first) { return a.first < b.first; } return a.second < b.second; } int main() { read(n); for (int i = 1; i <= n; ++i) { read(d[i].first); d[i].second = i; } sort(d + 1, d + n + 1, cmp); int lim = 0; for (int i = 1; i <= n; ++i) { int c = d[i].second - d[i].first; if (c < 0) continue; if (lim == 0) { f[++lim] = c; continue; } if (c >= f[lim]) { f[++lim] = c; continue; } int l = 1, r = lim + 1; while (l < r - 1) { int mid = l + r >> 1; if (f[mid] <= c) { l = mid; } else { r = mid; } } if (f[l] > c) { f[l] = c; } else if (l!= lim) { f[l + 1] = c; } } printf("%d\n", lim); return 0; }
34	#include <bits/stdc++.h> using namespace std; struct FenwickTree2D { vector<vector<int>> nodes; vector<vector<int>> f; int n; FenwickTree2D() {} FenwickTree2D(int n) : n(n) { nodes.resize(n + 1); f.resize(n + 1); } void fakeUpdate(int u, int v) { if (u == || v == 0) { return; } for (int x = u; x <= n; x += x & -x) { nodes[x].push_back(v); } } void fakeGet(int u, int v) { if (u == || v == 0) { return; } for (int x = u; x > 0; x -= x & -x) nodes[x].push_back(v); } void update(int u, int v, int delta) { if (u == || v == 0) { return; } for (int x = u; x <= n; x += x & -x) { for (int y = lower_bound(nodes[x].begin(), nodes[x].end(), v) - nodes[x].begin() + 1; y <= nodes[x].size(); y += y & -y) { f[x][y] = max(f[x][y], delta); } } } int get(int u, int v) { if (u == || v == 0) { return 0; } int res = 0; for (int x = u; x > 0; x -= x & -x) for (int y = upper_bound(nodes[x].begin(), nodes[x].end(), v) - nodes[x].begin(); y > 0; y -= y & -y) res = max(res, f[x][y]); return res; } void build() { for (int i = 1; i <= n; ++i) { nodes[i].push_back(1000111000); sort(nodes[i].begin(), nodes[i].end()); f[i].resize(nodes[i].size() + 3); } } }; const int MAX = 2e5 + 5; int n, a[MAX], b[MAX], f[MAX]; FenwickTree2D fw
35	#include <bits/stdc++.h> using namespace std; namespace io { char ibuf[(1 << 20)], *iS, *iT, obuf[(1 << 20)], *oS = obuf, *oT = oS + (1 << 20) - 1, c, qu[55]; int f, qr; inline void flush(void) { return fwrite(obuf, 1, oS - obuf, stdout), oS = obuf, void(); } inline char getch(void) { return (iS == iT? (iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20), stdin), (iS == iT? EOF : *iS++)) : *iS++); } inline void putch(char x) { *oS++ = x; if (oS == oT) flush(); return; } string getstr(void) { string s = ""; char c = getch(); while (c =='' || c == '\n' || c == '\r' || c == '\t' || c == EOF) c = getch(); while (!(c =='' || c == '\n' || c == '\r' || c == '\t' || c == EOF)) s.push_back(c), c = getch(); return s; } void putstr(string str, int begin = 0, int end = -1) { if (end == -1) end = str.size(); for (register int i = begin; i < end; i++) putch(str[i]); return; } template <typename T> inline T read() { register T x = 0; for (f = 1, c = getch(); c < '0' || c > '9'; c = getch()) if (c == '-') f = -1; for (x = 0; c <= '9' && c >= '0'; c = getch()) x = x * + (c & 15); return x * f; } template <typename T> inline void write(const T& t) { register T x = t; if (!x) putch('0'); if (x < 0) putch('-'), x = -x; while (x) qu[++qr] = x % + '0',
36	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5; struct info { int maxi = 0; }; struct segtree { int n; vector<info> t; segtree(int n) { this->n = n + 1; t.resize(n * 4); } void Merge(info &node, info &l, info &r) { node.maxi = max(l.maxi, r.maxi); } void update(int node, int l, int r, int i, int j, int add) { if (l > j || r < i) { return; } if (l >= i && r <= j) { t[node].maxi = add; return; } int mid = (l + r) / 2; update(node * 2, l, mid, i, j, add); update(node * + 1, mid + 1, r, i, j, add); Merge(t[node], t[node * 2], t[node * + 1]); } void update(int l, int add) { update(1, 0, n, l, l, add); } info query(int node, int l, int r, int i, int j) { if (l > j || r < i) { info x; return x; } if (l >= i && r <= j) { return t[node]; } int mid = (l + r) / 2; info x = query(node * 2, l, mid, i, j); info y = query(node * + 1, mid + 1, r, i, j); info ret; Merge(ret, x, y); return ret; } int query(int l, int r) { info ret = query(1, 0, n, l, r); return ret.maxi; } }; int n; vector<pair<pair<int, int>, int> > a; segtree seg(N); int dp[N]; bool comp(pair<pair<int, int>, int> &a, pair<pair<int, int>, int> &b) { if (a.first.first == b.first.first) { return a.first.second < b.first.second; } return a.first.first < b.first.first; }
37	#include <bits/stdc++.h> using namespace std; long long n, m, ans; long long dis[2010][2010], c[2010][2010]; char s[2010][2010]; inline void solve(long long row, long long tl, long long tr, long long l, long long r) { if (l > r) return; long long mid = (l + r) >> 1; dis[row][mid] = 1000000000; long long t = tl; for (long long i = tl; i <= tr; i++) { long long val = c[row][i] + (i - mid) * (i - mid); if (val < dis[row][mid]) { dis[row][mid] = val; t = i; } } solve(row, tl, t, l, mid - 1); solve(row, t, tr, mid + 1, r); } signed main() { scanf("%lld%lld", &n, &m); for (long long i = 0; i <= n; i++) scanf("%s", s[i]); for (long long i = 0; i <= n; i++) { for (long long j = 0; j <= m; j++) c[i][j] = 1000000000; } for (long long j = 0; j <= m; j++) { long long res = 1000; for (long long i = 0; i <= n; i++) { if (s[i][j] == '1') res = i; c[i][j] = min(c[i][j], (i - res) * (i - res)); } res = 10000; for (long long i = n; ~i; i--) { if (s[i][j] == '1') res = i; c[i][j] = min(c[i][j], (i - res) * (i - res)); } } for (long long i = 0; i <= n; i++) { solve(i, 0, m, 0, m); for (long long j = 0; j <= m; j++) ans += dis[i][j]; } printf("%lld\n", ans); return 0; }
38	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; const int MOD = (int)1e9 + 7; const int N = (int)5e7; struct CHT { vector<pair<int, int> > lines; vector<pair<int, int> > st; int ind; int f(pair<int, int> p, int first) { return p.first * first + p.second; } bool check(pair<int, int> a, pair<int, int> b, pair<int, int> c) { return 1LL * (b.first - a.first) * (c.second - b.second) >= 1LL * (c.first - b.first) * (b.second - a.second); } void clear() { lines.clear(); st.clear(); ind = 0; } void add(pair<int, int> p) { lines.push_back(p); } void build() { sort(lines.begin(), lines.end()); reverse(lines.begin(), lines.end()); for (auto &p : lines) { while ((int)st.size() >= && check(st[st.size() - 2], st[st.size() - 1], p)) st.pop_back(); st.push_back(p); } } int query(int first) { while (ind < (int)st.size() - && f(st[ind], first) > f(st[ind + 1], first)) ind++; return f(st[ind], first); } }; CHT cht; int T; int n, m; long long ans; char v[2005][2005]; int ind[2005]; vector<int> poles[2005]; int lgput(int n, long long p) { int ans = 1, first = n; while (p) { if (p & 1) ans = 1LL * ans * first % MOD; first = 1LL * first * first % MOD; p >>= 1; } return ans; } void precalc() {} void solve() { cin >> n >> m; for (int i = 0; i <= n; i++) { cin >> v[i]; for (int j = 0; j <= m; j++) { if
39	#include <bits/stdc++.h> using namespace std; template <typename A, typename B> ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; } template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream &operator<<(ostream &os, const T_container &v) { string sep; for (const T &x : v) os << sep << x, sep = " "; return os; } const int mxN = 1e5 + 1, oo = 1e9; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int a[3] = {}; for (int i = 0; i < 3; ++i) a[i] = count(begin(s), end(s), 'A' + i); int n = s.size(); cout << ((n % == and a[0] + a[2] <= a[1])? "Yes\n" : "No\n"); } }
40	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; const int N = 1e5 + 2; inline void solve() { string s; cin >> s; long long a = 0, b = 0, c = 0; for (int i = 0; i < s.size(); ++i) { if (s[i] == 'A') a++; if (s[i] == 'B') b++; if (s[i] == 'C') c++; } if (b >= (a + c)) return void(cout << "YES" << "\n"); return void(cout << "NO" << "\n"); } int main() { ios_base::sync_with_stdio(0); ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); ; int tc = 1; cin >> tc; while (tc--) solve(); return 0; }
41	#include <bits/stdc++.h> using namespace std; int main() { long long int t; cin >> t; while (t--) { string s; cin >> s; long long int a = 0, b = 0, c = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'A') a++; else if (s[i] == 'B') b++; else c++; } if (b == c + a) cout << "YES\n"; else cout << "NO\n"; } return 0; }
42	#include <bits/stdc++.h> template <typename T> auto getint() -> T { T ret = 0; char c; while ((c = getchar()) &&!isspace(c)) { ret = ret * + c - '0'; } return ret; } int main() { unsigned T = getint<unsigned>(), cntA, cntB, cntC; char c; while (T--) { cntA = cntB = cntC = 0; while ((c = getchar()) &&!isspace(c)) { if (c == 'A') ++cntA; else if (c == 'B') ++cntB; else ++cntC; } printf("%s\n", ((cntA + cntC <= cntB)? "YES" : "NO")); } }
43	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 17; int q, a, b, c; void solve() { string s; cin >> s; for (int i = 0; i < s.size(); i++) { if (s[i] == 'A') { a++; } if (s[i] == 'B') { b++; } if (s[i] == 'C') { c++; } } if (b >= (a + c) && b >= a && b >= c) { cout << "YES\n"; } else cout << "NO\n"; a = 0; b = 0; c = 0; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int t = 1; cin >> t; while (t--) { solve(); } return 0; }
44	#include <bits/stdc++.h> int main() { int t, i; scanf("%d", &t); while (t--) { char s[55]; int a = 0, b = 0, c = 0, l; scanf("%s", s); l = strlen(s); for (i = 0; i < l; i++) { if (s[i] == 'A') a++; else if (s[i] == 'B') b++; else c++; } if (a + c == b) { printf("YES\n"); } else printf("NO\n"); } return 0; }
45	#include <bits/stdc++.h> using namespace std; int n, i, j, da, db, dc; string a; int main() { cin >> n; for (i = 0; i < n; ++i) { cin >> a; da = 0; db = 0; dc = 0; for (j = 0; j < a.size(); ++j) { if (a[j] == 'A') ++da; if (a[j] == 'B') ++db; if (a[j] == 'C') ++dc; } if (da + dc == db) cout << "YES"; else cout << "NO"; } }
46	#include <bits/stdc++.h> using namespace std; int main() { int T; string s; cin >> T; while (T-- > 0) { cin >> s; int a = 0, b = 0, c = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'A') { ++a; } else if (s[i] == 'B') { ++b; } else { ++c; } } if (a == && b == c) { cout << "YES" << endl; continue; } if (a == b && c == 0) { cout << "YES" << endl; continue; } if (b == a + c) { cout << "YES" << endl; continue; } cout << "NO" << endl; } return 0; }
47	#include <bits/stdc++.h> using namespace std; int cubeta[1000]; int main() { int t; cin >> t; while (t--) { string s; cin >> s; for (int i = 0; i < s.size(); i++) { cubeta[s[i]]++; } if (cubeta['A'] == 0) { if (cubeta['B'] == cubeta['C']) { cout << "YES\n"; } else { cout << "NO"; } } else if (cubeta['C'] == 0) { if (cubeta['B'] == cubeta['A']) { cout << "YES\n"; } else { cout << "NO"; } } else if (cubeta['B'] == 0) { cout << "NO\n"; } else { if (cubeta['A'] <= cubeta['B'] && cubeta['B'] - cubeta['A'] == cubeta['C']) { cout << "YES\n"; } else { cout << "NO\n"; } } cubeta['A'] = 0; cubeta['B'] = 0; cubeta['C'] = 0; } return 0; }
48	#include <bits/stdc++.h> using namespace std; bool cat(string s) { int a = 0, b = 0, c = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'A') a++; else if (s[i] == 'B') b++; else c++; } if (abs(b - c) == a) return true; else return false; } int main() { string s; int x; cin >> x; for (int i = 0; i < x; i++) { cin >> s; if (cat(s)) cout << "YES" << endl; else cout << "NO" << endl; } }
49	#include <bits/stdc++.h> using namespace std; bool cat(string s) { int a = 0, b = 0, c = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'a') a++; else if (s[i] == 'b') b++; else c++; } if (abs(b - c) == a) return true; else return false; } int main() { string s; int x; cin >> x; for (int i = 0; i < x; i++) { cin >> s; if (cat(s)) cout << "YES" << endl; else cout << "NO" << endl; } }
50	#include <bits/stdc++.h> using namespace std; int test(string str) { int len = str.length(); int a = 0, b = 0, c = 0; for (int i = 0; i < len; i++) { if (str[i] == 'A') a += 1; else if (str[i] == 'B') b += 1; else if (str[i] == 'C') c += 1; } if (a == b && b - a == c) return 1; return 0; } int main() { int t; cin >> t; string s; while (t--) { cin >> s; if (test(s)) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
51	#include <bits/stdc++.h> #pragma GCC target("avx2") #pragma GCC optimize("Ofast") #pragma GCC optimize("unroll-loops") using namespace std; template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) { os << '(' << p.first << ',' << p.second << ')'; return os; } template <class T> ostream &operator<<(ostream &os, const vector<T> &v) { os << '{'; for (int i = 0; i < (int)v.size(); i++) { if (i) { os << ','; } os << v[i]; } os << '}'; return os; } ostream &operator<<(ostream &os, const set<int> &se) { os << '{'; int now = 0; for (auto x : se) { if (now) { os << ','; } os << x; now++; } os << '}'; return os; } void debugg() { cerr << endl; } template <class T, class... Args> void debugg(const T &x, const Args &...args) { cerr << " " << x; debugg(args...); } using namespace std; const int inf = (1 << 30) - 1; const long long linf = 1LL << 61; const int MAX = 510000; int dy[8] = {0, 1, 0, -1, 1, -1, -1, 1}; int dx[8] = {-1, 0, 1, 0, 1, -1, 1, -1}; const double pi = acos(-1); const double eps = 1e-8; template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { if (a > b) { a = b; return true; } else return false; } template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { if (a < b) { a = b; return true; } else return false; } template <typename T> inline void print(T &a) { int sz = a.size(); for (auto itr = a.
52	#include <bits/stdc++.h> using namespace std; signed main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.size(); int cnt = 0; for (int i = 0; i < n; i++) { cnt += s[i] == 'B'; } if (cnt + cnt >= n) cout << "YES\n"; else cout << "NO\n"; } }
53	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string str; cin >> str; int a = 0, b = 0, c = 0; for (int i = 0; i < str.size(); i++) { if (str[i] == 'A') a++; else if (str[i] == 'B') b++; else c++; } if (a + c == b) cout << "YES"; else cout << "NO"; } return 0; }
54	#include <bits/stdc++.h> int main() { int t; scanf("%d", &t); while (t--) { char str[100]; scanf("%s", str); int a = 0, b = 0, c = 0; for (int i = 0; i < strlen(str); i++) { if (str[i] == 'A') { a++; } else if (str[i] == 'B') { b++; } else { c++; } } int d = a + c; if (d == b) { printf("YES"); } else printf("NO"); } return 0; }
55	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int l = s.length(), counta = 0, countb = 0, countc = 0, i; for (i = 0; i < l; i++) { if (s[i] == 'A') counta++; if (s[i] == 'B') countb++; if (s[i] == 'C') countc++; } if (countb >= counta + countc) cout << "YES" << "\n"; else cout << "NO" << "\n"; } }
56	#include <bits/stdc++.h> using namespace std; int main() { long long t; cin >> t; while (t--) { int n; cin >> n; int a[n]; vector<pair<pair<int, int>, int>> res; for (int i = 0; i < n; i++) cin >> a[i]; for (int i = 0; i < n; i++) { int m = a[i]; int ind = i; for (int j = i + 1; j < n; j++) { if (a[j] < a[i]) { m = a[j]; ind = j; } } if (i!= ind) { int k = a[ind]; for (int j = ind; j > i; j--) { a[j] = a[j - 1]; } a[i] = k; res.push_back({{i + 1, ind + 1}, abs(ind - i)}); } } cout << res.size() << endl; for (auto x : res) { cout << x.first.first << " " << x.first.second << " " << x.second << endl; } } }
57	#include <bits/stdc++.h> using namespace std; long long a[1000005]; long long tot; struct que { long long x, y, z; } t[1000005]; int main() { long long tt; scanf("%lld", &tt); while (tt--) { long long n; tot = 0; scanf("%lld", &n); for (long long i = 1; i <= n; i++) scanf("%lld", &a[i]); for (long long i = 1; i <= n; i++) { long long mi = i; for (long long j = i + 1; j <= n; j++) if (a[mi] > a[j]) mi = j; long long k = a[mi]; for (long long j = mi - 1; j >= i; j--) a[j + 1] = a[j]; a[i] = k; if (mi!= i) t[++tot].x = i, t[++tot].y = mi, t[++tot].z = mi - i; } printf("%lld\n", tot); for (long long i = 1; i <= tot; i++) printf("%lld %lld %lld\n", t[i].x, t[i].y, t[i].z); } return 0; }
58	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma") #pragma GCC optimize("unroll-loops") using namespace std; void matrix(vector<vector<char> > &v, int r, int c, int row, int col, int k) { int ls = -1, rs = -1, i = row, j = col, mn; while (i >= and j >= and v[i][j]!= '.') { ls++; i--; j--; } i = row, j = col; while (i >= and j < c and v[i][j]!= '.') { rs++; i--; j++; } mn = min(ls, rs); if (mn >= k) { ls = -1, rs = -1; i = row, j = col; while (i >= and j >= and v[i][j]!= '.' and ls <= mn) { v[i][j] = '$'; i--; j--; ls++; } i = row, j = col; while (i >= and j < c and v[i][j]!= '.' and rs <= mn) { v[i][j] = '$'; i--; j++; rs++; } } return; } void solve() { char temp; bool ans = 1; int r, c, d; cin >> r >> c >> d; vector<vector<char> > v(r, vector<char>(c)); for (long long i = 0; i < r; i++) for (long long j = 0; j < c; j++) { cin >> temp; v[i][j] = temp; } for (long long i = d; i < r; i++) { for (long long j = 0; j < c; j++) if (v[i][j]!= '.') matrix(v, r, c, i, j, d); } for (long long i = 0; i < r; i++) for (long long j = 0; j < c; j++) if (v[i][j] == '*')
59	#include <bits/stdc++.h> using namespace std; long long max(long long a, long long b) { if (a >= b) { return a; } return b; } long long min(long long a, long long b) { if (a <= b) { return a; } return b; } long long modpower(long long a, long long n, long long d = 1000000007) { long long res = 1; while (n) { if (n % 2) { res = ((res % d) * (a % d)) % d; n--; } else { a = ((a % d) * (a % d)) % d; n /= 2; } } return res; } long long modadd(long long a, long long b, long long d = 1000000007) { return ((a % d) + (b % d)) % d; } long long modsubtract(long long a, long long b, long long d = 1000000007) { return ((a % d) - (b % d)) % d; } long long modproduct(long long a, long long b, long long d = 1000000007) { return ((a % d) * (b % d)) % d; } long long n, m, k; long long up(long long i, long long j, vector<vector<char>> &input) { long long r = i - 1; long long c = j + 1; long long ct = 0; while (r >= && c < m && input[r][c]!= '.') { ct++; r--; c++; } return ct >= k? ct : 0; } void fill(long long i, long long j, long long total, vector<vector<char>> &input) { long long r = i; long long c1 = j; long long c2 = j; while (total) { total--; input[r][c1] = '#'; input[r][c2] = '#'; r--; c1--; c2++; } } void down(long long i, long long j, vector<vector<char>> &input) { long long r = i + 1; long long c = j + 1; long long ct = 0; while (r < n && c < m && input[r][c]
60	#include <bits/stdc++.h> using namespace std; void in() { return; } template <typename T, typename... Types> void in(T &a, Types &...b) { cin >> (a); in(b...); } void o() { return; } template <typename T, typename... Types> void o(T a, Types... b) { cout << (a); cout <<''; o(b...); } bool sortin(const pair<long long int, long long int> &e, const pair<long long int, long long int> &f) { return (e.first < f.first); } bool POT(long long int x) { return x && (!(x & (x - 1))); } long long int i, j, k, l, m, n, p, q, r, a, b, c, x, y, z, ts, mn = 1e18, mod = 1e9 + 7; long long int ar[250005], br[250005], xr[250005], tem[250005]; int main() { { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); }; in(ts); while (ts--) { in(n, m, k); string s[n + 1]; vector<vector<long long int> > vis(n + 5, vector<long long int>(m + 5, 0)); for (long long int i = 0; i <= n - 1; i++) { in(s[i]); } for (long long int i = 0; i <= n - 1; i++) { for (long long int j = 0; j <= m - 1; j++) { x = i; y = j; p = q = 0; while (x >= and y >= and s[x][y] == '*') x--, y--, p++; x = i; y = j; while (x >= and y < m and s[x][y] == '*') x--, y++, q++; if (min(p, q) > k) { x = i; y = j; c = 0; while (c < min(p, q)) vis[x--][y--
61	#include <bits/stdc++.h> using namespace std; int n, m, k; vector<vector<bool>> used; vector<vector<char>> a; void f(int i, int j) { if (a[i][j] == '.') { return; } int left = 0; int right = 0; while (i - right >= && j + right < m && a[i - right][j + right] == '*') { right += 1; } while (j - left >= && i - left >= && a[i - left][j - left] == '*') { left += 1; } if (right - >= k && left - >= k) { int mi = min(right, left); for (int t = 0; t < mi; t++) { used[i - t][j + t] = true; used[i - t][j - t] = true; } } } void solution() { cin >> n >> m >> k; a.assign(n, vector<char>(m)); for (auto &line : a) { for (char &x : line) { cin >> x; } } used.assign(n, vector<bool>(m, false)); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { f(i, j); } } bool ok = true; for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { if (a[i][j] == '*' &&!used[i][j]) { ok = false; } } } cout << (ok? "YES" : "NO") << endl; } int32_t main() { cin.tie(nullptr); ios_base::sync_with_stdio(false); int t = 1; cin >> t; for (int i = 0; i < t; i++) { solution(); } return 0; }
62	#include <bits/stdc++.h> using namespace std; long long t, n, m, k; bool solve(vector<vector<char>>& board) { function<bool(int, int, int)> check = [&](int row, int x, int y) { if (x > y) swap(x, y); if (((y - x) & 1) || (y - x) / < k || row + (y - x) / >= n) return false; int a = row + (y - x) / 2, b = (x + y) / 2; while (a >= row) { if (board[a][b] == '.') return false; --a, --b; } a = row + (y - x) / 2, b = (x + y) / 2; while (a >= row) { if (board[a][b] == '.') return false; --a, ++b; } return true; }; function<void(int, int, int)> fill = [&](int row, int x, int y) { if (x > y) swap(x, y); int a = row + (y - x) / 2, b = (x + y) / 2; while (a >= row) { board[a][b] = 'X'; --a, --b; } a = row + (y - x) / 2, b = (x + y) / 2; while (a >= row) { board[a][b] = 'X'; --a, ++b; } }; function<void()> paint = [&]() { for (int i = 0; i < n; ++i) { for (int j = 0; j < m; ++j) cout << board[i][j] << " "; cout << endl; } }; int i, j, t; for (i = 0; i < n; ++i) { for (j = 0; j < m; ++j) { if (board[i][j] == '*') { for (t = 0; t < m; ++t) { if (board[i][t]!= '.' && check(i, j, t)) { fill(i, j, t); } } } if (board[i][j
63	#include <bits/stdc++.h> using namespace std; void print(vector<pair<int, int>> a) { for (auto x : a) { cout << x.first << " "; } cout << "\n"; } void solve() { int n; cin >> n; vector<pair<int, int>> aa(n); set<pair<int, int>> sp; for (int i = 0; i < n; i++) { cin >> aa[i].first; aa[i].second = i; if (aa[i].first > 0) sp.insert(aa[i]); } vector<pair<int, int>> ans; while (sp.size() > 1) { pair<int, int> a = *sp.begin(); pair<int, int> b = *sp.rbegin(); sp.erase(a); sp.erase(b); ans.push_back({a.second, b.second}); a.first--; b.first--; if (a.first > 0) sp.insert(a); if (b.first > 0) ; sp.insert(b); } cout << ans.size() << "\n"; for (int i = 0; i < ans.size(); i++) { cout << ans[i].first + << " " << ans[i].second + << "\n"; } } int main() { int t; cin >> t; while (t--) { solve(); } return 0; }
64	#include <bits/stdc++.h> using namespace std; const int Nmax = 1e5 + 5; const int Mod = 666013; const int oo = 1e9 + 1; int T; int main() { cin >> T; while (T--) { int n; vector<pair<int, int> > v; cin >> n; int sum = 0; for (int i = 1; i <= n; i++) { int x; cin >> x; sum += x; v.push_back({x, i}); } sort(v.begin(), v.end()); int mx = (*v.rbegin()).first; sum -= mx; if (mx >= sum) { cout << sum << "\n"; for (auto e : v) while (sum > && e.first > 0) sum--, e.first--, cout << e.second << " " << (*v.rbegin()).second << "\n"; } else { int k = 0; pair<int, int> sol[Nmax]; for (int i = 0; i < v.size(); i++) if (v[i].first > 0) { while (sum - >= mx && v[i].first > 0) { k++; sol[k] = {v[i].second, v[i + 1].second}; sum -= 2; v[i].first--; v[i + 1].first--; } } for (auto e : v) while ((sum > || mx > 0) && e.first > 0) mx--, sum--, e.first--, k++, sol[k] = {e.second, (*v.rbegin()).second}; cout << k << "\n"; for (int i = 1; i <= k; i++) cout << sol[i].first << " " << sol[i].second << "\n"; } } return 0; }
65	#include <bits/stdc++.h> const int maxn = 2e5 + 9; using namespace std; pair<int, int> rr; int main() { int t; scanf("%d", &t); while (t--) { int n; scanf("%d", &n); priority_queue<pair<int, int>> ss; for (int i = 0; i < n; i++) { scanf("%d", &rr.first); rr.second = i; ss.push(rr); } queue<pair<int, int>> qq; while (!ss.empty()) { pair<int, int> r1 = ss.top(); ss.pop(); pair<int, int> r2; if (!ss.empty()) { r2 = ss.top(); ss.pop(); } else { break; } while (r1.first > && r2.first > 0) { r1.first--; r2.first--; qq.push({r1.second, r2.second}); } if (r1.first > 0) { ss.push(r1); } if (r2.first > 0) { ss.push(r2); } } printf("%d\n", qq.size()); while (!qq.empty()) { pair<int, int> rr = qq.front(); qq.pop(); printf("%d %d\n", rr.first + 1, rr.second + 1); } } }
66	#include <bits/stdc++.h> using namespace std; const int Nmax = 1e5 + 5; const int Mod = 666013; const int oo = 1e9 + 1; int T; int main() { cin >> T; while (T--) { int n; vector<pair<int, int> > v; cin >> n; int sum = 0; for (int i = 1; i <= n; i++) { int x; cin >> x; sum += x; v.push_back({x, i}); } sort(v.begin(), v.end()); int mx = (*v.rbegin()).first; sum -= mx; if (mx >= sum) { cout << sum << "\n"; for (auto e : v) while (sum > && e.first > 0) sum--, e.first--, cout << e.second << " " << (*v.rbegin()).second << "\n"; } else { int k = 0; pair<int, int> sol[Nmax]; for (int i = 0; i < v.size(); i++) if (v[i].first > 0) { while (sum - >= mx && v[i].first > 0) { k++; sol[k] = {v[i].second, v[i + 1].second}; sum -= 2; v[i].first--; v[i + 1].first--; } } for (auto e : v) while ((sum > || mx > 0) && e.first > 0) mx--, sum--, e.first--, k++, sol[k] = {e.second, (*v.rbegin()).second}; cout << k << "\n"; for (int i = 1; i <= k; i++) cout << sol[i].first << " " << sol[i].second << "\n"; } } return 0; }
67	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 10; long long a[N], tr[N], n; int lowbit(int x) { return x & -x; } long long sum(int x) { long long res = 0; for (int i = x; i; i -= lowbit(i)) res += tr[i]; return res; } void add(int x, int c) { for (int i = x; i <= n; i += lowbit(i)) tr[i] += c; } void solve() { cin >> n; vector<int> q; for (int i = 1; i <= n; i++) { scanf("%lld", &a[i]); q.push_back(a[i]); } sort(q.begin(), q.end()); q.erase(unique(q.begin(), q.end()), q.end()); for (int i = 1; i <= n; i++) a[i] = lower_bound(q.begin(), q.end(), a[i]) - q.begin() + 1; for (int i = 1; i <= n; i++) tr[i] = 0; long long res = 0; for (int i = 1; i <= n; i++) { int head = sum(a[i] - 1), tail = sum(n) - sum(a[i]); if (head <= tail) { res += head; add(a[i], 1); } else { res += tail; add(a[i], 1); } } cout << res << "\n"; } int main() { int t; cin >> t; while (t--) solve(); return 0; }
68	#include <bits/stdc++.h> using namespace std; namespace fast_read { char gc(void) { const int S = << 17; static char buf[S], *s = buf, *t = buf; if (s == t) t = buf + fread(s = buf, 1, S, stdin); if (s == t) return EOF; return *s++; } long long RD(void) { long long a = 0, b = 1, c = gc(); for (;!isdigit(c); c = gc()) b ^= (c == '-'); for (; isdigit(c); c = gc()) a = a * + c - '0'; return b? a : -a; } }; // namespace fast_read using fast_read::RD; const long long LINF = 1e18 + 5, INF = 0x3f3f3f3f, hxe = 1319, mod = 998244353; inline long long gcd(long long a, long long b) { return b? gcd(b, a % b) : a; } inline long long Qpow(long long a, long long b) { long long s = 1; while (b) { if (b & 1) { s = (s * a) % mod; } a = a * a % mod; b >>= 1; } return s; } inline long long Qinv(long long a) { return Qpow(a, mod - 2); } const int maxn = 2e5 + 5; int n, a[maxn]; int tree[maxn]; void update(int x, int v) { while (x <= n) { tree[x] += v; x += (x & (-x)); } } int query(int x) { int res = 0; while (x > 0) { res += tree[x]; x -= (x & (-x)); } return res; } void solve() { cin >> n; memset(tree, 0, sizeof(tree)); vector<int> qc; for (int i = 1; i <= n; i++) cin >> a[i], qc.push_back(a[i]); sort(begin(qc), end(qc)); qc.erase(unique(begin(qc), end(qc)), qc.end()); for (int
69	#include <bits/stdc++.h> using namespace std; const long long N = 5e5 + 7; const long long M = 1e6 + 7; const long long mod = 1e9 + 7; const long long INF = 0x3f3f3f3f; const double eps = 1e-6; long long t, n, tot = 0; long long arr[N], lsh[N], tree[N]; inline void pushup(long long node) { tree[node] = tree[node << 1] + tree[node << | 1]; } void build(long long node, long long l, long long r) { if (l == r) { tree[node] = 0; return; } long long mid = l + r >> 1; build(node << 1, l, mid), build(node << | 1, mid + 1, r); pushup(node); } void Updata(long long node, long long l, long long r, long long pos, long long val) { if (l == r) { tree[node] += val; return; } long long mid = l + r >> 1; if (pos <= mid) Updata(node << 1, l, mid, pos, val); else Updata(node << | 1, mid + 1, r, pos, val); pushup(node); } long long quary(long long node, long long l, long long r, long long ql, long long qr) { if (!ql || ql > qr) return 0; if (ql <= l && r <= qr) return tree[node]; long long mid = l + r >> 1; long long ans = 0; if (ql <= mid) ans += quary(node << 1, l, mid, ql, qr); if (qr > mid) ans += quary(node << | 1, mid + 1, r, ql, qr); return ans; } long long getid(long long val) { return lower_bound(lsh + 1, lsh + + tot, val) - lsh; } void solve() { cin >> n; tot = 0; for (long long i = 1; i <= n; ++i) { cin >> arr[i]; lsh[++tot] = arr[i]; } sort(lsh + 1
70	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10, M = 1e5 + 29; int a[N], b[N]; int c[N]; int n; int cnt; void add(int x) { while (x <= cnt) { c[x] += 1; x += x & -x; } } int get(int x) { int ans = 0; while (x) { ans += c[x]; x -= x & -x; } return ans; } void solve() { cin >> n; for (int i = 1; i <= n; i++) { c[i] = 0; scanf("%d", &a[i]); b[i] = a[i]; } sort(b + 1, b + + n); cnt = unique(b + 1, b + + n) - b - 1; long long ans = 0; for (int i = 1; i <= n; i++) { int p = lower_bound(b + 1, b + + n, a[i]) - b; int x = get(p - 1); int y = get(n) - get(p); ans += min(x, y); add(p); } cout << ans << endl; } int main() { int t; cin >> t; while (t--) { solve(); } }
71	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10, M = 1e5 + 29; int a[N], b[N]; int c[N]; int n; int cnt; void add(int x) { while (x <= cnt) { c[x] += 1; x += x & -x; } } int get(int x) { int ans = 0; while (x) { ans += c[x]; x -= x & -x; } return ans; } void solve() { cin >> n; for (int i = 1; i <= n; i++) { c[i] = 0; scanf("%d", &a[i]); b[i] = a[i]; } sort(b + 1, b + + n); cnt = unique(b + 1, b + + n) - b - 1; long long ans = 0; for (int i = 1; i <= n; i++) { int p = lower_bound(b + 1, b + + n, a[i]) - b; int x = get(p - 1); int y = get(cnt) - get(p); ans += min(x, y); add(p); } cout << ans << endl; } int main() { int t; cin >> t; while (t--) { solve(); } }
72	#include <bits/stdc++.h> using namespace std; template <typename T> inline T gcd(T a, T b) { return b? gcd(b, a % b) : a; } template <typename T> inline T lowbit(T x) { return x & -x; } const long long N = 2e5 + 10; long long n; vector<long long> vec; long long tr[N]; long long a[N]; void modify(long long x) { for (long long i = x; i <= n; i += lowbit(i)) tr[i]++; } long long query(long long x) { long long res = 0; for (long long i = x; i >= 1; i -= lowbit(i)) res += tr[i]; return res; } void init() { for (long long i = 1; i <= n; ++i) tr[i] = 0; } void solve() { cin >> n; vec.clear(); init(); for (long long i = 1; i <= n; ++i) { long long x; scanf("%lld", &x); a[i] = x; vec.push_back(x); } sort(vec.begin(), vec.end()); vec.erase(unique(vec.begin(), vec.end()), vec.end()); long long res = 0; for (long long i = 1; i <= n; ++i) { long long p = lower_bound(vec.begin(), vec.end(), a[i]) - vec.begin() + 1; long long x = query(p - 1); long long y = query(n) - query(p); res += min(x, y); modify(p); } cout << res << endl; } signed main() { long long _; cin >> _; while (_--) solve(); return 0; }
73	#include <bits/stdc++.h> using namespace std; template <typename T> istream& operator>>(istream& is, vector<T>& v) { for (auto& i : v) is >> i; return is; } const long long INF = 1e18; const long long MOD = 1e9 + 7; const int inf = 1e9; const int N = 2e5 + 10; bool flag; struct ftree { vector<int> a; ftree(int n) { a.resize(n + 1); } long long qu(int n) { long long res = 0; for (int i = n; i >= 0; i = (i + & i) - 1) res += a[i]; return res; } long long qu(int l, int r) { return qu(r) - qu(l - 1); } void set(int x) { for (; x < (int)a.size(); x |= x + 1) a[x]++; } }; void solve() { int n; cin >> n; vector<int> a(n), rv; cin >> a; rv = a; map<int, int> mp; ftree ftr(n); sort(rv.begin(), rv.end()); rv.erase(unique(rv.begin(), rv.end()), rv.end()); for (int i = 0; i < n; i++) a[i] = lower_bound(rv.begin(), rv.end(), a[i]) - rv.begin(); long long ans = 0; for (auto now : a) { int l = ftr.qu(0, now - 1), r = ftr.qu(now + 1, (int)rv.size()); ans += min(l, r); ftr.set(now); } cout << ans; } int main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cout << fixed << setprecision(12); int tt = 1; cin >> tt; while (tt--) { flag = 0; solve(); cout << '\n'; } return 0; }
74	#include <bits/stdc++.h> using namespace std; const int maxn = 2e5 + 10; int tree[maxn], a[maxn], b[maxn], cnt; map<int, int> mp; map<int, int> cnt1; int n; int lowbit(int x) { return x & (-x); } void update(int x) { for (; x <= n; x += lowbit(x)) tree[x]++; } int query(int x) { int ans = 0; for (; x > 0; x -= lowbit(x)) ans += tree[x]; return ans; } void init() { for (int i = 0; i <= n; i++) tree[i] = 0; mp.clear(); cnt1.clear(); cnt = 0; } int main() { int t; scanf("%d", &t); while (t--) { scanf("%d", &n); init(); for (int i = 1; i <= n; i++) scanf("%d", &a[i]), b[i] = a[i]; long long ans = 0; sort(b + 1, b + + n); for (int i = 1; i <= n; i++) if (!mp[b[i]]) mp[b[i]] = ++cnt; for (int i = 1; i <= n; i++) { int j = mp[a[i]]; update(j); cnt1[j]++; int pre = query(j); ans += min(i - pre, pre - tree[j]); } printf("%lld\n", ans); } return 0; }
75	#include <bits/stdc++.h> using namespace std; int st_size; vector<int> st; void modi(int p, int v) { for (st[p += st_size / 2] += v; p > 1; p >>= 1) st[p >> 1] = st[p] + st[p ^ 1]; } int sum(int l, int r) { int res = 0; for (l += st_size / 2, r += st_size / 2; l < r; l >>= 1, r >>= 1) { if (l & 1) res += st[l++]; if (r & 1) res += st[--r]; } return res; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> a(n); for (auto &e : a) cin >> e; vector<int> b(n); for (int i = 0; i < n; i++) b[i] = a[i]; sort(b.begin(), b.end()); b.erase(unique(b.begin(), b.end()), b.end()); for (int i = 0; i < n; i++) a[i] = (int)(lower_bound(b.begin(), b.end(), a[i]) - b.begin()); int ts = 0; for (; (1 << ts) < n; ts++) ; ts++; st.clear(); st_size = << ts; st.resize(st_size); int ans = 0; for (int i = 0; i < n; i++) { ans += min(sum(0, a[i]), sum(a[i] + 1, n)); modi(a[i], 1); } cout << ans << endl; } }
76	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; using ii = pair<long long, long long>; long long power(long long x, long long y) { long long res = 1; while (y) { if (y & 1) res = (res * x) % mod; y = y / 2, x = (x * x) % mod; } return res % mod; } long long seg[800100]; void build(long long idx, long long l, long long r) { long long mid = (l + r) / 2; if (l == r) { seg[idx] = 0; return; } build(2 * idx, l, mid); build(2 * idx + 1, mid + 1, r); seg[idx] = seg[2 * idx] + seg[2 * idx + 1]; return; } void upd(long long idx, long long l, long long r, long long ind, long long val) { if (l == r) { seg[idx] = val; return; } long long mid = (l + r) / 2; if (ind <= mid and ind >= l) { upd(2 * idx, l, mid, ind, val); } else { upd(2 * idx + 1, mid + 1, r, ind, val); } seg[idx] = seg[2 * idx] + seg[2 * idx + 1]; return; } long long get(long long idx, long long l, long long r, long long gl, long long gr) { if (l >= gl and r <= gr) { return seg[idx]; } if (gl > r or gr < l) { return 0; } long long mid = (l + r) / 2; return get(2 * idx, l, mid, gl, gr) + get(2 * idx + 1, mid + 1, r, gl, gr); } void solve() { long long n; cin >> n; long long a[n]; long long b[n]; for (long long i = 0; i < n; i++) { cin >> a[i]; b[i] = a[i]; } sort(a, a + n); map<long long, long long> mpp; long long st = 1; for
77	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 10; const int INF = 10000000; void work() { int n, d; cin >> n >> d; vector<int> a(n, 0); vector<int> st(n, false); for (int i = 1; i <= n; i++) cin >> a[i - 1]; int res = 0; for (int i = 0; i < n; i++) { if (!st[i]) { st[i] = true; int v = i; vector<int> ans; ans.push_back(v); while (1) { int w = (v + d) % n; if (st[w]) break; st[w] = true; ans.push_back(w); v = w; } int cnt = ans.size(); vector<int> p; for (int j = 0; j < cnt; j++) { if (a[ans[j]] == 0) p.push_back(j); } int cnt2 = p.size(); if (p.empty()) { res = INF; } else { for (int j = 0; j < cnt2 - 1; j++) { res = max(res, p[i + 1] - p[i] - 1); } res = max(res, p[0] - p[cnt2 - 1] + cnt - 1); } } } if (res == INF) { cout << "-1\n"; } else cout << res << "\n"; } int main() { int T; scanf("%d", &T); for (int ca = 1; ca <= T; ++ca) { work(); } return 0; }
78	#include <bits/stdc++.h> #pragma GCC target("avx2") #pragma GCC optimization("O3") #pragma GCC optimization("unroll-loops") using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int z, T; cin >> T; for (z = 1; z <= T; z++) { long long int N, M; cin >> N >> M; long long int a, b, c, i, j, k, A[N], dp[N]; queue<long long int> q; bool x[N]; for (i = 0; i < N; i++) { x[i] = true; dp[N] = 1e10; cin >> A[i]; if (A[i] == 0) { x[i] = false; dp[i] = 0; q.push(i); } } while (q.size()!= 0) { a = q.front(); x[a] = false; q.pop(); if (a - M >= 0) { if (x[a - M]) { dp[a - M] = dp[a] + 1; x[a - M] = false; q.push(a - M); } } else { b = N - (M - a); if (x[b]) { dp[b] = dp[b] + 1; x[b] = false; q.push(b); } } } a = 0; for (i = 0; i < N; i++) { a = max(a, dp[i]); } if (a >= 1e10) { cout << "-1\n"; } else { cout << a << "\n"; } } return 0; }
79	#include <bits/stdc++.h> using namespace std; #pragma GCC optimize("Ofast") #pragma GCC target("avx,avx2,sse,sse2,sse3,sse4,popcnt,fma") #pragma GCC optimize("unroll-loops") void prepareIO() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(std::numeric_limits<double>::max_digits10); } struct HASH { size_t operator()(const pair<long long int, long long int>& x) const { return hash<long long>()(x.first ^ (x.second) << 32); } }; const long long int MOD = 1e9 + 7; const long long int N = 1e5 + 5; void dfs(long long int u, long long int st, vector<long long int>& a, vector<long long int>& adj, vector<bool>& vis, long long int& ans, bool& notPoss) { if (a[u] == 0) { vis[u] = true; return; } long long int v = adj[u]; if (vis[v] && v == st) { notPoss = true; return; } vis[u] = true; ans++; dfs(v, st, a, adj, vis, ans, notPoss); } int main() { prepareIO(); long long int t = 1; cin >> t; for (long long int Case = 1; Case <= t; Case++) { long long int n, d; cin >> n >> d; vector<long long int> a(n), b(n); for (long long int i = 0; i < n; i++) { cin >> a[i]; } long long int st = n - d; for (long long int i = 0; i < d; i++) { b[i] = st; st++; } st = 0; for (long long int i = d; i < n; i++) { b[i] = st; st++; } vector<long long int> adj(n); long long int numOnes = 0; for (long long int i = 0; i < n; i++) { if (a[b
80	#include <bits/stdc++.h> using namespace std; int const N = 1e6 + 5; bitset<N> v, viz; int n, d; int next(int i) { return (i + n - d) % n; } int main() { ios_base::sync_with_stdio(false); cin.tie(0x0); cout.tie(0x0); int t; cin >> t; while (t--) { cin >> n >> d; int ones = 0; for (int i = 0; i < n; ++i) { int x; cin >> x; v[i] = x; if (v[i]) ++ones; viz[i] = 0; } if (!ones) { cout << "0\n"; return 0; } int best = -1; for (int i = 0; i < n; ++i) { if (v[i]) continue; if (!v[next(i)]) continue; int curr = next(i); int cnt = 1; viz[curr] = 1; while (v[next(curr)] &&!viz[next(curr)]) { ++cnt; curr = next(curr); viz[curr] = 1; } ones -= cnt; best = max(best, cnt); } if (ones) cout << "-1\n"; else cout << best << '\n'; } return 0; }
81	#include <bits/stdc++.h> using namespace std; void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void init_code() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); } int n; vector<int> a; int dp[10001][2011]; int make(int i, int val = 0) { ; if (val >= 10) return 1e9; if (val < 0) return 1e9; if (i == n) { return val; } if (dp[i][
82	#include <bits/stdc++.h> using namespace std; const int maxn = 1e4 + 10; int T, n; int a[maxn]; bool flag[maxn], tmp[maxn]; bool check(int x) { for (int i = 0; i < a[1]; i++) flag[i] = 1; for (int i = a[1]; i <= x; i++) flag[i] = 1; for (int i = 2; i <= n; i++) { for (int j = 0; j <= x; j++) tmp[j] = flag[j], flag[j] = 0; for (int j = 0; j <= x; j++) { if (tmp[j] && j + a[i] <= x) flag[j + a[i]] = 1; if (tmp[j] && j - a[i] >= 0) flag[j - a[i]] = 1; } } bool ret = 0; for (int i = 0; i <= x; i++) ret |= flag[i]; return ret; } int main() { scanf("%d", &T); while (T--) { scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); int L = a[1], R = 3e3; while (L < R) { int mid = (L + R) >> 1; if (check(mid)) R = mid; else L = mid + 1; } printf("%d\n", L); } }
83	#include <bits/stdc++.h> using namespace std; const int N = 1e4 + 5; const int INF = 1e9; const long long mod = 1e9 + 7; int n, arr[N], dp[N][2005]; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) { cin >> n; for (int i = 1; i <= n; i++) { cin >> arr[i]; } for (int i = 0; i <= 2000; i++) dp[0][i] = i; for (int i = 1; i <= n; i++) { for (int j = 0; j <= 2000; j++) { dp[i][j] = INF; } for (int j = 0; j <= 2000; j++) { if (j >= arr[i]) { dp[i][j] = min(dp[i][j], dp[i - 1][j - arr[i]]); } else if (arr[i] + j <= 2000) { dp[i][j] = min(dp[i][j], dp[i - 1][j + arr[i]]); } dp[i][j] = max(dp[i][j], j); } } int ans = INF; for (int i = 0; i <= 2000; i++) { ans = min(ans, dp[n][i]); } cout << ans << '\n'; } }
84	#include <bits/stdc++.h> using namespace std; const int N = 2e4 + 100, INF = 1e9 + 7; int kase, n, a[N], s[2100], t[2100]; bool check(int x) { for (int i = 0; i <= x; i++) s[i] = 1; for (int i = 1; i <= n; i++) { memset(t, 0, sizeof t); for (int j = a[i]; j <= x; j++) t[j - a[i]] = s[j]; for (int j = x - a[i]; j >= 0; j--) t[j + a[i]] = s[j]; for (int j = 0; j <= x; j++) s[j] = t[j]; } for (int i = 0; i <= x; i++) if (s[i]) return true; return false; } int main() { scanf("%d", &kase); while (kase--) { scanf("%d", &n); int max_ = 0; for (int i = 1; i <= n; i++) { scanf("%d", &a[i]); max_ = max(max_, a[i]); } int l = max_, r = max_ * 2; while (l < r) { int m = (l + r) / 2; if (check(m)) r = m; else l = m + 1; } printf("%d\n", l); } }
85	#include <bits/stdc++.h> using namespace std; const int N = 2010; const int inf = 0x3f3f3f3f; int dp[10010][N], a[N]; int n, t; int main() { cin >> t; while (t--) { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 0; i <= n; i++) for (int j = 0; j <= 2000; j++) dp[i][j] = inf; dp[0][0] = 1; for (int i = 1; i <= n; i++) for (int k = 0; k <= 2000; k++) { if (dp[i - 1][k] == inf) continue; if (k + a[i] <= 2000) dp[i][k + a[i]] = min(dp[i][k + a[i]], max(dp[i - 1][k], k + a[i])); if (k - a[i] >= 0) dp[i][k - a[i]] = min(dp[i][k - a[i]], dp[i - 1][k]); else dp[i][0] = min(dp[i][0], dp[i - 1][k] + a[i] - k); } int ans = 0x3f3f3f3f; for (int i = 0; i <= 2000; i++) ans = min(ans, dp[n][i]); cout << ans << endl; } }
86	#include <bits/stdc++.h> #pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math") using namespace std; const int INF = 1e9; void solve() { int n; cin >> n; vector<int> a(n); for (int& i : a) cin >> i; const int mx = *max_element(a.begin(), a.end()) << 1; vector<int> dp(mx + 1, INF); dp[0] = 0; for (int i = 0; i < n; ++i) { vector<int> new_dp(mx + 1, INF); for (int j = 0; j <= mx; ++j) { if (dp[j] == INF) continue; new_dp[max(0, j - a[i])] = min(new_dp[max(0, j - a[i])], dp[j] + a[i]); if (j + a[i] <= mx) new_dp[j + a[i]] = min(dp[j + a[i]], max(dp[j] - a[i], 0)); } dp = new_dp; } int ans = INF; for (int i = 0; i <= mx; ++i) ans = min(ans, i + dp[i]); cout << ans << "\n"; } int main() { ios::sync_with_stdio(false), cin.tie(NULL); int t; cin >> t; while (t--) solve(); return 0; }
87	#include <bits/stdc++.h> using namespace std; const int N = 1e4 + 10; const int M = + 10; const int INF = 0x3f3f3f3f; int n; int a[M]; int f[N][M]; void solve() { scanf("%d", &n); for (int i = 1; i <= n; ++i) { scanf("%d", &a[i]); } for (int i = 1; i <= n; ++i) for (int j = 0; j <= 2000; ++j) f[i][j] = INF; f[1][a[1]] = a[1]; for (int i = 2; i <= n; ++i) { for (int l = 0; l <= 2000; ++l) { if (l <= a[i]) f[i][0] = min(f[i][0], f[i - 1][l] + (a[i] - l)); else f[i][l - a[i]] = min(f[i][l - a[i]], f[i - 1][l]); f[i][l + a[i]] = min(f[i][l + a[i]], max(f[i - 1][l], l + a[i])); } } int ans = INF; for (int j = 0; j <= 2000; ++j) ans = min(ans, f[n][j]); printf("%d\n", ans); } int main() { int T; scanf("%d", &T); while (T--) { solve(); } return 0; }
88	#include <bits/stdc++.h> using namespace std; template <class T> void chmax(T& a, const T& b) { a = max(a, b); } template <class T> void chmin(T& a, const T& b) { a = min(a, b); } using ll = long long; using P = pair<int, int>; using VI = vector<int>; using VVI = vector<VI>; using VL = vector<ll>; using VVL = vector<VL>; int dp[6][410][410]; int d[410]; int main() { ios::sync_with_stdio(false); cin.tie(0); int tt; cin >> tt; while (tt--) { int n, m; cin >> n >> m; for (int k = 0; k < int(5); ++k) for (int i = 0; i < int(n + 1); ++i) for (int j = 0; j < int(m + 1); ++j) dp[k][i][j] = 100; int ans = 100; for (int _ = 0; _ < int(n); ++_) { for (int j = 0; j < int(m); ++j) { char c; cin >> c; d[j + 1] = c - '0'; } for (int j = 0; j < int(m); ++j) d[j + 1] += d[j]; for (int k = int(5) - 1; k >= 0; --k) for (int r = 0; r < int(m + 1); ++r) for (int l = int(r - + 1) - 1; l >= 0; --l) { if (k == || k == 4) { int x = r - - (l + 1) - (d[r - 1] - d[l + 1]); if (k == 4) { chmin(ans, x + dp[k][l][r]); dp[k][l][r] += d[r - 1] - d[l + 1] + - (d[l + 1] - d[l]) + - (d[r] - d[r - 1]); } else {
89	#include <bits/stdc++.h> int n, m, ans = 0x3f3f3f3f; char a[402][402]; int pre[402][402]; inline int min(int x, int y) { return x < y? x : y; } int main() { int T; scanf("%d", &T); while (T--) { ans = 0x3f3f3f3f; scanf("%d%d", &n, &m); for (int i = 1; i <= n; i++) scanf("%s", a[i] + 1); for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) a[i][j] -= '0'; for (int j = 1; j <= m; j++) for (int i = 1; i <= n; i++) pre[j][i] = pre[j][i - 1] + a[i][j]; for (int i = 1; i <= n; i++) for (int j = i + - 1; j <= n; j++) { int temp = 0x3f3f3f3f; for (int k = 4; k <= m; k++) temp = min(temp + (1 - a[i][k - 1]) + (1 - a[j][k - 1]) + (pre[k - 1][j - 1] - pre[k - 1][i + - 1]), ((j - 1) - (i + 1) + - (pre[k - 3][j - 1] - pre[k - 3][i + - 1])) + (pre[k - 2][j - 1] - pre[k - 2][i + - 1]) + (pre[k - 1][j - 1] - pre[k - 1][i + - 1]) + (1 - a[i][k - 2]) + (1 - a[i][k - 1]) + (1 - a[j][k - 2]) + (1 - a[j][k - 1])), ans = min(ans, temp + ((j - 1) - (i + 1) + - (pre[j][j - 1] - pre[j][i + - 1]))); }
90	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; const int MAXN = 1e3 + 5; const long long MAXV = LLONG_MAX; template <typename T1, typename T2> inline void chmin(T1& x, T2 y) { if (x > y) x = y; } template <typename T1, typename T2> inline void swapmin(T1& x, T2& y) { if (x > y) swap(x, y); } template <typename T1, typename T2> inline void chmax(T1& x, T2 y) { if (x < y) x = y; } template <typename T1, typename T2> inline void swapmax(T1& x, T2& y) { if (x < y) swap(x, y); } long long qpow(long long a, long long b) { long long ans = 1; a %= MOD; while (b) { if (b & 1) { ans = (ans * a) % MOD; } a = (a * a) % MOD; b >>= 1; } return ans; } long long fac[MAXN], ifac[MAXN]; void init() { fac[0] = 1; for (int i = 1; i < MAXN; i++) { fac[i] = (fac[i - 1] * i) % MOD; } ifac[MAXN - 1] = qpow(fac[MAXN - 1], MOD - 2); for (int i = MAXN - 2; i >= 0; i--) { ifac[i] = (ifac[i + 1] * (i + 1)) % MOD; } } long long C(int n, int k) { if (k > n) return 0; return (((fac[n] * ifac[n - k]) % MOD) * ifac[k]) % MOD; } long long n, m, k; void solve() { cin >> n >> m; vector<string> a(n); for (int i = 0; i < n; i++) { cin >> a[i]; } vector<vector<int> > prefix(n + 1, vector<int>(m + 1
91	#include <bits/stdc++.h> using namespace std; const long long N = + 5, mod = 998244353; char a[N][N]; long long sum[N][N]; long long f[N]; long long s(long long lx, long long ly, long long rx, long long ry) { return sum[rx][ry] - sum[lx - 1][ry] - sum[rx][ly - 1] + sum[lx - 1][ly - 1]; } signed main() { ios::sync_with_stdio(0); cin.tie(0); long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; long long ans = 999999999; for (long long i = 1; i <= n; i++) { for (long long j = 1; j <= m; j++) { cin >> a[i][j]; } } for (long long i = 1; i <= n; i++) { for (long long j = 1; j <= m; j++) { sum[i][j] += sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (a[i][j] == '1'); } } for (long long i = 1; i <= n; i++) { for (long long j = i + 4; j <= n; j++) { for (long long k = 4; k <= m; k++) { f[k] = s(i + 1, 1, j - 1, k - 1) - s(i, 1, i, k - 1) - s(j, 1, j, k - 1) + (k - 1) * + (j - i - - s(i + 1, k, j - 1, k)); } for (long long k = m - 1; k >= 4; k--) { f[k] = min(f[k + 1], f[k]); } for (long long k = 1; k <= m - 3; k++) { long long sh = k - s(i, 1, i, k), xi = k - s(j, 1, j, k); ans = min(ans, f[k + 3] + (
92	#include <bits/stdc++.h> using namespace std; const int INf = 1e9; const int N = 4e2 + 99; const int A = 5; const int B = 4; int pref[N][N], t[N][N]; int n, m; deque<pair<int, int>> q; int ans = INf; void dodaj(int i, int j, int z) { int suma = (pref[j - 1][z - 1] - pref[i][z - 1]); suma += (j - i - - (pref[j - 1][z] - pref[i][z] - pref[j - 1][z - 1] + pref[i][z - 1])); suma += (z - - (pref[j][z - 1] - pref[j - 1][z - 1])); suma += (z - - (pref[i][z - 1] - pref[i - 1][z - 1])); while (!q.empty() && q.back().second >= suma) q.pop_back(); q.push_back({z, suma}); } void usun(int z) { while (!q.empty() && q.front().first < z + B) q.pop_front(); } int licz(int i, int j, int z) { int suma = q.front().second; suma -= (pref[j - 1][z] - pref[i][z]); suma -= (z - (pref[i][z] - pref[i - 1][z])); suma -= (z - (pref[j][z] - pref[j - 1][z])); suma += (j - i - - (pref[j - 1][z] - pref[i][z] - pref[j - 1][z - 1] + pref[i][z - 1])); return suma; } void solve() { cin >> n >> m; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { char c; cin >> c; t[i][j] = (c == '1'); pref[i][j] = pref[i - 1][j] + pref[i][j -
93	#include <bits/stdc++.h> using namespace std; template <typename T1, typename T2> void CMax(T1 &x, T2 y) { if (y > x) x = y; } template <typename T1, typename T2> void CMin(T1 &x, T2 y) { if (y < x) x = y; } template <typename T> void read(T &x) { x = 0; int op = 1; char c = getchar(); while (!isdigit(c)) { if (c == '-') op = -1; c = getchar(); } while (isdigit(c)) { x = (x << 1) + (x << 3) + (c ^ 48); c = getchar(); } x *= op; } inline void swap(int &x, int &y) { x ^= y ^= x ^= y; } inline int max(int x, int y) { return x > y? x : y; } inline int min(int x, int y) { return x < y? x : y; } const int MN = 105; int n, m, k, P; int dp[MN][MN][MN]; inline int Pls(int x, int y) { x += y; return x >= P? x - P : x; } int C[MN][MN], fac[MN]; void process(int n = 100) { fac[0] = 1; for (int i = (1); i <= (n); ++i) fac[i] = 1ll * fac[i - 1] * i % P; for (int i = 0; i <= n; ++i) { C[i][0] = 1; for (int j = (1); j <= (i); ++j) C[i][j] = Pls(C[i - 1][j], C[i - 1][j - 1]); } } int main() { read(n); read(m); read(k); read(P); process(); for (int i = (0); i <= (n); ++i) dp[0][i][0] = 1; for (int i = (1); i <= (n); ++i) dp[i][1][1] = dp[
94	#include <bits/stdc++.h> using namespace std; const int N = 100; long long f[N + 5][N + 5][N + 5]; long long fac[N + 5], C[N + 5][N + 5]; long long mod; long long dfs(int n, int m, int k) { if (n == 0) return k == 0; if (m == 1) return k ==? fac[n] : 0; if (n == 1) return k == 0; if (2 * k > n + 1) return 0; if (m > n) return k ==? fac[n] : 0; if (f[n][m][k]!= -1) return f[n][m][k]; long long ans = 0; for (int i = 0; i < n; i++) for (int j = 0; j <= k; j++) ans = (ans + C[n - 1][i] * dfs(i, m - 1, j) % mod * dfs(n - i - 1, m - 1, k - j) % mod); return f[n][m][k] = ans; } int main() { memset(f, 0xff, sizeof(f)); int n, m, k; scanf("%d%d%d%lld", &n, &m, &k, &mod); for (int i = 0; i <= N; i++) C[i][0] = C[i][i] = 1; for (int i = 1; i <= N; i++) for (int j = 1; j < i; j++) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod; fac[0] = fac[1] = 1; for (int i = 1; i <= N; i++) fac[i] = fac[i - 1] * i % mod; printf("%lld", dfs(n, m, k)); return 0; }
95	#include <bits/stdc++.h> using namespace std; template <typename T1, typename T2> void chkmin(T1 &x, T2 y) { if (x > y) x = y; } template <typename T1, typename T2> void chkmax(T1 &x, T2 y) { if (x < y) x = y; } const int MOD = 1e9 + 7; const int INF = 0x3f3f3f3f; const long long INFll = 0x3f3f3f3f3f3f3f3f3fll; const double EPS = 1e-6; namespace fastio { char rbuf[1 << 23], *p1 = rbuf, *p2 = rbuf, wbuf[1 << 23], *p3 = wbuf; inline char getc() { return p1 == p2 && (p2 = (p1 = rbuf) + fread(rbuf, 1, << 23, stdin), p1 == p2)? -1 : *p1++; } inline void putc(char x) { (*p3++ = x); } template <typename T> void read(T &x) { x = 0; char c = getchar(); T neg = 0; while (!isdigit(c)) neg |= (c == '-'), c = getchar(); while (isdigit(c)) x = (x << 3) + (x << 1) + (c ^ 48), c = getchar(); if (neg) x = -x; } template <typename T> void recursive_print(T x) { if (!x) return; recursive_print(x / 10); putc(x % + '0'); } template <typename T> void print(T x) { if (!x) putc('0'); if (x < 0) putc('-'), x = -x; recursive_print(x); } template <typename T> void print(T x, char c) { print(x); putc(c); } void print_final() { fwrite(wbuf, 1, p3 - wbuf, stdout); } } // namespace fastio template <typename Tv, int limN, int limM> struct link_list { int hd
96	#include <bits/stdc++.h> using namespace std; const int N = 103; int n, P; int f[N][N][N], fc[N], C[N][N]; inline int add(const int &a, const int &b) { return a + b >= P? a + b - P : a + b; } int cl(int i, int j, int k) { if (i == 0) return k == 0; if (j == 0) return k ==? fc[i] : 0; if (i <= j) return k ==? fc[i] : 0; if (j + k > i) return 0; register int &g = f[i][j][k]; if (g!= -1) return g; g = 0; for (register int a = 0; a < i; a++) { register int h = 0; for (register int b = max(0, k + a - i + 1); b <= k && b <= a; b++) h = (h + 1ll * cl(i - a - 1, j - 1, k - b) * cl(a, j - 1, b)) % P; g = (g + 1ll * h * C[i - 1][a]) % P; } return g; } int main() { int m, k; scanf("%d%d%d%d", &n, &m, &k, &P); memset(f, -1, sizeof f); fc[0] = 1; for (register int i = 1; i <= n; i++) fc[i] = 1ll * fc[i - 1] * i % P; for (register int i = 0; i <= n; i++) for (register int j = 0; j <= i; j++) { if (j == 0) C[i][j] = 1; else C[i][j] = add(C[i - 1][j], C[i - 1][j - 1]); } printf("%d", cl(n, m + 1, k)); return 0; }
97	#include <bits/stdc++.h> using namespace std; const int N = + 3; int mod; int bigmod(int a, int b) { int ans = 1; while (b > 0) { if (b & 1) { ans = (ans * 1ll * a) % mod; } a = (a * 1ll * a) % mod; b >>= 1; } return ans; } inline int add(int x, int y) { return (x + y >= mod? x + y - mod : x + y); } inline int sub(int x, int y) { return (x - y <? x - y + mod : x - y); } inline int gun(int x, int y) { return ((x * 1ll * y) % mod); } inline int vag(int x, int y) { return (x * 1ll * bigmod(y, mod - 2)) % mod; } int ncr[N][N]; void NCR() { ncr[0][0] = 1; for (int i = 1; i < N; i++) { for (int j = 0; j < N; j++) { if (j > i) ncr[i][j] = 0; else if (j == i || j == 0) ncr[i][j] = 1; else { ncr[i][j] = add(ncr[i - 1][j], ncr[i - 1][j - 1]); } } } } int dp[N][N][N]; int n, m, k; int32_t main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cin >> n >> m >> k >> mod; if (mod == || m + k > n) { cout << "0\n"; return 0; } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { dp[0][i][j] = 1; } } NCR(); for (int len = 1; len <= n; len++) { for (int maxi = n - len; maxi >= 0; maxi--) { for (int koto = 0; koto <= len; koto++) { int ans = 0; int
98	#include <bits/stdc++.h> using namespace std; const int NMAX = 102; const int LINMAX = NMAX * NMAX * NMAX; int N, M, K, P; int memo[LINMAX + 5]; int fact[NMAX + 2], c[NMAX + 2][NMAX + 2]; int comb(int k, int n) { return c[n][k]; } int index(int a, int b, int c) { return a * * + b * + c; } int ways(int len, int levels_deep, int count) { int ind = index(len, levels_deep, count); if (memo[ind]!= -1) { return memo[ind]; } if (count > len || (len > && count > len / 2)) { return memo[ind] = 0; } if (len == 0) { if (count == 0) { return memo[ind] = 1; } else { return memo[ind] = 0; } } if (levels_deep == 1) { if (count <= || count >= 2) { return memo[ind] = 0; } return memo[ind] = fact[len]; } int res = 0; res = (res + ways(len - 1, levels_deep - 1, count)) % P; for (int pos_me = 2; pos_me < len; pos_me++) { for (int c1 = 0; c1 <= count; c1++) { res = (res + 1LL * comb(pos_me - 1, len - 1) * ways(pos_me - 1, levels_deep - 1, c1) % P * ways(len - pos_me, levels_deep - 1, count - c1)) % P; } } if (len!= 1) { res = (res + ways(len - 1, levels_deep - 1, count)) % P; } return memo[ind] = res; } int main() { cin >> N >> M >> K >> P; fact[0] = 1; for (int i = 1; i <= N; i++) { fact[i] = (1LL * i * fact[i - 1]) % P; } c[0][0] = 1; for (int i = 1; i <= N; i++) { c
99	#include <bits/stdc++.h> using namespace std; template <typename T> inline void Read(T &x) { x = 0; char c; long long dau = 1; while (!isdigit(c = getchar())) if (c == '-') dau = -1; do { x = x * + c - '0'; } while (isdigit(c = getchar())); x *= dau; } long long read() { long long tmp; cin >> tmp; return tmp; } void giuncute() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); } void OF() { if (fopen("f" ".inp", "r")) { freopen( "f" ".inp", "r", stdin); freopen( "f" ".out", "w", stdout); } else if (fopen("f" ".in", "r")) { freopen( "f" ".in", "r", stdin); freopen( "f" ".out", "w", stdout); } } const long long mxn = 107; long long dp[mxn][mxn][mxn], n, m, k, MOD, cnk[mxn][mxn] = {{0}}, p[mxn]; inline long long sol(long long len, long long ma, long long cnt) { if (cnt > len || cnt < 0) return 0; if (ma < || ma > len) return (cnt? : p[len]); long long &cur = dp[len][ma][cnt]; if (!len) return cur =!cnt; if (len == 1) return cur = (ma ==? (cnt == 1) : (cnt == 0)); if (~cur) return cur; cur = 0; for (long long i = 1; i <= (len + 1) / 2; ++i) { for (long long ncnt = 0; ncnt <= min(i - 1, cnt); ++ncnt) (cur += (1 + (i + i <= n)) * cnk[len - 1][i - 1] * ((sol(i - 1, ma - 1, ncnt) * sol(len - i, ma - 1, cnt - ncnt - (ma == 1))) % MOD)) %=
100	#include <bits/stdc++.h> using namespace std; const long long N = 1e2 + 1e1 + 7; long long n, m, k, P; long long f[N][N][N], C[N][N]; void inc(long long &a, long long b) { a += b; a >= P? a -= P : 0; } signed main() { scanf("%lld%lld%lld%lld", &n, &m, &k, &P); C[0][0] = 1; for (long long i = 1; i <= n; i++) { C[i][0] = 1; for (long long j = 1; j <= i; j++) C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P; } for (long long i = 0; i <= n + 1; i++) f[0][0][i] = 1; for (long long d = n - m + 1; d >= 2; d--) for (long long l = 0; l < n; l++) for (long long lj = max(0ll, k + l - n); lj <= min(l, k); lj++) if (f[l][lj][d]) for (long long r = 0; r < n - l; r++) for (long long rj = max(0ll, k + l + r - n - lj); rj <= min(r, k - ((d - 1) == m) - lj); rj++) inc(f[l + r + 1][lj + rj + ((d - 1) == m)][d - 1], C[l + r][l] * f[l][lj][d] % P * f[r][rj][d] % P); printf("%lld\n", f[n][k][1]); }
101	#include <bits/stdc++.h> using namespace std; const int SQRT = 450; int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int n, m; cin >> n >> m; vector<int> x(n), y(n); for (int i = 0; i < n; i++) { cin >> x[i] >> y[i]; } vector<int> op(m), k(m); for (int i = 0; i < m; i++) { cin >> op[i] >> k[i]; k[i]--; } vector<vector<int>> id(n); for (int i = 0; i < m; i++) { id[k[i]].push_back(i); } vector<int> imos(m + 1, 0); vector<vector<int>> imos2(SQRT, vector<int>(m + 1, 0)); for (int i = 0; i < n; i++) { if (id[i].size() % == 1) { id[i].push_back(m); } int cnt = id[i].size(); for (int j = 0; j < cnt; j += 2) { int L = id[i][j]; int R = id[i][j + 1]; if (x[i] + y[i] >= SQRT) { while (true) { if (L + x[i] > R) { break; } else if (L + x[i] + y[i] > R) { imos[L + x[i]]++; imos[R]--; break; } else { imos[L + x[i]]++; imos[L + x[i] + y[i]]--; L += x[i] + y[i]; } } } else if (x[i] <= m) { int c = x[i] + y[i]; if (L + x[i] <= m) { imos2[c][L + x[i]]++; } if (L + x[i] + y[i] <= m) { imos2[c][L + x[i] + y[i]]--;
102	#include <bits/stdc++.h> using namespace std; void err(istream_iterator<string> it) { cout << endl; } template <typename T, typename... Args> void err(istream_iterator<string> it, T a, Args... args) { cerr << *it << " = " << a << " "; err(++it, args...); } template <typename T> inline void read(T& x) { x = 0; T f = 1; char ch = getchar(); while (!isdigit(ch)) f = (ch == '-')? -1 : 1, ch = getchar(); while (isdigit(ch)) x = x * + ch - 48, ch = getchar(); x *= f; } template <typename T, typename... Args> inline void read(T& x, Args&... args) { read(x), read(args...); } template <typename T> inline void write(T x) { if (x < 0) putchar('-'), x = -x; if (x >= 10) write(x / 10); putchar(x % + '0'); } template <typename T, typename... Args> inline void write(T& x, Args&... args) { write(x), putchar('\n'), write(args...); } constexpr int MAXN = 2e5 + 5, MOD = 1e9 + 7; int n, m, x[MAXN], y[MAXN], B, pref, a[MAXN], in[MAXN]; int cnt[256][256]; void block_update(int s, int k, int tag) { int b = x[k] + y[k]; for (int i = max(0, s % b - y[k]); i < s % b; i++) cnt[b][i] += tag; for (int i = s % b + x[k]; i < b; i++) cnt[b][i] += tag; } int block_query(int t) { int res = 0; for (int i = 2; i <= B; i++) res += cnt[i][t % i]; return res; } int main() { ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
103	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 5, B = 400; int ans[B + 1][B + 1], pr[N], n, m, x[N], y[N], xx, yy, ty, idx, sm, add[N]; void update(int i, int xx, int yy, int val, int idd) { if (xx + yy >= B) { for (int j = i; j <= m; j += (xx + yy)) { if (j + xx > m) break; pr[min(m + 1, j + xx)] += val; pr[min(m + 1, j + xx + yy)] -= val; } } else { sm = xx + yy; for (int j = 0; j < sm; j++) { if (((j - i) % sm + sm) % sm >= xx) { ans[sm][j] += val; } } } } int getans(int i) { int pas = pr[i]; for (int j = 1; j <= B; j++) { pas += ans[j][i % j]; } return pas; } int check(int i, int xx, int yy, int i1) { if (xx + yy < B) return 0; int vl = (i - i1) / (xx + yy); int le = i1 + vl * (xx + yy) + xx; int le1 = i1 + (vl + 1) * (xx + yy) + xx; if ((le < i && le + yy >= i) || (le1 < i && le1 + yy >= i)) { pr[i]--; return 1; } else return 0; } int main() { std::ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; i++) { cin >> x[i] >> y[i]; } for (int i = 1; i <= m; i++) { cin >> ty >> idx; pr[i] = pr[i - 1] + pr[i]; if (ty == 1) { add[idx] = i; xx = x[idx]; yy = y[idx
104	#include <bits/stdc++.h> const int N = 200005, B = 505, lim = 500, blc = 500; int n, m, x[N], y[N], is[N], t[N]; int sum[B][B]; int tag[B], val[N]; inline void add(int x, int v) { tag[(((x) + blc - 1) / blc)] += v, val[x] += v; } inline int ask(int x) { int ret = 0; for (int i = 1; i < (((x) + blc - 1) / blc); ++i) ret += tag[i]; for (int i = ((((x) + blc - 1) / blc) - 1) * blc + 1; i <= x; ++i) ret += val[i]; return ret; } inline void solve(int x) { int ans = 0; for (int i = 1; i <= lim; ++i) ans += sum[i][(x - 1) % i + 1]; printf("%d\n", ans + ask(x)); } inline void radd(int u, int v, int t) { is[u] += v; if (x[u] + y[u] > lim) { int cur = t - 1; while (cur + x[u] < n) { add(cur + x[u] + 1, v); if (cur + x[u] + y[u] + <= n) add(cur + x[u] + y[u] + 1, -v); cur += x[u] + y[u]; } } else { for (int i = x[u] + 1; i <= x[u] + y[u]; ++i) sum[x[u] + y[u]][(i + t - 2) % (x[u] + y[u]) + 1] += v; } } int main() { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d%d", x + i, y + i); for (int i = 1, op, k; i <= m; ++i) { scanf("%d%d
105	#include <bits/stdc++.h> using namespace std; inline int read() { int f = 1, r = 0; char ch = getchar(); while (!isdigit(ch)) f ^= ch == '-', ch = getchar(); while (isdigit(ch)) r = (r << 1) + (r << 3) + (ch & 15), ch = getchar(); return f? r : -r; } const int N = 2e5 + 7, M = 450; int n, m, ans, a[N], b[N], s[N], lst[N], sum[M + 7][M + 7]; inline void work(int t) { int opt = read(), x = read(), r = a[x] + b[x]; if (opt == 1) { lst[x] = t; if (r <= M) for (int i = t + a[x]; i < t + r; i++) sum[r][i % r]++; else for (int i = t + a[x]; i <= m; i += r) { s[i]++; if (i + b[x] <= m) s[i + b[x]]--; } } else { int T = lst[x]; if (r <= M) for (int i = T + a[x]; i < T + r; i++) sum[r][i % r]--; else for (int i = T + a[x]; i <= m; i += r) { s[i]--; if (i + b[x] <= m) s[i + b[x]]++; if (i <= t && t < i + b[x]) ans--; } } ans += s[t]; int res = ans; for (int i = 1; i <= M; i++) res += sum[i][t % i]; printf("%d\n", res); } int main() { n = read(), m = read(); for (int i = 1; i <= n; i++) a[i] = read(), b[i] = read(); for (int t = 1; t <= m; t++) work(t); return 0; }
106	#include <bits/stdc++.h> using namespace std; inline int read() { int f = 1, r = 0; char ch = getchar(); while (!isdigit(ch)) f ^= ch == '-', ch = getchar(); while (isdigit(ch)) r = (r << 1) + (r << 3) + (ch & 15), ch = getchar(); return f? r : -r; } const int N = 2e5 + 7, M = 450; int n, m, ans, a[N], b[N], s[N], lst[N], sum[M + 7][M + 7]; inline void work(int t) { int opt = read(), x = read(), r = a[x] + b[x]; if (opt == 1) { lst[x] = t; if (r <= M) for (int i = t + a[x]; i < t + r; i++) sum[r][i % r]++; else for (int i = t + a[x]; i <= m; i += r) { s[i]++; if (i + b[x] <= m) s[i + b[x]]--; } } else { int T = lst[x]; if (r <= M) for (int i = T + a[x]; i < T + r; i++) sum[r][i % r]--; else for (int i = T + a[x]; i <= m; i += r) { s[i]--; if (i + b[x] <= m) s[i + b[x]]++; if (i < t && t < i + b[x]) ans--; } } ans += s[t]; int res = ans; for (int i = 1; i <= M; i++) res += sum[i][t % i]; printf("%d\n", res); } int main() { n = read(), m = read(); for (int i = 1; i <= n; i++) a[i] = read(), b[i] = read(); for (int t = 1; t <= m; t++) work(t); return 0; }
107	#include <bits/stdc++.h> using namespace std; inline int read() { int x = 0; bool op = false; char c = getchar(); while (!isdigit(c)) op |= (c == '-'), c = getchar(); while (isdigit(c)) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar(); return op? -x : x; } const int N = 2e5 + 10; int n, m, B; int dif[N], d[500][500], lst[N]; struct Node { int x, y; Node() {} Node(int x, int y) : x(x), y(y) {} } a[N]; void update(int t, int x, int v) { int p = a[x].x + a[x].y; int l = (t + a[x].x) % p, r = (t - 1) % p; if (l <= r) for (int i = l; i <= r; i++) d[p][i] += v; else { for (int i = 0; i <= l; i++) d[p][i] += v; for (int i = r; i < p; i++) d[p][i] += v; } } int main() { n = read(); m = read(); B = sqrt(m); for (int i = 1; i <= n; i++) { int x = read(), y = read(); a[i] = Node(x, y); } int ans = 0; for (int t = 1; t <= m; t++) { int op = read(), x = read(); if (op == 1) { if (a[x].x + a[x].y > B) { for (int i = t + a[x].x; i <= m; i += a[x].x + a[x].y) { dif[i]++; if (i + a[x].y <= m) dif[i + a[x].y]--; } } else update(t, x, 1); lst[x] = t; } else { if (a[x].x + a[x].y > B) { for (int i = lst[x] + a[x].x
108	#include <bits/stdc++.h> using namespace std; const int N = 4010; int n, m, a[N], rt, tot, L[N], siz[N], R[N], ls[N], rs[N]; long long val[N], dp[N][N]; inline void build(int &p, int l, int r) { if (l > r) return; p = ++tot; int pos = l; for (int i = l; i <= r; ++i) if (a[i] < a[pos]) pos = i; val[p] = a[pos]; build(ls[p], l, pos - 1); build(rs[p], pos + 1, r); dp[p][0] = 0; dp[p][1] = m * val[p] - val[p]; siz[p] = 1; for (int i = siz[p]; i >= 0; --i) for (int j = 0; j <= siz[ls[p]]; ++j) dp[p][i + j] = max(dp[p][i + j], dp[p][i] + dp[ls[p]][j] - 2ll * i * j * val[p]); siz[p] += siz[ls[p]]; for (int i = siz[p]; i >= 0; --i) for (int j = 0; j <= siz[rs[p]]; ++j) dp[p][i + j] = max(dp[p][i + j], dp[p][i] + dp[rs[p]][j] - 2ll * i * j * val[p]); siz[p] += siz[rs[p]]; } int main() { memset(dp, -0x3f, sizeof(dp)); scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); build(rt, 1, n); printf("%I64d\n", dp[1][m]); return 0; }
109	#include <bits/stdc++.h> #pragma GCC optimize(2, 3, "Ofast") using namespace std; template <typename T1, typename T2> void ckmin(T1 &a, T2 b) { if (a > b) a = b; } template <typename T1, typename T2> void ckmax(T1 &a, T2 b) { if (a < b) a = b; } int read() { int x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } template <typename T> void print(T x) { if (x < 0) putchar('-'), x = -x; if (x >= 10) print(x / 10); putchar(x % + '0'); } template <typename T> void print(T x, char let) { print(x), putchar(let); } const int N = 4005; long long dp[N][N]; int sz[N], a[N], n, m, tot; void solve(int &u, int l, int r) { if (l > r) { u = 0; return; } u = ++tot, sz[u] = r - l + 1; dp[u][0] = 0; dp[u][1] = 1ll * (m - 1) * a[l]; int pos = l, ls = 0, rs = 0; for (int i = l; i <= r; i++) if (a[i] < a[pos]) pos = i; solve(ls, l, pos - 1), solve(rs, pos + 1, r); if (ls && rs) { for (int i = 1; i <= sz[ls]; i++) { for (int j = 1; j <= sz[rs]; j++) { ckmax(dp[u][i + j], dp[ls][i] + dp[rs][j] - 2ll * a[pos] * i * j); ckmax(dp[u][i + j + 1], dp[ls][i] + dp[rs
110	#include <bits/stdc++.h> using namespace std; const int N = 4002; long long g[N][N]; int st[N], c[N][2], f[N], siz[N], a[N]; int n, m, i, tp, rt; void dfs(int x) { int lc = c[x][0], rc = c[x][1]; siz[x] = 1; if (!lc &&!rc) { g[x][0] = 1; g[x][1] = (long long)a[x] * (m - 1); return; } if (!lc && rc) swap(lc, rc); if (!rc) { dfs(lc); siz[x] += siz[lc]; memcpy(g[x], g[lc], (siz[lc] + 1) * sizeof g[0][0]); for (int i = 0; i <= siz[lc]; i++) g[x][i + 1] = max(g[x][i + 1], g[lc][i] + (long long)(m - 1) * a[x] - 2ll * i * a[x]); return; } dfs(lc); dfs(rc); siz[x] += siz[lc] + siz[rc]; for (int i = 0; i <= siz[lc]; i++) for (int j = 0; j <= siz[rc]; j++) g[x][i + j] = max(g[x][i + j], g[lc][i] + g[rc][j] - 2ll * i * j * a[x]); for (int i = 0; i <= siz[lc]; i++) for (int j = 0; j <= siz[rc]; j++) g[x][i + j + 1] = max(g[x][i + j + 1], g[lc][i] + g[rc][j] + (long long)(m - 1) * a[x] - 2ll * (i * j + i + j) * a[x]); } int main() { memset(g, -0x3f, sizeof g); ios::sync_with_stdio(false); cin.tie(0); cin >> n >>
111	#include <bits/stdc++.h> using namespace std; const int INF = 0x3f3f3f3f; const int MAXN = 4e3 + 1; long long dp[MAXN][MAXN]; int g[MAXN][2]; int siz[MAXN]; int a[MAXN], n; int root; int m; int solve(int l, int r) { if (l > r) return 0; int mn = l; for (int i = l; i <= r; ++i) if (a[i] < a[mn]) mn = i; g[mn][0] = solve(l, mn - 1); g[mn][1] = solve(mn + 1, r); return mn; } void dfs(int now) { if (g[now][0] == && g[now][1] == 0) { siz[now] = 1; dp[now][1] = 1ll * (m - 1) * a[now]; dp[now][0] = 0; return; } if (g[now][0] == 0) { dfs(g[now][1]); for (int j = 0; j <= n; ++j) dp[now][j] = dp[g[now][1]][j]; siz[now] = siz[g[now][1]] + 1; } else if (g[now][1] == 0) { dfs(g[now][0]); for (int j = 0; j <= n; ++j) dp[now][j] = dp[g[now][0]][j]; siz[now] = siz[g[now][0]] + 1; } else { dfs(g[now][0]); dfs(g[now][1]); siz[now] = siz[g[now][0]] + siz[g[now][1]]; for (int j = 0; j <= siz[g[now][0]]; ++j) for (int k = 0; k <= siz[g[now][1]]; ++k) { dp[now][j + k] = max(dp[now][j + k], dp[g[now][0]][j] + dp[g[now][1]][k] - 2
112	#include <bits/stdc++.h> using namespace std; const int N = 4e3 + 11; int n, m; long long a[N]; vector<pair<int, long long> > e[N]; void build(int l, int r, int fa) { if (l > r) return; int pos = l; for (int i = l + 1; i <= r; i++) if (a[i] < a[pos]) pos = i; e[fa].push_back(make_pair(pos, a[pos] - a[fa])); build(l, pos - 1, pos); build(pos + 1, r, pos); } int siz[N]; long long f[N][N], g[N]; void dfs(int w, int fa) { siz[w] = 1; for (pair<int, int> v : e[w]) { if (v.first == fa) continue; dfs(v.first, w); for (int i = 0; i <= siz[w] + siz[v.first]; i++) g[i] = 0; for (int i = 0; i <= siz[w]; i++) for (int j = 0; j <= siz[v.first]; j++) { g[i + j] = max(g[i + j], f[w][i] + f[v.first][j] + j * (m - j) * v.second); } siz[w] += siz[v.first]; for (int i = 0; i <= siz[w]; i++) f[w][i] = max(f[w][i], g[i]); } } int main() { ios::sync_with_stdio(false); cin >> n >> m; for (int i = 1; i <= n; i++) cin >> a[i]; build(1, n, 0); dfs(e[0][0].first, 0); cout << f[e[0][0].first][m] << endl; return 0; }
113	#include <bits/stdc++.h> using namespace std; long long n, M; long long a[4000]; void calc(long long l, long long r, vector<long long> &res) { if (r < l) { res.push_back(0); return; } long long m = l; for (long long i = l + 1; i < r; ++i) if (a[i] < a[m]) m = i; vector<long long> res1, res2; calc(l, m - 1, res1); calc(m + 1, r, res2); res.resize(r - l + 2, -1e18); for (long long i = 0; i < (long long)res1.size(); ++i) for (long long j = 0; j < (long long)res2.size(); ++j) { res[i + j] = max(res[i + j], res1[i] + res2[j] - * i * j * a[m]); res[i + j + 1] = max(res[i + j + 1], res1[i] + res2[j] - * i * j * a[m] + (M - 1) * a[m] - * (i + j) * a[m]); } } int32_t main() { cin >> n >> M; for (long long i = 0; i < n; ++i) cin >> a[i]; vector<long long> res; calc(0, n - 1, res); cout << res[M]; }
114	#include <bits/stdc++.h> using namespace std; const int N = 4005; int pos[N][N], ls[N], rs[N], siz[N]; int build(int l, int r) { if (l == r) return l; int x = pos[l][r]; if (x - >= l) ls[x] = build(l, x - 1); if (x + <= r) rs[x] = build(x + 1, r); return x; } int n, m; long long a[N], dp[N][N]; void dfs(int x) { siz[x] = 1; if (ls[x]) dfs(ls[x]), siz[x] += siz[ls[x]]; if (rs[x]) dfs(rs[x]), siz[x] += siz[rs[x]]; if ((!ls[x]) && (!rs[x])) return; if (!ls[x]) { for (int i = 0; i <= siz[rs[x]]; i++) { dp[x][i] = max(dp[x][i], dp[rs[x]][i] + (a[rs[x]] - a[x]) * i * (m - i)); dp[x][i + 1] = max(dp[x][i + 1], dp[rs[x]][i] + (a[rs[x]] - a[x]) * i * (m - i)); } return; } if (!rs[x]) { for (int i = 0; i <= siz[ls[x]]; i++) { dp[x][i] = max(dp[x][i], dp[ls[x]][i] + (a[ls[x]] - a[x]) * i * (m - i)); dp[x][i + 1] = max(dp[x][i + 1], dp[ls[x]][i] + (a[ls[x]] - a[x]) * i * (m - i)); } return; } for (int i = 0; i <= siz[ls[x]]; i++) for (int j = 0; j <= siz[rs[x]]; j++) { long long add = (a
115	#include <bits/stdc++.h> using namespace std; inline long long read() { long long x = 0, f = 1; char c = getchar(); while (!isdigit(c)) { if (c == '-') f = -1; c = getchar(); } while (isdigit(c)) { x = (x << 3) + (x << 1) + (c ^ 48); c = getchar(); } return f == -1? ~x + : x; } long long n, m; long long a[4010]; long long ls[4010], rs[4010]; long long stk[4010], top; void build() { for (long long i = 1; i <= n; ++i) { while (top && a[stk[top]] > a[i]) { rs[stk[top]] = ls[i], ls[i] = stk[top]; --top; } if (top) rs[stk[top]] = i; stk[++top] = i; } } long long sz[4010], dp[4010][4010], tmp[4010]; void dfs(long long x) { sz[x] = 1; dp[x][1] = (m - 1) * a[x]; if (ls[x]) { dfs(ls[x]); for (long long i = 0; i <= sz[x] + sz[ls[x]]; ++i) tmp[i] = 0; for (long long i = 0; i <= sz[x]; ++i) { for (long long j = 0; j <= sz[ls[x]]; ++j) { tmp[i + j] = max(tmp[i + j], dp[x][i] + dp[ls[x]][j] - * i * j * a[x]); } } sz[x] += sz[ls[x]]; for (long long i = 0; i <= sz[x]; ++i) dp[x][i] = tmp[i]; } if (rs[x]) { dfs(rs[x]); for (long long i = 0; i <= sz[x] + sz[rs[x]]; ++i) tmp[i] = 0; for (long long i = 0; i <= sz[x];
116	#include <bits/stdc++.h> using namespace std; const int N = 4002; long long g[N][N]; int st[N], c[N][2], f[N], siz[N], a[N]; int n, m, i, tp, rt; void dfs(int x) { int lc = c[x][0], rc = c[x][1]; siz[x] = 1; if (!lc &&!rc) { g[x][0] = 1; g[x][1] = (long long)a[x] * (m - 1); return; } if (!lc && rc) swap(lc, rc); if (!rc) { dfs(lc); siz[x] += siz[lc]; memcpy(g[x], g[lc], (siz[lc] + 1) * sizeof g[0][0]); for (int i = 0; i <= siz[lc]; i++) g[x][i + 1] = max(g[x][i + 1], g[lc][i] + (long long)(m - 1) * a[x] - 2ll * i * a[x]); return; } dfs(lc); dfs(rc); siz[x] += siz[lc] + siz[rc]; for (int i = 0; i <= siz[lc]; i++) for (int j = 0; j <= siz[rc]; j++) g[x][i + j] = max(g[x][i + j], g[lc][i] + g[rc][j] - 2ll * i * j * a[x]); for (int i = 0; i <= siz[lc]; i++) for (int j = 0; j <= siz[rc]; j++) g[x][i + j + 1] = max(g[x][i + j + 1], g[lc][i] + g[rc][j] + (long long)(m - 1) * a[x] - 2ll * (i * j + i + j) * a[x]); } int main() { memset(g, -0x3f, sizeof g); ios::sync_with_stdio(false); cin.tie(0); cin >> n >>
117	#include <bits/stdc++.h> using namespace std; int main() { long long modu = 1000000007; unsigned long long arr[100000]; arr[0] = 1; arr[1] = 1; for (long long i = 2; i < 100000; i++) { long long j = * (i - 1); arr[i] = ((arr[i - 1] % modu) * ((j + 1) * (j + 2) % modu)) % modu; } int t; cin >> t; while (t--) { int n; cin >> n; cout << arr[n] << endl; } return 0; }
118	#include <bits/stdc++.h> using namespace std; const long long N = 2e6 + 6; const long long P = 1e9 + 7; long long read() { long long an = 0, ff = 1; char c = getchar(); for (; c < '0' || c > '9'; c = getchar()) if (c == '-') ff = -1; for (; c >= '0' && c <= '9'; c = getchar()) an = (an << 3) + (an << 1) + c - '0'; return an * ff; } long long Add(long long a, long long b) { return a + b >= P? a + b - P : a + b; } long long Sub(long long a, long long b) { return a - b <? a - b + P : a - b; } long long Mul(long long a, long long b) { long long res = 1ll * a * b; return res >= P? res % P : res; } long long Pow(long long a, long long b) { long long res = 1; while (b) { if (b & 1) res = Mul(res, a); a = Mul(a, a); b >>= 1; } return res; } long long Inv(long long a) { return Pow(a, P - 2); } long long f[N]; signed main() { f[1] = f[0] = 1; for (long long i = 1; i <= 2e5; i++) f[i] = f[i - 1] * i % P; long long T = read(); while (T--) { long long x = read(); x *= 2; if (f[x - 1] * x < P) cout << f[x] / << endl; else cout << f[x] * Inv(2) << endl; } return 0; }
119	#include <bits/stdc++.h> using namespace std; const int maxn = 3000; const int N = 1e6 + 7, M = N * 2; const int inf = 0x3f3f3f3f; const long long INF = 0xFFFFFFFFFF; const long long mod = 1e9 + 7; inline long long read(); void solve() { long long a; cin >> a; if (a == 1) { cout << << '\n'; return; } if (a == 2) { cout << << '\n'; return; long long ans = 1; for (int i = a * 2; i >= 3; i--) { ans = ans * i % mod; } ans %= mod; cout << ans << '\n'; } int main() { int T = 1; T = read(); for (int cas = 1; cas <= T; cas++) { solve(); } return 0; } inline long long read() { char ch_read = getchar(); long long p_read = 1, data_read = 0; while (ch_read < '0' || ch_read > '9') { if (ch_read == '-') p_read = -1; ch_read = getchar(); } while (ch_read >= '0' && ch_read <= '9') { data_read = data_read * + (ch_read ^ 48); ch_read = getchar(); } return p_read * data_read; }
120	#include <bits/stdc++.h> using namespace std; int main() { long t; cin >> t; for (long x = 0; x < t; x++) { int n; cin >> n; int hold = * n; long long ans = 1; if (hold == 2) cout << "2" << endl; else { for (int y = 3; y <= hold; y++) { ans *= y; ans %= 1000000007; } cout << ans << endl; } } return 0; }
121	#include <bits/stdc++.h> using namespace std; long long ceildef(long long a, long long b) { return (long long)ceil(double(a) / (double)b); } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); ; int t; cin >> t; while (t--) { long long n, m, i, j, a, b, ans = 1; cin >> n; if (n == 1) cout << "1\n"; else { for (i = 3; i <= * n; i++) { ans = (ans * i) % 1000000007; } cout << ans << "\n"; cout << ans << "\n"; } return 0; }
122	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m, k; cin >> n >> m >> k; if (k < 2) cout << "NO\n"; else if (n == && m == 0) cout << "YES\n"; else if (m < n - || m > (n * (n - 1)) / 2) cout << "NO\n"; else { int d; if (m == (n * (n - 1)) / 2) d = 1; else d = 2; if (d < k - 1) cout << "YES\n"; else cout << "NO\n"; } } return 0; }
123	#include <bits/stdc++.h> using namespace std; long long A[200005]; long long mod = 1e9 + 7; long long inv2 = 5e8 + 4; void init() { A[0] = 1; for (long long i = 1; i <= 200000; i++) { A[i] = (A[i - 1] * i) % mod; } } signed main() { long long t; scanf("%lld", &t); long long n, m, k; while (t--) { scanf("%lld%lld%lld", &n, &m, &k); if (m > n * (n - 1) / 2) { cout << "No\n"; continue; } if (k == 0) { cout << "No\n"; continue; } if (n == 1) { cout << "Yes\n"; continue; } if (m < n - || k <= 2) { cout << "No\n"; continue; } if (k > 3) { cout << "Yes\n"; continue; } if (m == n * (n - 1) / 2) { cout << "Yes\n"; } else cout << "No\n"; } return 0; }
124	#include <bits/stdc++.h> const int mod = 1e9 + 7; using namespace std; const int N = 2e5 + 9; int main() { int T; cin >> T; while (T--) { long long n, m, k; cin >> n >> m >> k; if (n == && m == && k >= 2) puts("YES"); else if (m < n - 1) puts("NO"); else if (n * (n - 1) / < m) puts("NO"); else if (m >= n - && n * (n - 1) / > m) { if (k - > 2) puts("NO"); else puts("NO"); } else if (m >= n - && n * (n - 1) / == m) { if (k - > 1) puts("YES"); else puts("NO"); } } }
125	#include <bits/stdc++.h> using namespace std; long long a[100005]; signed main() { for (long long i = 1; i <= 100002; i++) { a[i] = a[i - 1] + i; } long long t; scanf("%lld", &t); long long n, m, k; while (t--) { scanf("%lld %lld %lld", &n, &m, &k); if (n == 1) { if (k >= && m <= a[n - 1]) printf("YES\n"); else printf("NO\n"); } else if (k <= 2) { printf("NO\n"); } else if (k == 3) { if (n > || m < a[n - 1] || m > a[n - 1]) printf("NO\n"); else printf("YES\n"); } else { if (m >= (n - 1) && (n > || m < a[n - 1])) printf("YES\n"); else printf("NO\n"); } } return 0; }
126	#include <bits/stdc++.h> using namespace std; const long long maxn = 1e6 + 10; const long long INF = 0x3f3f3f3f; const long long mod = 998244353; const double esp = 1e-7; signed main() { long long t; cin >> t; while (t--) { long long n, m, k; cin >> n >> m >> k; if ((n!= && m == 0) || (n!= && k == 2) || m < n - || k == || m > n * (n - 1) / 2) { cout << "NO" << '\n'; continue; } if (k == 3) { if (m == n * (n - 1) / 2) { cout << "YES" << '\n'; } else { cout << "NO" << '\n'; } } else { cout << "YES" << '\n'; } } }
127	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; cin >> t; while (t--) { long long n, m, k; cin >> n >> m >> k; k--; int d = 0; bool flag = false; int num = n * (n - 1) / 2; if (n > 1) { if (m == num) { d = 1; } else { d = 2; } } if (m >= n - && m <= num) { if (d < k) { flag = true; } } if (flag) { cout << "YES" << "\n"; } else { cout << "NO" << "\n"; } } return 0; }
128	#include <bits/stdc++.h> using namespace std; long long n, m, k; int main() { int testcases; cin >> testcases; while (testcases-- > 0) { cin >> n >> m >> k; if (n == && m == && k >= 2) cout << "YES" << endl; else if (k >= && m == n * (n - 1) / 2) cout << "YES" << endl; else if (k >= && m > n - && m < n * (n - 1) / 2) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
129	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int T; T = 1; cin >> T; while (T--) { int i, j, k, m, n, l, res = 0, ans = 0; cin >> n >> m >> k; k -= 2; if (m < n - 1) { cout << "NO" << '\n'; } else if (m > n * (n - 1) / 2) { cout << "NO" << '\n'; } else if (k == 0) { if (n == 1) { cout << "YES" << '\n'; } else { cout << "NO" << '\n'; } } else if (k < 0) { cout << "NO" << '\n'; } else if (k == 1) { if (m == n * (n - 1) / 2) { cout << "YES" << '\n'; } else { cout << "NO" << '\n'; } } else { cout << "YES" << '\n'; } } }
130	#include <bits/stdc++.h> using namespace std; int main() { long long n, m, i, j, k, t; long long p; scanf("%lld", &t); while (t--) { scanf("%lld%lld%lld", &n, &m, &k); if (m > (n - 1) * n / 2) printf("no\n"); else if (m < n - 1) printf("no\n"); else if (k > 3) printf("yes\n"); else if (k == 2) { if (n == 1) printf("yes\n"); else printf("no\n"); } else if (k == 3) { if (m >= n * (n - 1) / 2) printf("yes\n"); else printf("no\n"); } else if (k == 1) printf("no\n"); } }
131	#include <bits/stdc++.h> using namespace std; void solve() { int m, n, o, x, y, z, p, q, c = 0, l; scanf("%d %d %d", &m, &n, &o); if ((m + o) % == 0) { printf("1\n"); } else { printf("0\n"); } } int main() { int t; scanf("%d", &t); for (int i = 1; i <= t; i++) { solve(); } return 0; }
132	#include <bits/stdc++.h> using namespace std; int func(int a, int b, int c) { int diff; a = a % 2; b = b % 2; c = c % 2; if (a == && b == && c == 0) diff = 0; if (a == && b == && c == 1) diff = 0; if (a == && b == && c == 0) diff = 1; if (a == && b == && c == 1) diff = 1; if (a == && b == && c == 0) diff = 1; if (a == && b == && c == 1) diff = 1; if (a == && b == && c == 0) diff = 1; if (a == && b == && c == 1) diff = 0; if (a == && b == && c == 0) diff = 1; if (a == && b == && c == 1) diff = 0; return diff; } int main() { int t; cin >> t; while (t--) { int a, b, c; cin >> a >> b >> c; int diff = func(a, b, c); cout << diff << "\n"; } }
133	#include <bits/stdc++.h> using namespace std; const int M = 1e9 + 7; long long fastpower(long long x, long long n, long long M) { if (n == 0) return 1; else if (n % == 0) return fastpower((x * x) % M, n / 2, M); else return (x * fastpower((x * x) % M, (n - 1) / 2, M)) % M; } long long GCD(long long A, long long B) { if (B == 0) return A; else return GCD(B, A % B); } bool vowl(char c) { return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'; } long long modInverse(long long A, long long M) { return fastpower(A, M - 2, M); } void sieve(long long N) { bool isPrime[N + 1]; for (long long i = 0; i <= N; ++i) { isPrime[i] = true; } isPrime[0] = false; isPrime[1] = false; for (long long i = 2; i * i <= N; ++i) { if (isPrime[i] == true) { for (long long j = i * i; j <= N; j += i) isPrime[j] = false; } } } vector<long long> factorize(long long n) { vector<long long> res; for (long long i = 2; i * i <= n; ++i) { while (n % i == 0) { res.push_back(i); n /= i; } } if (n!= 1) { res.push_back(n); } return res; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; long long arr[n]; for (long long i = 0; i < n; i++) cin >> arr[i]; long long one = 0, zero = 0; for (long long i = 0; i < n; i
134	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; const int MAX = * 1e5; void solve() { long long n; cin >> n; string s; cin >> s; string alpha = "abcdefghijklmnopqrstuvwxyz"; int ans = INT_MAX; for (long long i = 0; i < 26; i++) { int l = 0; int r = n - 1; int cnt = 0; bool flag = true; while (l <= r) { if (s[l] == s[r]) { l = l + 1; r = r - 1; } else { if (s[l] == s[i]) { l = l + 1; cnt++; } else if (s[r] == s[i]) { r = r - 1; cnt++; } else { flag = false; break; } } } if (flag) { ans = min(ans, cnt); } } if (ans == INT_MAX) cout << -1 << endl; else cout << ans << endl; } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t = 1; cin >> t; while (t--) { solve(); } return 0; }
135	#include <bits/stdc++.h> using namespace std; void solve() { long long n, ans = 1e9 + 7; string s; cin >> n >> s; bool flag = 1, f = 0; for (long long i = 0; i < n / 2; ++i) { if (s[i]!= s[n - i - 1]) { flag = 0; break; } } if (flag) { cout << "0\n"; return; } for (long long i = 0; i < 26; ++i) { string tmp = ""; vector<long long> v, p; map<long long, long long> mp; flag = 0; for (long long j = 0; j < n; ++j) { if (s[j] == i + 'a') p.push_back(j); else tmp += s[j], v.push_back(j); } long long k = v.size(), cnt = p.size(); for (long long j = 0; j < k / 2; ++j) { if (tmp[j]!= tmp[k - j - 1]) { flag = 1; break; } } if (flag) continue; for (long long x : p) { long long a = lower_bound(v.begin(), v.end(), x) - v.begin(); if (k % && a == k / 2) { --cnt; continue; } if (a > k / 2) { a = k - a; if (mp[a]) { --mp[a]; cnt -= 2; } } else { ++mp[a]; } } ans = min(ans, cnt); f = 1; } if (f) cout << ans << '\n'; else cout << "-1\n"; } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t = 1; cin >> t; while (t--) solve(); }
136	#include <bits/stdc++.h> using namespace std; int n; string s; int solve(char c) { int l = 0, r = n - 1; int ret = 0; while (l < r) { if (s[l]!= s[r]) { if (s[l] == c) { l++; ret++; continue; } else if (s[r] == c) { r--; ret++; } else return -1; } l++; r--; } return ret; } int main(void) { ios::sync_with_stdio(false); int t; cin >> t; while (t--) { cin >> n >> s; int ans = n + 9; int temp; for (char c = 'a'; c <= 'z'; c++) { temp = solve(c); if (temp >= 0) ans = min(ans, temp); } if (ans > n) cout << -1 << endl; else cout << ans << endl; } return 0; }
137	#include <bits/stdc++.h> using namespace std; char A[100005]; int main() { int T; scanf("%d", &T); while (T--) { int n, ans = 1e9; scanf("%d", &n); scanf("%s", A + 1); for (int i = 0; i <= 26; i++) { int l = 1, r = n, key = 0; bool f = 1; while (l < r) { int a1, a2; a1 = a2 = 0; while (A[l] == i + 'a' - && l <= r) l++, a1++; while (A[r] == i + 'a' - && l <= r) r--, a2++; if (l >= r) break; key += abs(a1 - a2); if (A[l]!= A[r]) { f = 0; break; } l++, r--; } if (f) { ans = min(ans, key); } } if (ans == 1e9) puts("-1"); else printf("%d\n", ans); } return 0; }
138	#include <bits/stdc++.h> using namespace std; int main() { char l; int s, e, t, n, ans, mn = 0, flag = 0; ; string str; cin >> t; for (int q = 0; q < t; q++) { cin >> n; cin >> str; mn = 100000; for (int i = 0; i < 26; i++) { ans = 0; l = 'a' + i; s = 0; e = n - 1; flag = 0; while (e - s > 1) { if (str[s] == str[e]) { s++; e--; } else if (str[s] == l) { s++; ans++; } else if (str[e] == l) { e--; ans++; } else { flag = 1; break; } } if (flag == 0) { if (ans < mn) { mn = ans; } } } if (mn!= 100000) { cout << mn << "\n"; } else { cout << "-1\n"; } } }
139	#include <bits/stdc++.h> using namespace std; inline int read() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; } const int N = 1e5 + 10; const int inf = 1e9; int T; int n; char s[N]; int ans; int main() { T = read(); while (T--) { n = read(); int L = 1, R = n; scanf("%s", s + 1); while (s[L] == s[R]) { L++; R--; } if (L >= R) { printf("0\n"); continue; } ans = inf; char p = s[L]; int l = L + 1, r = R, tmp = 1; while (l < r) { if (s[l] == s[r]) { l++; r--; } else { if (s[l] == p) { l++; tmp++; } else if (s[r] == p) { r++; tmp++; } else { tmp = inf; break; } } } ans = min(ans, tmp); p = s[R]; l = L, r = R - 1, tmp = 1; while (l < r) { if (s[l] == s[r]) { l++; r--; } else { if (s[l] == p) { l++; tmp++; } else if (s[r] == p) { r++; tmp++; } else { tmp = inf; break; } } } ans = min(ans, tmp); printf("%d\n", ans == inf? -1 : ans); } return 0; }
140	#include <bits/stdc++.h> using namespace std; const long long M = 1e9 + 7; signed long long power_binaryexp(long long a, long long b) { long long ans = 1; while (b > 0) { if (b & 1) { ans = (ans * a); } a = (a * a); b = b >> 1; } return ans; } signed long long binarymul(long long a, long long b) { long long ans = 0; while (b) { if (b & 1) { ans = ans + a; } a += a; b >>= 1; } return ans; } bool is_prime(long long n) { if (n <= 1) return false; if (n <= 3) return true; if (n % == || n % == 0) return false; for (long long i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return false; return true; } bool compare(pair<long long, long long> p1, pair<long long, long long> p2) { return p1.second > p2.second; } bool checkp(string s) { long long n = s.length(); for (long long i = 0; i < n / 2; i++) { if (s[i]!= s[n - i - 1]) return false; } return true; } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long ttt; cin >> ttt; while (ttt--) { long long n; cin >> n; vector<long long> v(n); long long sum = 0; long long s = 0; for (long long i = 0; i < n; i++) { cin >> v[i]; } vector<long long> v1(n); if (n & 1) { if (v[1] < 0) v1[1] = -abs(v[0]); else v1[1] = abs(v[0]); if (v[2] < 0) v1[2] = -abs(v[0]); else v1[2] = abs(v[0
141	#include <bits/stdc++.h> using namespace std; int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long t; cin >> t; while (t--) { long long n; cin >> n; long long arr[n]; for (long long i = 0; i < n; i++) { cin >> arr[i]; } long long b[n]; if (n % == 0) { for (long long i = 0; i < n - 1; i = i + 2) { b[i] = arr[i + 1]; b[i + 1] = -1 * arr[i]; } for (long long i = 0; i < n; i++) { cout << b[i] << " "; } cout << "\n"; } else { for (long long i = 3; i < n - 1; i = i + 2) { b[i] = arr[i + 1]; b[i + 1] = -1 * arr[i]; } if (arr[0] + arr[1]!= 0) { cout << -arr[2] << " " << -arr[2] << " " << arr[0] + arr[1] << " "; } else if (arr[1] + arr[2]!= 0) { cout << arr[1] + arr[2] << " " << -arr[0] << " " << -arr[0] << " "; } else { cout << -arr[1] << " " << arr[1] + arr[3] << " " << -arr[1] << " "; } for (long long i = 3; i < n; i++) { cout << b[i] << " "; } cout << "\n"; } } return 0; }
142	#include <bits/stdc++.h> using namespace std; const long long M = 1e9 + 7; void solve() { long long n; cin >> n; vector<long long> a(n); for (long long i = 0; i < n; ++i) { cin >> a[i]; } if (n % == 0) { for (long long i = 0; i < n; i += 2) { cout << -a[i + 1] << " " << -a[i] << " "; } cout << '\n'; return; } for (long long i = 0; i < n - 3; i += 2) { cout << -a[i + 1] << " " << -a[i] << " "; } if (a[n - 1] + a[n - 2]!= 0) { cout << (a[n - 1] + a[n - 2]) << " " << -a[n - 3] << " " << -a[n - 3] << '\n'; return; } if (a[n - 3] + a[n - 2]!= 0) { cout << -a[n - 1] << " " << -a[n - 1] << " " << (a[n - 3] + a[n - 2]) << '\n'; return; } if (a[n - 1] + a[n - 3]!= 0) { cout << -a[n - 2] << " " << (a[n - 1] + a[n - 3]) << " " << -a[n - 2] << '\n'; return; } } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t = 1; cin >> t; for (long long i = 1; i <= t; i++) { solve(); } }
143	#include <bits/stdc++.h> using namespace std; int n; int a[100010]; void solve() { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; if (n % == 0) { for (int i = 1; i <= n; i++) { if (i % == 0) cout << a[i - 1] << " "; else cout << -1 * a[i + 1] << " "; } cout << endl; } else { for (int i = 1; i + <= n; i++) { if (i % == 0) cout << a[i - 1] << " "; else cout << -1 * a[i + 1] << " "; } int x, y; if (a[n - 2] + a[n - 1] + a[n] == 0) { cout << << " " << << " " << << endl; return; } if (a[n - 2] + a[n - 1]!= 0) { x = a[n - 2] + a[n - 1]; y = a[n]; cout << y << " " << y << " " << " " << -1 * x << endl; } else if (a[n - 2] + a[n]!= 0) { x = a[n - 1] + a[n]; y = a[n - 2]; cout << -1 * x << " " << y << " " << y << endl; } else { x = a[n - 2] + a[n]; y = a[n - 1]; cout << y << " " << -1 * x << " " << y << endl; } } } int main() { int T = 1; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> T; while (T--) { solve(); } return 0; }
144	#include <bits/stdc++.h> const int N = 1e5 + 5; const int mod = 1e9 + 7; const long long int int_max = 1e18; const long long int int_min = -1e18; const long double PI = acos(-1); using namespace std; void solve() { long long int n; cin >> n; long long int a[n + 2]; for (long long int i = 1; i <= n; i++) { cin >> a[i]; } if (n % == 0) { for (long long int i = 1; i <= n; i++) { cout << -a[i + 1] <<'' << a[i] <<''; i++; } cout << '\n'; return; } if ((a[1] + a[2])!= 0) { cout << a[3] <<'' << a[3] <<'' << -(a[1] + a[2]) <<''; } else if (a[1] + a[3]!= 0) { cout << a[2] <<'' << -(a[1] + a[2]) <<'' << a[3] <<''; } else { cout << -(a[2] + a[3]) <<'' << a[1] <<'' << a[1] <<''; } for (long long int i = 4; i <= n; i++) { cout << -a[i + 1] <<'' << a[i] <<''; i++; } cout << '\n'; } int main() { ios::sync_with_stdio(false), cin.tie(NULL); int t; cin >> t; while (t--) { solve(); } }
145	#include <bits/stdc++.h> const int N = 1e5 + 5; const int mod = 1e9 + 7; const long long int int_max = 1e18; const long long int int_min = -1e18; const long double PI = acos(-1); using namespace std; void solve() { long long int n; cin >> n; long long int a[n + 2]; for (long long int i = 1; i <= n; i++) { cin >> a[i]; } if (n % == 0) { for (long long int i = 1; i <= n; i++) { cout << -a[i + 1] <<'' << a[i] <<''; i++; } cout << '\n'; return; } if ((a[1] + a[2])!= 0) { cout << a[3] <<'' << a[3] <<'' << -(a[1] + a[2]) <<''; } else if (a[1] + a[3]!= 0) { cout << a[2] <<'' << -(a[1] + a[2]) <<'' << a[2] <<''; } else { cout << -(a[2] + a[3]) <<'' << a[1] <<'' << a[1] <<''; } for (long long int i = 4; i <= n; i++) { cout << -a[i + 1] <<'' << a[i] <<''; i++; } cout << '\n'; } int main() { ios::sync_with_stdio(false), cin.tie(NULL); int t; cin >> t; while (t--) { solve(); } }
146	#include <bits/stdc++.h> const int mod = 998244353; const int maxn = 2e5 + 5; const long long int INF = 1e18; using namespace std; int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int tc; cin >> tc; while (tc--) { int n; cin >> n; vector<int> arr(n); vector<long long> prefix(n); for (int i = 0; i < n; i++) { cin >> arr[i]; if (i == 0) prefix[i] = arr[i]; else prefix[i] = prefix[i - 1] + arr[i]; } if (n == 1) { cout << "1\n"; continue; } int k = 0; while (k * (k + 1) <= * n) k++; k--; vector<vector<long long> > dp(n + 2, vector<long long>(k + 1, -INF)); dp[n - 1][1] = arr[n - 1]; dp[n - 1][0] = 0; for (int i = n - 1; i >= 0; i--) { for (int j = 0; j <= k; j++) { if (j && i + j - < n && prefix[i + j - 1] - (i - >=? prefix[i - 1] : 0) < dp[i + j][j - 1]) dp[i][j] = max(dp[i][j], prefix[i + j - 1] - (i - >=? prefix[i - 1] : 0)); dp[i][j] = max(dp[i][j], dp[i + 1][j]); } } int ans = 0; for (int j = 0; j <= k; j++) { if (dp[0][j]!= -INF) ans = j; else break; } cout << ans << '\n'; } return 0; }
147	#include <bits/stdc++.h> using namespace std; int n, m, q; vector<int> graf[300005]; int cnt[300005]; pair<int, int> kveri[300005]; bool vis[300005]; int cale[300005]; int disc[300005]; int out[300005]; int t; void dfs(int u) { vis[u] = true; disc[u] = t; for (int c : graf[u]) { if (vis[c]) continue; t++; cale[c] = u; dfs(c); } out[u] = t; } bool anc(int x, int y) { return disc[x] <= disc[y] && out[y] <= out[x]; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cin >> n >> m; for (int(i) = (1); (i) <= (m); ++(i)) { int u, v; cin >> u >> v; graf[u].push_back(v); graf[v].push_back(u); } dfs(1); cin >> q; for (int(i) = (1); (i) <= (q); ++(i)) { cin >> kveri[i].first >> kveri[i].second; cnt[kveri[i].first]++; cnt[kveri[i].second]++; } int s = 0; for (int(i) = (1); (i) <= (n); ++(i)) s += (cnt[i] & 1); if (s) { cout << "NO\n" << s; return 0; } cout << "YES\n"; for (int(i) = (1); (i) <= (q); ++(i)) { int a = kveri[i].first; int b = kveri[i].second; vector<int> r; while (!anc(a, b)) { r.push_back(a); a = cale[a]; } r.push_back(a); vector<int> l; while (b!= a) { l.push_back
148	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 10; int n, m, qq; vector<int> to[N], res[N]; int sum[N], up[N], dep[N]; void dfs(int u, int fa) { dep[u] = dep[fa] + 1; up[u] = fa; for (int v : to[u]) if (v!= fa &&!dep[v]) dfs(v, u); } int ss = 0; void calc(int u, int fa) { if (sum[u] & 1) ++ss; for (int v : to[u]) if (v!= fa && dep[v] == dep[u] + 1) calc(v, u); } void solve() { cin >> n >> m; for (int i = 1; i <= n; ++i) { int u, v; cin >> u >> v; to[u].push_back(v); to[v].push_back(u); } dfs(1, 1); cin >> qq; for (int i = 1; i <= qq; ++i) { int u, v; cin >> u >> v; vector<int> tmp; while (dep[v] > dep[u]) { tmp.push_back(v); v = up[v]; } while (dep[u] > dep[v]) { res[i].push_back(u); u = up[u]; } while (u!= v) { res[i].push_back(u); tmp.push_back(v); u = up[u]; v = up[v]; } res[i].push_back(u); for (int j = tmp.size() - 1; j >= 0; --j) res[i].push_back(tmp[j]); for (int j = 0; j < res[i].size(); ++j) { if (j!= && j!= res[i].size() - 1) ++sum[res[i][j]]; ++sum[res[i][j]]; } } calc(1, 1); if (ss) cout << "NO\n" << ss / << '\n'; else { cout << "YES\n"; for (int i = 1
149	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using pii = pair<int, int>; using pll = pair<ll, ll>; mt19937 eng(chrono::steady_clock::now().time_since_epoch().count()); const int N = 3e5 + 4; int n, m, cnt[N]; vector<int> g[N], tree[N]; void read() { cin >> n >> m; for (int i = 0; i < m; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } } bool used[N]; int p[N]; void precalc(int u = 1) { used[u] = true; for (int to : g[u]) if (!used[to]) { tree[u].push_back(to); tree[to].push_back(u); p[to] = u; precalc(to); } } void calc(int u) { while (u) { cnt[u] ^= 1; u = p[u]; } } vector<pii> que; vector<int> way; void dfs(int u, int v, int par = -1) { way.push_back(u); if (u == v) { cout << (int)((way).size()) << "\n"; for (int x : way) cout << x << " "; cout << "\n"; way.pop_back(); return; } for (int to : tree[u]) if (to!= par) { dfs(to, v, u); } way.pop_back(); } int endsCnt(int u) { int cur = cnt[u]; for (int to : tree[u]) if (to!= p[u]) { cur += cnt[to]; } return cur == 1; } void solve() { read(); precalc(); int q; cin >> q; while (q--) { int a, b; cin >> a >> b; que.emplace_back(a, b); calc(a); calc(b); } int ans = 0; for (int i = 1; i <= n; ++i) ans +=
150	#include <bits/stdc++.h> using namespace std; int n, k, tt[100005][14], i, ans, j, gg; void cons(int l, int r, int x, int dep) { if (l == r) { return; } int tmp = (r - l + 1) / k, cc = 0; for (int i = l; i <= r; i += tmp) { ++cc; if (x < i + tmp) { tt[x][dep] = cc; cons(i, i + tmp - 1, x, dep + 1); return; } } } int main() { ios::sync_with_stdio(0); cin >> n >> k; gg = 1; while (gg <= k) gg = gg * k, ++ans; for (i = 1; i <= n; ++i) { cons(1, gg, i, 1); } cout << ans << "\n"; for (i = 1; i <= n; ++i) { for (j = i + 1; j <= n; ++j) { for (k = 1;; ++k) { if (tt[i][k]!= tt[j][k]) { cout << k << " "; break; } } } } }
151	#include <bits/stdc++.h> using namespace std; int n, k, tt[100005][14], i, ans, j, gg; void cons(int l, int r, int x, int dep) { if (l == r) { return; } int tmp = (r - l + 1) / k, cc = 0; for (int i = l; i <= r; i += tmp) { ++cc; if (x < i + tmp) { tt[x][dep] = cc; cons(i, i + tmp - 1, x, dep + 1); return; } } } int main() { ios::sync_with_stdio(0); cin >> n >> k; gg = 1; while (gg <= n) gg = gg * k, ++ans; for (i = 1; i <= n; ++i) { cons(1, gg, i, 1); } cout << ans << "\n"; for (i = 1; i <= n; ++i) { for (j = i + 1; j <= n; ++j) { for (k = 1;; ++k) { if (tt[i][k]!= tt[j][k]) { cout << k << " "; break; } } } } }
152	#include <bits/stdc++.h> template <typename T> bool umin(T &a, const T &b) { return (a > b? a = b, : 0); } template <typename T> bool umax(T &a, const T &b) { return (a < b? a = b, : 0); } using namespace std; const int N = 1001; int n, k; int colors[N][N]; int diff = 0; void slv(vector<vector<int> > sts) { if ((int)(sts).size() == 1) return; int i = 0; diff++; vector<vector<int> > nw; while (i < (int)(sts).size()) { vector<int> current; int l = i, r = min((int)(sts).size(), i + k) - 1; for (int x = l; x <= r; ++x) { for (int y = l + 1; y <= r; ++y) { for (auto &a : sts[x]) { for (auto &b : sts[y]) { colors[a][b] = diff; } } } } for (int x = l; x <= r; ++x) { for (auto u : sts[x]) current.push_back(u); } nw.push_back(current); i = r + 1; } slv(nw); } signed main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> n >> k; vector<vector<int> > sts; for (int i = 0; i < n; ++i) { sts.push_back({i}); } slv(sts); cout << diff << endl; for (int i = 0; i < n; ++i) { for (int j = i + 1; j < n; ++j) { cout << colors[i][j] <<''; } } return 0; }
153	#include <bits/stdc++.h> using namespace std; int n, k, m, cnt, now, A[1000 + 5][1000 + 5], La; int main() { register int i, j; scanf("%d%d", &n, &k); now = 1; while (now <= n) { La = now; now *= k; cnt++; for (i = 1; i <= n; i++) { for (j = (i - 1) / La * La + La + 1; j <= (((i - 1) / now * now + now) < (n)? ((i - 1) / now * now + now) : (n)); j++) A[i][j] = cnt; } } printf("%d\n", cnt); for (i = 1; i <= n; i++) for (j = i + 1; j <= n; j++) printf("%d ", A[i][j]); }
154	#include <bits/stdc++.h> using namespace std; int n, m, ans[1005][1005], cnt; int main() { scanf("%d%d", &n, &m); int s = 1; while (s <= n) { cnt++; s *= m; int res = 0; while (res < n) { for (int i = 1; i <= s && res + i <= n; i++) for (int j = i + 1; j <= s && res + j <= n; j++) if (!ans[res + i][res + j]) ans[res + i][res + j] = cnt; res += s; } } printf("%d\n", cnt); for (int i = 1; i <= n; i++) for (int j = i + 1; j <= n; j++) printf("%d ", ans[i][j]); return 0; }
155	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using uint = unsigned int; using ull = unsigned long long; template <typename T> using pair2 = pair<T, T>; using pii = pair<int, int>; using pli = pair<ll, int>; using pll = pair<ll, ll>; mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count()); ll myRand(ll B) { return (ull)rng() % B; } clock_t startTime; double getCurrentTime() { return (double)(clock() - startTime) / CLOCKS_PER_SEC; } int main() { startTime = clock(); int n, k; scanf("%d%d", &n, &k); int pw = 1; int ans = 0; while (pw < n) { pw *= k; ans++; } printf("%d\n", ans); for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) { int x = i, y = j, z = 1; while (x % k == y % k) { x /= k; y /= k; z++; } printf("%d ", z); } printf("\n"); return 0; }
156	#include <bits/stdc++.h> using namespace std; inline void out(int *a, int l, int r) { for (int i = l; i <= r; ++i) printf("%d ", *(a + i)); puts(""); } inline int read() { int x = 0, f = 1; char ch = getchar(); while (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); } while (isdigit(ch)) { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; } long long pw[50]; signed main() { int n = read(), k = read(), c = 0, t = n; while (t) { t /= k; c++; } pw[0] = 1; for (int i = 1; i <= c + 1; ++i) pw[i] = pw[i - 1] * k; cout << c << endl; for (int i = 0; i <= n - 1; ++i) for (int j = i + 1; j <= n - 1; ++j) { for (int w = 1; w <= c; ++w) if (i / pw[w] == j / pw[w]) { printf("%d ", w); break; } } return 0; }
157	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5, mod = 1e9 + 7; int n, q, x, a[N], b[N], f[N], d[N], g[N], dp[N], t[N], ans; multiset<int> s; void M(int x, int y) { for (; x <= * n; x += x & -x) (t[x] += y) %= mod; } int Q(int x) { int ret = 0; for (; x; x -= x & -x) (ret += t[x]) %= mod; return ret; } int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d%d", &a[i], &b[i]), f[i] = i; sort(f + 1, f + n + 1, [&](int x, int y) { return a[x] < a[y]; }); scanf("%d", &q); for (int i = 1; i <= q; i++) scanf("%d", &x), d[x] = 1, s.insert(b[x]); for (int i = 1; i <= q; i++) { x = f[i]; g[x] =!s.empty() && b[x] <= *s.rbegin(); if (d[x]) s.erase(s.find(b[x])); } for (int i = 1; i <= n; i++) x = f[i], M(b[x], dp[x] = (mod + g[x] + Q(2 * n) - Q(b[x])) % mod), (ans += dp[x]) %= mod; printf("%d\n", ans); return 0; }
158	#include <bits/stdc++.h> const int md = 1000000007; inline int add(int a, int b) { a += b; if (a >= md) a -= md; return a; } inline int sub(int a, int b) { a -= b; if (a < 0) a += md; return a; } const int N = 200000; int t, n, s[N], ord[N << 1], suf[N], b[N << 1]; std::pair<int, int> a[N]; bool s_cmp(int x, int y) { return a[x].first < a[y].first; } void inc(int i, int d) { while (i < * n) { b[i] = add(b[i], d); i |= i + 1; } } int get(int i) { int s = 0; while (i >= 0) { s = add(s, b[i]); i = (i & i + 1) - 1; } return s; } int main() { scanf("%d", &n); for (int i = 0; i < n; ++i) { scanf("%d%d", &a[i].first, &a[i].second); --a[i].first; --a[i].second; ord[a[i].first] = ord[a[i].second] = i; } scanf("%d", &t); for (int i = 0; i < t; ++i) { scanf("%d", s + i); --s[i]; } std::sort(s, s + t, s_cmp); for (int i = t - 1; i >= 0; --i) { if (i == t - || a[s[i]].second > a[suf[i + 1]].second) suf[i] = s[i]; else suf[i] = suf[i + 1]; } std::vector<std::pair<int, int> > qr; int last = 0; for (int i = 0; i < t;) { qr.push_back(std::make_pair(a[suf[i]].second, last)); last = a[suf[i]].first + 1; while (
159	#include <bits/stdc++.h> using namespace std; int abc; mt19937 rnd((unsigned long long)(new char)); int rd(int l, int r) { uniform_int_distribution<> ee(l, r); return ee(rnd); } const int mxn = 4e5 + 3, mod = 1e9 + 7; pair<int, int> ee[mxn]; int n, v1[mxn], v2[mxn], px[mxn], m, v0[mxn], xp[mxn]; bool vs[mxn]; bool cmp1(int x, int y) { return v1[x] < v1[y]; } struct arrrr { long long a[mxn]; void add(int x, int y) { for (; x <= n; x += x & -x) a[x] += y; } long long ask(int x) { long long r = 0; for (; x; x &= x - 1) r += a[x], r %= mod; return r; } } ar; set<int> st; int main() { cin >> n; for (int i = 1; i <= n; ++i) abc = scanf("%d%d", v1 + i, v2 + i), ee[i].first = v2[i], ee[i].second = v1[i]; sort(ee + 1, ee + n + 1); cin >> m; for (int i = 1; i <= m; ++i) abc = scanf("%d", v0 + i), v0[i] = v1[v0[i]]; for (int i = 1; i <= n; ++i) v1[i] = ee[i].second, v2[i] = ee[i].first, px[i] = i; sort(px + 1, px + m + 1, cmp1); for (int i = 1; i <= n; ++i) xp[v1[i]] = i; for (int i = 1; i <= m; ++i) st.insert(xp[v0[i]]); for (int t = 1; t <= n && st.size(); ++t) if (*--st.end() >= px[t]) st.er
160	#include <bits/stdc++.h> using namespace std; const int N = 2100, rev[4] = {0, 2, 1, 3}; int n; char a[N][N]; int tag[N]; int id[N][N]; void dye(int n) { for (int i = 1, c = 1; i <= 9; i += 2, c += 2) { id[i][1] = id[1][i] = id[1][i + 1] = id[i + 1][1] = c; for (int j = 2; j < i; j++) id[j][i + - j] = c + (1 ^ j & 1); for (int j = 2; j <= n - i + 1; j++) id[i + j][j] = id[j][i + j] = c + (1 ^ j & 1); } for (int i = 1; i <= n; i++) for (int j = 1; j <= n - i + 1; j++) id[n - i + 1][n - j + 1] = id[i][j]; } int main() { scanf("%d", &n); if (n & 1) { puts("NONE"); return 0; } dye(n); for (int i = 1; i <= n; i++) { scanf("%s", a[i] + 1); for (int j = 1; j <= n; j++) if (a[i][j]!= '.') { tag[id[i][j]] |= << (a[i][j] == 'S'); } } for (int i = 1; i <= n; i += 2) { int &x = tag[i], &y = tag[i + 1]; y = rev[x |= rev[y]]; } int flag = 0; for (int i = 1; i <= n; i++) { if (tag[i] == 3) { puts("NONE"); return 0; } if (!tag[i]) flag = 1; } if (flag) { puts("MULTIPLE"); return 0; } puts("UNIQUE"); for (int i = 1; i <= n; i++, puts("")) for (int j = 1; j <= n; j++) putchar(tag[id[i][
161	#include <bits/stdc++.h> using namespace std; template <typename T> bool chkmin(T &x, T y) { return x > y? x = y, : 0; } template <typename T> bool chkmax(T &x, T y) { return x < y? x = y, : 0; } int readint() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } return x * f; } int n; int a[2005][2005], res[1005]; char s[2005][2005]; int main() { n = readint(); for (int i = 1; i <= n; i++) scanf("%s", s[i] + 1); if (n & 1) { printf("NONE\n"); return 0; } n >>= 1; for (int i = 1; i <= n; i++) a[i][i] = i; for (int i = n + 1; i <= n + n; i++) a[i][i] = n + n - i + 1; for (int i = 2; i <= n + n; i++) { if (i & 1) { for (int j = i; j <= n + n; j++) a[j][j - i + 1] = -a[j - 1][j - i + 2]; } else { a[i][1] = a[i - 1][1]; for (int j = i + 1; j <= n + n; j++) a[j][j - i + 1] = -a[j - 1][j - i]; } } for (int i = 1; i <= n + n; i++) for (int j = i + 1; j <= n + n; j++) a[i][j] = a[j][i]; for (int i = 1; i <= n + n; i++) res[i] = -1; for (int i = 1; i <= n + n; i++) { for (int j = 1
162	#include <bits/stdc++.h> using namespace std; const int N = 2002; int a[N][N]; char b[N][N], color[N / 2]; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; if (n & 1) { cout << "NONE" << endl; return 0; } for (int j = 0; j < n; j++) { a[0][j] = a[n - 1][n - j - 1] = a[j][0] = a[n - j - 1][n - 1] = j / 2; b[0][j] = b[n - 1][n - j - 1] = b[j][0] = b[n - j - 1][n - 1] = 1; if (j == || j == n - 1) continue; a[1][j] = j &? (j + 1) / : (j - 1) / 2; b[1][j] = 0; } for (int i = 2; i < n - 1; ++i) { for (int j = 1; j < n - 1; ++j) { if (a[i - 2][j] == a[i - 1][j - 1]) { a[i][j] = a[i - 1][j + 1]; } else { a[i][j] = a[i - 1][j - 1]; } } } memset(color, -1, sizeof(color)); bool flag = true; for (int i = 0; i < n; ++i) { for (int j = 0; j < n; ++j) { char c; cin >> c; int col = (c == 'S'); if (i > && i < n - && j > && j < n - 1) { if (a[i][j] == a[i - 1][j - 1] && a[i][j] == a[i + 1][j + 1]) { b[i][j] = ^ b[i - 1][j - 1]; } else { b[i][j] = ^ b[i - 1][j + 1]; } } if
163	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e3 + 5; int n; char s[MAXN][MAXN]; int f[MAXN]; inline pair<int, int> get(int x, int y, int k) { if (x == 1) { if (y % 2) ++y; return make_pair(y, k); } if ((x + y) % 2) { int t = min(x - 1, y - 1); x -= t; y -= t; k ^= t & 1; } else { int t = min(x - 1, n - y); x -= t; y += t; k ^= t & 1; } if (x!= 1) x = n - x + 1, y = n - y + 1; return get(x, y, k); } int main(void) { scanf("%d", &n); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); if (n % 2) return printf("NONE"), 0; memset(f, -1, sizeof(f)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (s[i][j]!= '.') { pair<int, int> res = get(i, j, s[i][j] == 'G'); int y = res.first, k = res.second; if (f[y] == -1) f[y] = k; else if (f[y]!= k) return printf("NONE"), 0; } for (int i = 2; i <= n; i += 2) if (f[i] == -1) return printf("MULTIPLE"), 0; printf("UNIQUE\n"); for (int i = 1; i <= n; ++i, putchar('\n')) for (int j = 1; j <= n; ++j) { pair<int, int> res = get(i, j, 0); int k = f[res.first] ^ res.second; putchar("GS"[k]); } return 0; }
164	#include <bits/stdc++.h> using namespace std; int main() { int t, i = 0, c = 0; cin >> t; for (; i < t; i++) { c = 0; int n; cin >> n; int a[n]; for (int j = 0; j < n; j++) { cin >> a[j]; } if (a[0] == 1) c++; for (int k = 1; k < n; k++) { if (a[k] == && a[k - 1] == 0) c++; else if (a[k] == && a[k - 1] == 1) c = c + 5; else if (a[k] == && a[k - 1] == 1) ; else if (a[k] == && a[k - 1] == 0) { c = -1; break; } } cout << c << endl; } }
165	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> v; int sum = 1; for (int i = 0; i < n; i++) { int a; cin >> a; v.push_back(a); } int count0 = 0, count1 = 0; for (int i = 0; i < n; i++) { if (v[i] == 1) { count1++; if (count1 == 2) { sum = sum + 4; } sum++; count0 = 0; } else if (v[i] == 0) { count0++; if (count0 == 2) { sum = -1; break; } count1 = 0; } } cout << sum << endl; } return 0; }
166	#include <bits/stdc++.h> using namespace std; const long long INF = 1e9 + 7; const long long MOD = 998244353; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { int n; cin >> n; int a[n]; for (int i = 0; i < n; i++) { cin >> a[i]; } long long height = 1; int flag = 1; for (int i = 0; i < n; i++) { if (a[i] == && a[i + 1] == 0) { flag = 0; break; } } if (flag) { if (a[0] == 1) { height += 1; } for (int i = 1; i < n; i++) { if (a[i - 1] == && a[i] == 1) { height += 5; } else if (a[i] == 1) { height += 1; } } cout << height << "\n"; } else { cout << "-1\n"; } } return 0; }
167	#include <bits/stdc++.h> using namespace std; const int N = 110; int n; int a[N]; void solve() { scanf("%d", &n); int now = 1; for (int i = 1; i <= n; i++) scanf("%d", &a[i]); if (n == 1) { if (a[1] == 1) printf("2\n"); else printf("1\n"); return; } if (a[1] == 1) now++; for (int i = 2; i <= n; i++) { if (a[i] == && a[i - 1] == 0) { now = -1; printf("%d\n", now); return; } if (a[i] == 0) continue; if (a[i] == && a[i - 1] == 1) now += 5; else now++; } printf("%d\n", now); } int main() { int t; scanf("%d", &t); while (t--) { solve(); } return 0; }
168	#include <bits/stdc++.h> using namespace std; int n, t, v; int arr[100]; void cf() { cin >> n; v = 0; for (int i = 0; i < n; ++i) { cin >> arr[i]; } for (int i = 0; i < n - 1; ++i) { if (arr[i] == && arr[i + 1] == 0) { cout << -1 << endl; v = 1; } } int ans = 1; if (v == 0) { ans += arr[0]; for (int i = 1; i < n; ++i) { if (arr[i] == 1) { ans += arr[i] + * arr[i - 1]; } } cout << ans << endl; } } int main() { cin >> t; for (int z = 0; z < t; ++z) { cf(); } }
169	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long int n; cin >> n; long long int a[n]; for (int i = 0; i < n; i++) { cin >> a[i]; } long long int count = 0, num = INT_MIN; long long int maxn = *max_element(a, a + n); if (a[n - 1] == maxn) { cout << "0"; } else { for (int i = n - 1; i >= 0; i--) { if (a[i] == maxn) { break; } else if (a[i] > num) { count++; num = a[i]; } } cout << count << endl; } } }
170	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(false); cin.tie(0); int tt; cin >> tt; while (tt--) { int n; cin >> n; int a[n]; int itr, maxa = 0; for (int i = 0; i < n; i++) { cin >> a[i]; if (a[i] >= maxa) { maxa = a[i]; itr = i; } } int br = 0, maxbr = a[n - 1]; for (int i = n - 1; i > itr; i--) { if (maxbr <= a[i]) br++; maxbr = max(a[i], maxbr); } cout << br << "\n"; } return 0; }
171	#include <bits/stdc++.h> using namespace std; int t, n, ans, mpos; struct node { int a, id; } x[200100]; bool cmp(node a, node b) { return a.a < b.a; } int main() { cin >> t; while (t--) { cin >> n; ans = 0; for (int i = 1; i <= n; i++) { cin >> x[i].a; x[i].id = i; } sort(x + 1, x + n + 1, cmp); mpos = x[n].id; for (int i = n - 1; i >= 1; i--) { if (x[i].id > mpos) { ans++; mpos = x[i].id; } } cout << ans << endl; } return 0; }
172	#include <bits/stdc++.h> using namespace std; int t, n, ans, mpos; struct node { int a, id; } x[200010]; bool cmp(node a, node b) { return a.a < b.a; } int main() { cin >> t; while (t--) { cin >> n; ans = 0; for (int i = 1; i <= n; i++) { cin >> x[i].a; x[i].id = i; } sort(x + 1, x + n + 1, cmp); mpos = x[n].id; for (int i = n - 1; i >= 1; i--) { if (x[i].id > mpos) { ans++; mpos = x[i].id; } } cout << ans << endl; } return 0; }
173	#include <bits/stdc++.h> using namespace std; const long long mod = 1000000007; const int64_t longinf = LLONG_MAX - 100000; const long long inf = INT_MAX; long long pw(long long x, long long y, long long p = longinf) { long long res = 1; x = x % p; if (x == 0) return 0; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } long long invmod(long long a, long long m = mod) { return pw(a, m - 2, m); } long long cl(long long a, long long x) { return a % x ==? a / x : a / x + 1; } void run_time_terror(long long case_no = 0) { long long n; cin >> n; vector<long long> a(n); for (long long i = 0; i < n; ++i) { cin >> a[i]; } long long mx = -1; for (long long i = 0; i < n; ++i) { mx = max(mx, a[i]); } vector<long long> b; b.push_back(a[0]); for (long long i = 1; i < n; ++i) { while (b.size() and b.back() < a[i]) { b.pop_back(); } b.push_back(a[i]); } cout << b.size() - << "\n"; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0), cout.tie(0), cout.setf(ios::fixed); cout << setprecision(0); long long tt = 1; cin >> tt; for (long long case_no = 1; case_no <= tt; case_no++) { run_time_terror(case_no); } return 0; }
174	#include <bits/stdc++.h> using namespace std; void solve() { long long n, cnt = 0; cin >> n; int arr[n]; for (int(i) = (0); (i) < (n); ++(i)) { cin >> arr[i]; } long long x = arr[n - 1]; for (int i = n - 2; i >= 0; i--) { if (arr[i] > x) { cnt++; x = arr[i]; } if (i == 0) { cout << cnt; return; } } } int main() { long long t; cin >> t; while (t--) { solve(); cout << endl; } return 0; }
175	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long int n; cin >> n; ; long long int k; cin >> k; ; int a[n]; for (int i = 0; i < n; i++) cin >> a[i]; ; vector<int> v, r; for (int i = 0; i < n; i++) { if (a[i] > 0) v.push_back(a[i]); else r.push_back(abs(a[i])); } sort(v.begin(), v.end()); sort(r.begin(), r.end()); int w = v.size(), y = r.size(); long long int ans = 0; int i = w - 1, i1 = y - 1; while (1) { if (i < 0) break; if (i == w - && (y > && w > && v[w - 1] > r[y - 1])) ans += v[i]; else if (i == w - && y == 0) ans += v[i]; else ans += * v[i]; i = i - k; if (i < 0) break; } while (1) { if (i1 < 0) break; if (i1 == y - && (y > && w > && v[w - 1] < r[y - 1])) ans += r[i1]; else if (i1 == y - && w == 0) ans += r[i1]; else ans += * r[i1]; i1 = i1 - k; if (i1 < 0) break; } cout << ans << endl; } }
176	#include <bits/stdc++.h> using namespace std; const int MAX_N = * 1e5 + 7; const int INF = 1e10 + 7; const int MOD = 1e9 + 7; const int LOG = 22; long long a[MAX_N]; int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { long long n, k; cin >> n >> k; for (int i = 0; i < n; i++) cin >> a[i]; sort(a, a + n); vector<long long> v; long long ans = 0, p = 0; for (int i = 0; i < n; i++) { if (a[i] >= 0) { p = i; break; } } long long MIN = INF, MAX = 0; for (int i = 0; i < p; i += k) { MIN = INF; if (i + k - >= p) { for (int j = i; j < p; j++) MIN = min(MIN, a[j]); } else { for (int j = i; j < i + k; j++) MIN = min(MIN, a[j]); } v.push_back(abs(MIN)); } for (int i = n - 1; i >= p; i -= k) { MAX = 0; if (i - k + < p) { for (int j = i; j >= p; j--) MAX = max(MAX, a[j]); } else { for (int j = i; j > i - k; j--) MAX = max(MAX, a[j]); } v.push_back(MAX); } sort(v.begin(), v.end()); for (long long x : v) ans += (2 * x); ans -= v[v.size() - 1]; cout << ans << '\n'; v.clear(); } }
177	#include <bits/stdc++.h> using namespace std; const long long maxn = 5e5 + 5; vector<long long> a, b; long long solve() { a.clear(); b.clear(); long long n, m; cin >> n >> m; while (n--) { long long e; cin >> e; if (e > 0) a.push_back(e); else if (e < 0) b.push_back(-e); } a.push_back(0); b.push_back(0); sort(a.begin(), a.end(), greater<long long>()); sort(b.begin(), b.end(), greater<long long>()); long long ans = a[0] + b[0]; long long have = m - 1; for (long long i = 1; i < a.size(); ++i) { if (have == 0) { have = m; ans += * a[i]; } have--; } have = m - 1; for (long long i = 1; i < b.size(); ++i) { if (have == 0) { have = m; ans += * b[i]; } have--; } if (a[0] < b[0]) ans += a[0]; else ans += * b[0]; return ans; } signed main() { ios::sync_with_stdio(false); long long t; cin >> t; while (t--) { cout << solve() << endl; } }
178	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("avx,avx2,fma") #pragma GCC optimization("unroll-loops") using namespace std; long long merge(long long arr[], long long l, long long mid, long long r) { long long ans = 0; long long n1 = mid - l + 1; long long n2 = r - mid; long long a[n1]; long long b[n2]; for (long long i = 0; i < n1; i++) { a[i] = arr[l + i]; } for (long long i = 0; i < n2; i++) { b[i] = arr[mid + + i]; } long long i = 0; long long j = 0; long long k = l; while (i < n1 && j < n2) { if (a[i] <= b[j]) { arr[k] = a[i]; k++; i++; } else { ans += n1 - i; arr[k] = b[j]; k++; j++; } } while (i < n1) { arr[k] = a[i]; k++; i++; } while (j < n2) { arr[k] = b[j]; k++; j++; } return ans; } long long inversion_count(long long arr[], long long l, long long r) { long long ans = 0; if (l < r) { long long mid = (l + r) / 2; ans += inversion_count(arr, l, mid); ans += inversion_count(arr, mid + 1, r); ans += merge(arr, l, mid, r); } return ans; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; long long v[n]; for (long long i = 0; i < n; i++) cin >> v[i]; bool ans = false; long long inv = inversion_count(v, 0, n); if (inv % == 0
179	#include <bits/stdc++.h> using namespace std; const int maxn = + 50; int T, n, h[maxn], f[maxn], tot, ti[maxn]; int ans, sum; int main() { scanf("%d", &T); for (int oo = 1; oo <= T; ++oo) { scanf("%d", &n); tot = 0; vector<bool> used(n); vector<set<int>> gi(n), ed(n); vector<int> seet; ans = 0, sum = 0; for (int i = 0; i < n; i++) f[i] = 0; for (int i = 0; i < n; i++) { scanf("%d", &h[i]); tot = max(tot, f[--h[i]]++); } for (int i = 0; i < n; ++i) ti[i] = h[i]; sort(h, h + n); for (int i = 0; i < n; i++) if (h[i]!= ti[i]) gi[ti[i]].insert(i), seet.push_back(i), ed[h[i]].insert(i); function<void(int)> dfs = [&](int u) { ed[h[u]].erase(u); sum++; gi[ti[u]].erase(u); if (!ed[ti[u]].empty()) dfs(*ed[ti[u]].begin()); }; for (int i : seet) if (gi[ti[i]].count(i)) { sum = 0; dfs(i); if (sum % == 0) ++ans; } bool p = 1; if (tot > || ans % == 0) p = 0; if (!p) printf("YES\n"); else printf("NO\n"); } return 0; }
180	#include <bits/stdc++.h> using namespace std; const int maxn = 5e5 + 5; int d[maxn]; unordered_map<int, int> mp; struct node { int id; int va; }; vector<node> vec; bool cmp(node a, node b) { return a.va < b.va; } bool vis[maxn]; int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { vec.clear(); mp.clear(); int n; cin >> n; for (int i = 1; i <= n; i++) { int x; cin >> x; mp[x]++; vis[i] = 0; vec.push_back({i, x}); } bool flag = false; for (auto i : mp) { if (i.second >= 2) { cout << "NO" << '\n'; ; flag = true; break; } } if (flag) continue; sort(vec.begin(), vec.end(), cmp); for (int i = 0; i < n; i++) { d[vec[i].id] = i + 1; } int cnt = 0; for (int i = 1; i <= n; i++) { if (vis[i]) continue; int to = i; vis[to] = true; to = d[to]; int ta = 1; while (to!= i) { vis[to] = true; ta++; to = d[to]; } if (ta & 1) ; else cnt++; } cout << ((cnt & 1)? "NO" : "YES") << '\n'; ; } return 0; }
181	#include <bits/stdc++.h> using namespace std; const long long NMX = 432000, oo = 0x3C3C3C3C3C3C3C3C, Bs = 1000000007; long long q, n, a[NMX], A[NMX], kq; bool dd[NMX], YES; void update(long long x) { while (x > 0) { A[x]++; x -= ((x) & (-(x))); } } long long get(long long x) { long long res = 0; while (x < NMX) { res += A[x]; x += ((x) & (-(x))); } return res; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); cin >> q; while (q--) { cin >> n; for (int i = 1; i <= (int)(n); i++) { cin >> a[i]; A[i] = 0; dd[i] = false; } YES = false; for (int i = 1; i <= (int)(n); i++) { if (dd[a[i]]) { cout << "YES\n"; YES = true; break; } dd[a[i]] = true; } if (YES) continue; kq = 0; for (int i = 1; i <= (int)(n); i++) { kq += get(a[i] + 1); update(a[i]); } cout << (kq % ==? "YES\n" : "NO\n"); } return 0; }
182	#include <bits/stdc++.h> using namespace std; template <class c> struct rge { c b, e; }; template <class c> rge<c> range(c i, c j) { return rge<c>{i, j}; } template <class c> auto dud(c *x) -> decltype(cerr << *x, 0); template <class c> char dud(...); struct debug { template <class c> debug &operator<<(const c &) { return *this; } }; template <typename T> void read(T &x) { cin >> x; } template <typename T, typename U> void read(T &x, U &y) { cin >> x >> y; } template <typename T> void read(vector<T> &a) { for (T &x : a) read(x); } template <typename T> T cd(T u, T v) { return (u + v - 1) / v; } void solve() { long long n; read(n); vector<long long> a(n); read(a); auto v = a; sort(v.begin(), v.end()); if (n <= 2) { cout << (a == v? "YES\n" : "NO\n"); return; } map<long long, set<long long>> mp; for (long long i = 0; i < n; i++) mp[a[i]].insert(i); for (long long i = 0; i < n - 2; i++) { if (a[i] == v[i]) { mp[a[i]].erase(i); } else { long long j = *mp[v[i]].begin(); long long k = (j == n - 1)? n - : n - 1; mp[a[i]].erase(i); mp[a[k]].erase(k); mp[a[j]].erase(j); long long temp = a[i]; a[i] = a[j]; a[j] = a[k]; a[k] = temp; mp[a[k]].insert(k); mp[a[j]].insert(j); assert(set<long long>({
183	#include <bits/stdc++.h> using namespace std; mt19937 rnd; struct node { node *l = 0, *r = 0; int x, y, siz; node(int x) : x(x), y(rnd()), siz(1) {} }; int size(node *t) { if (!t) return 0; return t->siz; } void update(node *t) { t->siz = size(t->l) + size(t->r) + 1; } pair<node *, node *> split(node *t, int x) { if (!t) return {0, 0}; if (t->x <= x) { auto p = split(t->r, x); t->r = p.first; update(t); return {t, p.second}; } else { auto p = split(t->l, x); t->l = p.second; update(t); return {p.first, t}; } } node *merge(node *a, node *b) { if (!a) return b; if (!b) return a; if (a->y > b->y) { a->r = merge(a->r, b); update(a); return a; } else { b->l = merge(a, b->l); update(b); return b; } } node *insert(node *t, node *in) { if (!t) return in; if (in->y > t->y) { auto p = split(t, in->x); in->l = p.first; in->r = p.second; update(in); return in; } if (in->x < t->x) { t->l = insert(t->l, in); } else { t->r = insert(t->r, in); } update(t); return t; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; for (int useless = 0; useless < t; useless++) { int n; cin >> n; vector<int> a(n); for (int i = 0; i < n; i++) cin >> a[i]; node *t = 0
184	#include <bits/stdc++.h> using namespace std; const int MAXN = 1e5 + 10; bool dp[MAXN][601]; int n, a[MAXN], minv[601]; void solve() { cin >> n; for (int i = (1); i <= (n); ++i) cin >> a[i]; for (int i = (0); i <= (511); ++i) { minv[i] = 0x7f7f7f7f; } dp[0][0] = 1; minv[0] = -1; for (int i = (1); i <= (n); ++i) { for (int j = (0); j <= (16); ++j) if ((a[i] ^ j) <= 16) { dp[i][j] |= (dp[i - 1][j]); dp[i][j] |= (minv[a[i] ^ j] < a[i]); if ((minv[a[i] ^ j] < a[i])) minv[j] = min(minv[j], a[i]); } dp[i][a[i]] = 1; minv[a[i]] = min(minv[a[i]], a[i]); } int cnt = 0; for (int i = (0); i <= (511); ++i) cnt += (dp[n][i]); cout << cnt << '\n'; for (int i = (0); i <= (511); ++i) if (dp[n][i]) { cout << i <<''; } cout << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(0); int _; _ = 1; while (_--) { solve(); } return 0; }
185	#include <bits/stdc++.h> using namespace std; template <class c> struct rge { c b, e; }; template <class c> rge<c> range(c i, c j) { return rge<c>{i, j}; } template <class c> auto dud(c *x) -> decltype(cerr << *x, 0); template <class c> char dud(...); struct debug { template <class c> debug &operator<<(const c &) { return *this; } }; long long __pow(long long x, long long y, long long M) { long long res = 1; while (y > 0) { if (y & 1) res = (res * x) % M; y >>= 1; x = (x * x) % M; } return res % M; } long long __pow(long long x, long long y) { long long res = 1; while (y > 0) { if (y & 1) res = (res * x); y >>= 1; x = (x * x); } return res; } long long mi(long long x, long long M) { return __pow(x, M - 2, M); } long long mul(vector<long long> a, long long M) { long long res = 1; for (auto x : a) res = (res * x) % M; return res; } long long cl(long long a, long long b) { if (a % b == 0) return a / b; return a / b + 1; } void umax(long long &a, long long b) { a = max(a, b); } void umin(long long &a, long long b) { a = min(a, b); } const long long N = 2e5 + 2, inf = 1e18, M = 998244353, LN = 20; long long Test, n, m, k, q, a[N]; bool ok = 1; class BIT { long long n, VAL; vector<long long> bit;  public: BIT() {} BIT(long long _n, long long val) { n = _n; VAL = val; bit.assign(2 * n + 2, VAL); } long long todo(long long a,
186	#include <bits/stdc++.h> long long bigmod(long long a, long long b) { if (b == 0) return 1; long long ret = bigmod(a, b / 2); return ret * ret % * (b %? a : 1) % 1000000007; } using namespace std; int n; int v[200010]; int dp[520], cp[520]; vector<int> A; int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> n; for (int i = 1; i <= n; i++) cin >> v[i]; for (int i = 1; i <= 512; i++) cp[i] = 1e9; dp[0] = 1; for (int i = 1; i <= n; i++) { for (int h = 512; h >= 0; h--) { if (dp[h] == && cp[h] < v[i] && cp[h ^ v[i]] > v[i]) { dp[h ^ v[i]] = 1; cp[h ^ v[i]] = v[i]; } } } for (int i = 0; i <= 500; i++) if (dp[i]) A.push_back(i); cout << A.size() << "\n"; for (auto i : A) cout << i << " "; }
187	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; long long ap[100005], bp[550][550]; vector<int> ve; int main() { int n; for (int i = 0; i <= 510; i++) bp[i][0] = 1; cin >> n; for (int i = 1; i <= n; i++) { cin >> ap[i]; if (ap[i] == 0) continue; for (int j = 0; j <= 500; j++) { if (!bp[ap[i]][j]) continue; if (bp[ap[i]][j ^ ap[i]]) continue; bp[ap[i]][j ^ ap[i]] = 1; for (int k = ap[i] + 1; k <= 500; k++) { bp[k][j ^ ap[i]] = 1; } } } int fl = 0; for (int i = 0; i <= 500; i++) { if (bp[500][i] == 1) { ve.push_back(i); } } int len = ve.size(); cout << len << endl; for (int i = 0; i < len; i++) { if (i!= 0) cout << " "; cout << ve[i]; } cout << endl; }
188	#include <bits/stdc++.h> int *ei[5000 + 1], eo[5000 + 1]; void append(int a, int i) { int o = eo[a]++; if (o >= && (o & o - 1) == 0) ei[a] = (int *)realloc(ei[a], o * * sizeof *ei[a]); ei[a][o] = i; } int main() { static int ii[8192], bb[8192], bb_[8192]; static char in[8192]; int n, h, h_, i, a, b, o, cnt; scanf("%d", &n); for (a = 0; a <= 5000; a++) ei[a] = (int *)malloc(2 * sizeof *ei[a]); for (i = 0; i < n; i++) { scanf("%d", &a); append(a, i); } for (b = 0; b < 8192; b++) ii[b] = n, bb[b] = b; ii[0] = -1; for (a = 1; a <= 5000; a++) { memset(in, 0, * sizeof *in); cnt = 0; for (o = 0, h = 0; o <= eo[a]; o++, h = h_) { i = o == eo[a]? n + : ei[a][o]; h_ = h; while (h_ < && ii[bb[h_]] < i) { if (!in[b = bb[h_]]) in[b] = 1, bb_[cnt++] = b; h_++; } h_ = h; while (h_ < && ii[bb[h_]] < i) { if (in[bb[h_]] == &&!in[b = bb[h_] ^ a]) in[b] = 2, ii[b] = i, bb_[cnt++] = b; h_++; } } memcpy(bb, bb_, * sizeof *in); } cnt = 0; for (b = 0; b < 8192; b++) if (ii[b]!= n) cnt++; printf("%d\n", cnt); for (b =
189	#include <bits/stdc++.h> using namespace std; vector<int> idxs[8192]; int dp[8192]; int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); memset(dp, 0x7f, sizeof(dp)); int n; cin >> n; for (int i = 0; i < n; i++) { int x; cin >> x; idxs[x].emplace_back(i); } dp[0] = -1; for (int i = 0; i < 8192; i++) { for (int j = 0; j < i; j++) { auto it = upper_bound(idxs[i].begin(), idxs[i].end(), dp[j]); if (it == idxs[i].end()) continue; dp[j ^ i] = min(dp[j ^ i], *it); } } int ans = 0; for (int i = 0; i < 8192; i++) { if (dp[i]!= 0x7f7f7f7f) ++ans; } cout << ans << "\n"; for (int i = 0; i < 8192; i++) { if (dp[i]!= 0x7f7f7f7f) cout << i << " "; } cout << "\n"; }
190	#include <bits/stdc++.h> using namespace std; inline long long read() { long long x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } return x * f; } vector<int> g[10010]; int r[10010]; bool ans[10010]; const int M = << - 1; int main() { int n = read(); ans[0] = 1; for (register int i = 0; i <= M; ++i) g[i].push_back(0), r[i] = M; while (n--) { int x = read(); for (int y : g[x]) { int to = x ^ y; ans[to] = 1; for (register int i = x + 1; i <= r[to]; ++i) g[i].push_back(to); r[to] = min(r[to], x); } g[x] = {}; } int k = 0; for (register int i = 0; i <= M; ++i) k += ans[i]; printf("%d\n", k); for (register int i = 0; i <= M; ++i) if (ans[i]) printf("%d ", i); return 0; }
191	#include <bits/stdc++.h> using namespace std; const int N = 8192; const int maxn = 2e5 + 10; const int mod = 1e9 + 7; inline int read() { int x = 0, f = 1; char c = getchar(); while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); } while (c >= '0' && c <= '9') { x = (x << 1) + (x << 3) + c - '0'; c = getchar(); } return x * f; } vector<int> v[N]; int n, m, a[maxn], b[N], st[N], rec[N], ans; int main() { n = read(); ans = st[0] = 1; for (int i = 0; i < N; i++) v[i].push_back(0), rec[i] = N - 1; for (int i = 1; i <= n; i++) { a[i] = read(); for (auto x : v[a[i]]) { int u = x ^ a[i]; if (!st[u]) st[u] = 1, ++ans; if (a[i] <= rec[u]) { for (int j = a[i] + 1; j <= rec[u]; j++) v[j].push_back(u); rec[u] = a[i]; } } v[a[i]].clear(); } printf("%d\n", ans); for (int i = 0; i < N; i++) if (st[i]) printf("%d ", i); return 0; }
192	#include <bits/stdc++.h> using namespace std; const int N = (int)1e6 + 50, M = 8200; int n, a[N]; vector<int> xs[M]; vector<pair<int, int> > ear; bool vis[M]; int main() { ios::sync_with_stdio(false); cin.tie(NULL); cin >> n; for (int i = 0; i < (n); ++i) cin >> a[i], xs[a[i]].push_back(i); ear.push_back({0, 0}); for (int v = 0; v < (M); ++v) { fill(vis, vis + M, 0); vector<pair<int, int> > gear; int c = 0; for (int i : xs[v]) { int r = c; while (r < (int)(ear).size() && ear[r].second < i) { if (!vis[ear[r].first]) { gear.push_back({ear[r]}); vis[ear[r].first] = true; } r++; } for (int j = c; j < r; j++) { int nxt = ear[j].first ^ v; if (!vis[nxt]) { gear.push_back({nxt, i}); vis[nxt] = true; } } c = r; } while (c < (int)(ear).size()) { if (!vis[ear[c].first]) { gear.push_back({ear[c]}); vis[ear[c].first] = true; } c++; } ear = gear; } sort(begin(ear), end(ear)); cout << (int)(ear).size() << '\n'; for (int i = 0; i < ((int)(ear).size()); ++i) cout << ear[i].first << " "; cout << endl; }
193	#include <bits/stdc++.h> using namespace std; const long long mod = 1000000007; const unsigned gen_seed = std::chrono::system_clock::now().time_since_epoch().count(); std::mt19937_64 gen(gen_seed); const int N = 1000500; int mindiv[N + 1]; struct sega { sega(){}; sega(int v) { add(v); }; map<int, int> deg; int numbad = 0; void add(int v) { while (v > 1) { deg[mindiv[v]]++; if (deg[mindiv[v]] == 0) numbad--; v /= mindiv[v]; } } void rem(int v) { while (v > 1) { deg[mindiv[v]]--; if (deg[mindiv[v]] == -1) numbad++; v /= mindiv[v]; } } void killjoin(sega& f) { if (f.deg.size() > deg.size()) { swap(f.deg, deg); swap(numbad, f.numbad); for (auto x : f.deg) { if (deg[x.first] < 0) numbad--; deg[x.first] += x.second; if (deg[x.first] < 0) numbad++; } } } bool isbad() { return numbad > 0; } }; int main() { vector<long long> pr; std::vector<int> isp(N + 1, 0); for (int i = 2; i <= N; ++i) { if (mindiv[i] == 0) { mindiv[i] = i; pr.push_back(i); isp[i] = 1; } for (int j = 0; j < (int)pr.size() && pr[j] <= mindiv[i] && i * pr[j] <= N; ++j) mindiv[i * pr[j]] = pr[j]; } int n; scanf("%d", &n); std::vector<int> a(n); char c[1000500]; for (int i = 0; i < n; i++) { if (i < n - 1) scanf("%d", &a[
194	#include <bits/stdc++.h> using namespace std; inline long long read() { long long x = 0; bool flag = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') flag = 0; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + ch - '0'; ch = getchar(); } return flag? x : ~(x - 1); } inline void write(long long x) { if (x > 9) write(x / 10); putchar(x % + '0'); } const long long N = 1e6 + 10; long long n, ans, a[N]; long long prime[N], mp[N], cnt; long long stk[N], top, pre[N], w[N]; bool is_prime[N]; vector<long long> vec[N]; inline void sieve(long long x) { for (long long i = 2; i <= x; i++) { if (!is_prime[i]) prime[++cnt] = mp[i] = i; for (long long j = 1; prime[j] <= x / i; j++) { is_prime[i * prime[j]] = true; mp[i * prime[j]] = prime[j]; if (i % prime[j] == 0) break; } } } signed main() { sieve(1000000); n = read(); for (long long i = 1; i <= n; i++) a[i] = read(); for (long long i = 1; i <= n; i++) { char ch = getchar(); while (ch!= '*' && ch!= '/') ch = getchar(); if (ch == '*') { while (a[i] > 1) { long long p = mp[a[i]]; vec[p].push_back(i); a[i] /= p; } pre[i] = i; } else { pre[i] = i; while (a[i] > 1) { long long p = mp[a[i]]; if (vec[p].empty()) pre[i] = -1; else pre[i] = min(pre[i], vec[p
195	#include <bits/stdc++.h> using namespace std; int N, a[1000005], b[1000005]; string ss; bool IsPrime[1000006]; int mp[1000006], Index, Prime[1000006], L[1000006]; vector<int> stk[1000006]; const int mx = 1e6 + 5; void Pre() { for (int i = 2; i <= mx; i++) { if (!IsPrime[i]) { mp[i] = i; Prime[++Index] = i; } for (int j = 1; j <= Index && i * Prime[j] <= mx; j++) { IsPrime[i * Prime[j]] = true; mp[i * Prime[j]] = Prime[j]; if (i % Prime[j] == 0) break; } } } void Add(int x, int pos) { L[pos] = pos; while (x > 1) { stk[mp[x]].push_back(pos); x /= mp[x]; } } void Del(int x, int pos) { if (x == 1) { L[pos] = pos; return; } L[pos] = pos; while (x!= 1) { if (stk[mp[x]].empty()) { L[pos] = 0; return; } L[pos] = min(L[pos], stk[mp[x]].back()); stk[mp[x]].pop_back(); x /= mp[x]; } } int main() { Pre(); scanf("%d", &N); for (int i = 1; i <= N; i++) scanf("%d", &a[i]); cin >> ss; for (int i = 0; i < ss.length(); i++) { if (ss[i] == '*') Add(a[i + 1], i + 1); else Del(a[i + 1], i + 1); } long long ans = 0; vector<pair<int, int> > ff; for (int i = N; i >= 1; i--) { long long cnt = 1; while (ff.size() > && ff.back().first > L[i]) { cnt += ff.back().second; ff.pop_back(); } ff.push_back
196	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 5; int read() { int s = 0; char c = getchar(), lc = '+'; while (c < '0' || '9' < c) lc = c, c = getchar(); while ('0' <= c && c <= '9') s = s * + c - '0', c = getchar(); return lc == '-'? -s : s; } void write(long long x) { if (x < 0) putchar('-'), x = -x; if (x < 10) putchar(x + '0'); else write(x / 10), putchar(x % + '0'); } void print(long long x, char c = '\n') { write(x); putchar(c); } void up(int &x, int y) { if (x > y) x = y; } int mn[N], a[N], nxt[N]; void ysgs(int n) { mn[1] = 1; for (int i = 2; i <= n; i++) if (!mn[i]) for (int j = i; j <= n; j += i) if (!mn[j]) mn[j] = i; } char op[N]; vector<pair<int, int>> b[N]; signed main(signed Goodbye, char *Wangang[]) { (void)Goodbye, (void)Wangang; ysgs(1e6); int n = read(); for (int i = 1; i <= n; i++) a[i] = read(); scanf("%s", op + 1); for (int i = 1; i <= n; i++) { nxt[i] = i; int now = a[i]; while (now > 1) b[mn[now]].push_back(make_pair(op[i] == '*'? : -1, i)), now /= mn[now]; } for (int t = 1; t <= n; t++) if (!b[t].empty()) { stack<int> st; for (auto i : b[t]) if (i.first > 0) st.push(i.second); else if (!st.empty()) up(nxt[i.second], st
197	#include <bits/stdc++.h> using namespace std; const double EPS = 1e-9; const int INFMEM = 63; const int INF = 1061109567; const long long LINF = 4557430888798830399LL; const double DINF = numeric_limits<double>::infinity(); const long long MOD = 1000000007; const int dx[8] = {0, 0, 1, -1, 1, -1, 1, -1}; const int dy[8] = {1, -1, 0, 0, 1, -1, -1, 1}; const char dch[4] = {'R', 'L', 'D', 'U'}; const double PI = 3.141592653589793; inline void open(string a) { freopen((a + ".in").c_str(), "r", stdin); freopen((a + ".out").c_str(), "w", stdout); } inline void fasterios() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); } const int MAXN = 1e6; int prime[MAXN + 5]; int isi[MAXN + 5]; int leftMost[MAXN + 5]; vector<int> bracket[MAXN + 5]; int main() { fasterios(); prime[0] = 1; prime[1] = 1; for (int i = 2; i <= MAXN; i++) { if (prime[i]) continue; prime[i] = i; if (i > 1000) continue; for (int j = i * i; j <= MAXN; j += i) prime[j] = i; } int n; cin >> n; for (int i = 1; i <= n; i++) { cin >> isi[i]; } for (int i = 1; i <= n; i++) { char ch; cin >> ch; int cur = isi[i]; leftMost[i] = i; if (cur == 1) continue; if (ch == '*') { leftMost[i] = i + 1; while (cur > 1) { bracket[prime[cur]].push_back(i); cur /= prime[cur]; } } else { while (cur > 1
198	#include <bits/stdc++.h> using namespace std; bool isPrime(int n) { for (int i = 2; i * i <= n; i++) { if (n % i == 0) return false; } return true; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); ; long long test = 1; cin >> test; while (test--) { int n; cin >> n; int sum = 0; vector<int> arr(n); int index = -1; for (int i = 0; i < n; i++) { cin >> arr[i]; sum += arr[i]; if (arr[i] % 2) index = i; } int ans = n; if (isPrime(sum)) { sum -= arr[index]; arr[index] = -1; ans--; } cout << ans << "\n"; for (int i = 0; i < n; i++) { if (arr[i]!= -1) { cout << i + << " "; } } cout << "\n"; } }
199	#include <bits/stdc++.h> using namespace std; long long prime(long long p) { if (p <= 1) { return 0; } for (long long i = 2; i <= sqrt(p); ++i) { if (p % i == 0) { return 0; } } return 1; } void algo() { long long n = 0; cin >> n; vector<long long> v(n, 0); long long sum = 0; long long odd = -1; for (long long i = 0; i < n; ++i) { cin >> v[i]; sum += v[i]; if (v[i] %!= 0) { odd = i; } } if (!prime(sum)) { cout << n << endl; for (long long j = 0; j < n; ++j) { cout << j + << " "; } } else { cout << n - << endl; for (long long j = 0; j < n; ++j) { if (j!= odd) { cout << j + << " "; } } } cout << endl; } signed main() { long long t = 0; cin >> t; while (t--) { algo(); } return 0; }
200	#include <bits/stdc++.h> using namespace std; const int MAXN = 205; const int MAXP = 20005; int t, n, cnt, sum; bool f; int a[MAXN]; int prime[MAXP]; int isPrime[MAXP]; inline int read() { int x = 0; char c = getchar(); while (c > '9' || c < '0') c = getchar(); while (c <= '9' && c >= '0') { x = x * + c - '0'; c = getchar(); } return x; } void doGetPrime() { prime[++cnt] = 2; isPrime[2] = 1; for (int i = 3; i <= MAXP; i++) { f = true; for (int j = 1; j <= cnt; j++) { if (i % prime[j] == 0) { f = false; break; } } if (f) { prime[++cnt] = i; isPrime[i] = 1; } } } int main(void) { doGetPrime(); t = read(); for (int T = 1; T <= t; T++) { n = read(); sum = 0; for (int i = 1; i <= n; i++) { a[i] = read(); sum += a[i]; } if (!isPrime[sum]) { cout << n << endl; for (int i = 1; i <= n; i++) cout << i << " "; cout << endl; } else { for (int i = 1; i <= n; i++) { if (!isPrime[sum - a[i]]) { cout << n - << endl; for (int j = 1; j <= n; j++) if (1 - j) cout << j << " "; cout << endl; break; } } } } return 0; }
201	#include <bits/stdc++.h> using namespace std; const long long inf = 1e18; const long long mod = 1e9 + 7; bool isComposite(int n) { if (n <= 1) return false; if (n <= 3) return false; if (n % == || n % == 0) return true; for (int i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return true; return false; } void solve() { int n; cin >> n; vector<int> v(n); for (int i = 0; i < n; i++) { cin >> v[i]; } int sum = accumulate(v.begin(), v.end(), 0); int temp; if (isComposite(sum)) { cout << n; cout << "\n"; for (int i = 0; i < n; i++) { cout << i + << " "; } return; } else { cout << n - 1; cout << "\n"; for (int i = 0; i < n; i++) { if (!isComposite(sum - v[i])) { temp = v[i]; } } for (int i = 0; i < n; i++) { if (v[i] == temp) { continue; } cout << i + << " "; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int tt; cin >> tt; for (int i = 0; i < tt; i++) { solve(); cout << endl; } }
202	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; void SADIEM() { std::ios_base::sync_with_stdio(NULL); cin.tie(0); cout.tie(0); } bool iscomposite(int x) { if (x < || (x!= &&!(x & 1)) || (x!= &&!(x % 3)) || (x!= &&!(x % 3))) return true; for (int i = 7; i <= x / i; i++) if (!(x % i)) return true; return false; } int main() { int t; cin >> t; while (t--) { int n, sum = 0; cin >> n; vector<pair<int, int>> v(n); for (int i = 0; i < n && cin >> v[i].first; i++) v[i].second = i + 1, sum += v[i].first; if (iscomposite(sum)) { cout << n << "\n"; for (int i = 0; i < n; i++) cout << i + << (i < n -? " " : ""); } else { sort(v.begin(), v.end()); int idx = -1; for (int i = 0; i < n; i++) { if (iscomposite(sum - v[i].first)) { idx = i; break; } } cout << n - << "\n"; for (int i = 0; i < n; i++) if (idx!= i) cout << v[i].second << " "; } if (t) cout << "\n"; } }
203	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; void SADIEM() { std::ios_base::sync_with_stdio(NULL); cin.tie(0); cout.tie(0); } bool iscomposite(int x) { if (x < || (x!= &&!(x & 1)) || (x!= &&!(x % 3)) || (x!= &&!(x % 3))) return true; for (int i = 7; i < x / i; i++) if (!(x % i)) return true; return false; } int main() { int t; cin >> t; while (t--) { int n, sum = 0; cin >> n; vector<pair<int, int>> v(n); for (int i = 0; i < n && cin >> v[i].first; i++) v[i].second = i + 1, sum += v[i].first; if (iscomposite(sum)) { cout << n << "\n"; for (int i = 0; i < n; i++) cout << i + << (i < n -? " " : ""); } else { sort(v.begin(), v.end()); int idx = -1; for (int i = 0; i < n; i++) { if (iscomposite(sum - v[i].first)) { idx = i; break; } } cout << n - << "\n"; for (int i = 0; i < n; i++) if (idx!= i) cout << v[i].second << " "; } if (t) cout << "\n"; } }
204	#include <bits/stdc++.h> using namespace std; mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); inline int gc() { static char buf[1048576], *p1 = buf, *p2 = buf; return (p1 == p2) && (p2 = (p1 = buf) + fread(buf, 1, 1048576, stdin), p1 == p2)? EOF : *p1++; } template <class T> void read(T &x) { char c = gc(); bool neg = false; while (!isdigit(c)) neg = (c == '-'), c = gc(); x = 0; while (isdigit(c)) x = x * + c - '0', c = gc(); if (neg) x = -x; } void read(char &c) { for (c =''; isspace(c); c = gc()) ; } void read(char *s) { char c = gc(); while (isspace(c)) c = gc(); while (!isspace(c)) *s++ = c, c = gc(); *s = '\0'; } template <typename Head, typename... Tail> void read(Head &H, Tail &...T) { read(H), read(T...); } template <class T> void print(T x) { static int buf[256], top; if (x < 0) x = -x, putchar(45); do buf[++top] = x % + '0', x /= 10; while (x); while (top) putchar(buf[top--]); } void print(const char &c) { putchar(c); } void print(const char *c) { for (int p = 0; c[p]!= '\0'; print(c[p++])) ; } void print(const string &s) { for (int i = 0; i < (int)s.size(); print(s[i++])) ; } template <typename Head, typename... Tail> void print(Head H, Tail... T) { print(H), print(T...); } using ull = unsigned long long; using ll = long long; using vi = vector<int>; template <class T> using v =
205	#include <bits/stdc++.h> using namespace std; const long long maxn = 100010; const long long INF = 2147483647; long long t, n, m, x, y, z, cnt[maxn]; int main() { ios::sync_with_stdio(false); cin >> t; while (t--) { cin >> n >> m; for (int i = 1; i <= n; i++) cnt[i] = 0; for (int i = 1; i <= m; i++) { cin >> x >> y >> z; cnt[z]++; } for (int i = 1; i <= n; i++) { if (cnt[i] == 0) { for (int j = 1; j <= n; j++) { if (j == i) continue; cout << j << " " << i << endl; } break; } } } return 0; }
206	#include <bits/stdc++.h> using namespace std; int a[100010]; int main() { int t; cin >> t; while (t--) { long long n, m; cin >> n >> m; for (int i = 1; i <= n; i++) a[i] = 1; while (m--) { int v, s, temp; cin >> v >> s >> temp; a[temp] = 0; } for (int i = 1; i <= n; i++) { if (a[i]) { for (int j = 1; j <= n; j++) { if (i!= j) cout << i << " " << j << endl; } break; } } } }
207	#include <bits/stdc++.h> using namespace std; signed main() { long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; long long find[n + 1]; memset(find, 0, sizeof(find)); for (long long i = 1; i <= n; i++) { long long a, b, c; cin >> a >> b >> c; find[b]++; } long long i; for (i = 1; i <= m; i++) { if (!find[i]) { break; } } for (long long j = 1; j <= n; j++) { if (j!= i) { cout << i << " " << j << endl; } } } return 0; }
208	#include <bits/stdc++.h> using namespace std; bool notprime(int k) { if (k == || k == || k == 2) { return false; } int t = int(sqrt(k)) + 1; for (int i = 2; i <= t; i++) { if (k % i == && i!= k) { return true; } } return false; } pair<bool, vector<int>> isit(int k, int accum, vector<int> v) { vector<int> blankvector(0); if (k > v.size()) { return {false, blankvector}; } if (v.size() == k) { vector<int> answer; for (int i = 0; i < k; i++) { answer.push_back(i); } if (notprime(accum + accumulate(v.begin(), v.end(), 0))) { return {true, answer}; } else { return {false, blankvector}; } } else { int number = v[v.size() - 1]; int position = int(v.size() - 1); v.pop_back(); if (isit(k - 1, accum + number, v).first) { vector<int> answer = isit(k - 1, accum + number, v).second; answer.push_back(position); return {true, answer}; } if (isit(k, accum, v).first) { return {true, isit(k, accum, v).second}; } else { return {false, blankvector}; } } } int main() { int t; cin >> t; for (int i = 0; i < t; i++) { int n, m; cin >> n >> m; vector<int> v(n); for (int i = 0; i < m; i++) { int a, b, c; cin >> a >> b >> c; v[b]++; } for (int i = 0; i < n; i++) { if (v[i] == 0) { for (int j = 1; j <= n; j++) { if (j!= i + 1) { cout << j << " " << i + << endl; } } break; } } } }
209	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m; cin >> n >> m; vector<int> v(n + 1, 0); int i; for (int i = 0; i < m; i++) { int a, b, c; cin >> a >> b >> c; v[b] = 1; } for (i = 1; i <= n; i++) if (!v[i]) break; for (int j = i; j <= n; j++) if (i!= j) cout << i << " " << j << endl; } return 0; }
210	#include <bits/stdc++.h> using namespace std; bool mark[100005]; int main() { int t; scanf("%d", &t); while (t--) { int n, m; memset(mark, 0, sizeof(mark)); scanf("%d%d", &n, &m); for (int i = 1; i <= m; i++) { int a, b, c; scanf("%d%d%d", &a, &b, &c); mark[a] = 1; } int st = 1; for (int i = 1; i <= n; i++) { if (!mark[i]) { st = i; break; } } for (int i = 1; i <= n; i++) { if (i == st) continue; printf("%d %d\n", st, i); } } return 0; }
211	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 7; const int LOG = 30; vector<char> a[maxn]; vector<int> dp[maxn]; int st[maxn][LOG]; int bin[LOG]; int mlg[maxn]; int n, m, q; void init(int); int query(int, int); void print() { for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { cout << dp[i][j] + << " "; } cout << '\n'; } } int main() { cin >> n >> m; for (int i = 0; i < n; i++) { dp[i].resize(m); string s; cin >> s; for (int j = 0; j < s.length(); j++) { a[i].push_back(s[j]); } } for (int i = 0; i < n; i++) { dp[i][0] = 0; } for (int i = 0; i < m; i++) { dp[0][i] = 0; } for (int i = 1; i < n; i++) { for (int j = 1; j < m; j++) { if (a[i - 1][j] == 'X' && a[i][j - 1] == 'X') dp[i][j] = j; else if (a[i - 1][j] == 'X') dp[i][j] = dp[i][j - 1]; else if (a[i][j - 1] == 'X') dp[i][j] = dp[i - 1][j]; else dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]); } } for (int j = 0; j < m; j++) { int tmp = -1; for (int i = 0; i < n; i++) { tmp = max(dp[i][j], tmp); } st[j][0] = tmp; } init(m); cin >> q; while (q--) { int l, r; cin >> l >> r; if (l == r) cout << "YES\
212	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(0); cin.tie(0); int n, m; cin >> n >> m; vector<string> mp(n); for (int i = 0; i < n; i++) cin >> mp[i]; vector<int> bc; for (int i = 0; i < m - 1; i++) { for (int j = 1; j < n; j++) { if (mp[j][i] == 'X' && mp[j - 1][i + 1] == 'X') { bc.push_back(i); break; } } } bc.push_back(n + 1); int q; cin >> q; while (q--) { int li, ri; cin >> li >> ri; li--; ri--; int l = 0, r = bc.size() - 1; while (l!= r) { int m = (l + r) / 2; if (li <= bc[m]) r = m; else l = m + 1; } if (bc[l] + <= ri) cout << "NO\n"; else cout << "YES\n"; } return 0; }
213	#include <bits/stdc++.h> using namespace std; bool com(pair<int, int> x, pair<int, int> y) { if (x.first == y.first) return x.second < y.second; return x.first < y.first; } long long int power(long long int x, long long int y) { long long int prod = 1; while (y) { if (y & 1) prod = (prod * x) % 1000000007; x = (x * x) % 1000000007; y /= 2; } return prod; } const int N = 2e5 + 7; int tc = 1; void solve() { int n; cin >> n; vector<int> ans(n + 1); ans[n] = n; for (int i = n; i > 1; i--) { cout << "? "; for (int j = 1; j < n; j++) { cout << << " "; } cout << i << endl; int x; cin >> x; if (x == 0) continue; ans[n] = n + - i; break; } for (int i = n - 1; i > 0; i--) { if (ans[n] == i) continue; cout << "? "; for (int j = 1; j < n; j++) { cout << n + - i << " "; } cout << n + - ans[n] << endl; int x; cin >> x; ans[x] = i; } cout << "! "; for (int i = 1; i <= n; i++) cout << ans[i] << " "; cout << endl; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t = 1; while (t--) solve(); return 0; }
214	#include <bits/stdc++.h> using namespace std; const int N = 110; int n, a[N], b[N], pos, lst[N], cnt, last, Last, ans[N]; bool vis[N]; int main() { ios::sync_with_stdio(0); cin >> n; for (int i = n; i >= 1; --i) { if (vis[i]) continue; cnt = 1; pos = i; while (pos) { cnt++; if (cnt == n + 1) { cout << "! "; for (int i = 1; i <= n; ++i) cout << i << " "; cout << endl; return 0; } Last = pos; cout << "? "; for (int j = 1; j < i; ++j) cout << cnt << " "; cout << << " "; for (int j = i + 1; j <= n; ++j) cout << cnt << " "; cout << endl; cout.flush(); cin >> pos; if (pos == i) { lst[last] = pos; break; } else if (pos!= 0) lst[pos] = Last; vis[pos] = 1; } last = i; } int tmp = 0; memset(vis, 0, sizeof(vis)); for (int i = 1; i <= n; ++i) vis[lst[i]] = 1; for (int i = 1; i <= n; ++i) if (!vis[i]) { tmp = i; break; } for (int i = 1; i <= n; ++i) ans[tmp] = i, tmp = lst[tmp]; cout << "! "; for (int i = 1; i <= n; ++i) cout << ans[i] << " "; cout << endl; return 0; }
215	#include <bits/stdc++.h> using namespace std; int query(vector<int>& v) { cout << "? "; for (auto& x : v) { cout << x << " "; } cout << endl; int a; cin >> a; return a; } void solve(int n) { int x = 1; vector<int> v(n, 1); for (int i = n; i >= 2; i--) { for (int j = 0; j < n - 1; j++) { v[j] = i; } int a = query(v); if (a == 0) continue; x = a; break; } vector<int> ans(n, -1); ans[n - 1] = x; for (int i = 0; i < n; i++) { v[i] = x; } for (int i = 1; i <= n; i++) { if (i == x) continue; v[n - 1] = i; int index = query(v); ans[index - 1] = i; } cout << "! "; for (auto& y : ans) { cout << y << " "; } cout << endl; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t = 1; while (t--) { int n; cin >> n; solve(n); } }
216	#include <bits/stdc++.h> using namespace std; void run_case(int test) { int n; cin >> n; auto query = [&](vector<int> a) { cout << "? "; for (int e : a) cout << e <<''; cout << endl; int res; cin >> res; return res - 1; }; vector<int> res(n); for (int i = n; i >= 1; i--) { vector<int> a(n); a[n - 1] = i; for (int j = 0; j + < n; j++) a[j] = 1; int foo = query(a); if (foo == -1) continue; res.back() = n + - i; break; } if (res.back() == 0) res.back() = n; for (int i = 1; i <= n; i++) { if (i == res.back()) continue; int to_n = n + - i; vector<int> a(n, to_n); a.back() = n + - res.back(); int id = query(a); assert(id!= -1); res[id] = i; } cout << "! "; for (int e : res) cout << e <<''; cout << endl; } int32_t main() { ios::sync_with_stdio(false); int tests = 1; for (int test = 1; test <= tests; test++) run_case(test); return 0; }
217	#include <bits/stdc++.h> using namespace std; void solve() { int n, tmp; cin >> n; vector<int> a(n); bool ok = true; int cur = 1; for (int i = 0; i < * n; ++i) { if (!ok && cur >= n) { break; } if (ok && cur >= n) { a[n - 1] = 1; cur = 1; ok = false; } if (ok) { cout << "? "; for (int i = 0; i < n - 1; ++i) { cout << <<''; } cout << + cur << endl; cin >> tmp; if (tmp == 0) { a[n - 1] = n - i; cur = 1; ok = false; continue; } else { a[tmp - 1] = cur; } } else { cout << "? "; for (int i = 0; i < n - 1; ++i) { cout << + cur <<''; } cout << << endl; cin >> tmp; if (tmp!= 0) { a[tmp - 1] = -cur + 1; } } ++cur; } cout << "! "; for (int i = 0; i < n - 1; ++i) { cout << a[n - 1] + a[i] <<''; } cout << a[n - 1] << endl; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int tc = 1; for (int t = 1; t <= tc; t++) { solve(); } }
218	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; const long long INF = 1e18; long long ceel(long long a, long long b) { return ((a + b - 1ll) / b); } void solve() { long long n; cin >> n; string s; long long ans[n + 1]; long long flag = 0; long long x; long long idx = 1; while (idx < n) { cout << "? "; for (long long i = 0; i < n - 1; i++) cout << idx <<''; cout << n << '\n'; cout.flush(); cin >> x; if (x) { break; } idx++; } ans[n] = idx; for (long long i = 1; i < n + 1; i++) { cout << '? '; for (long long i = 0; i < n - 1; i++) { cout << idx << " "; } cout << i << '\n'; cout.flush(); cin >> x; ans[x] = i; } cout << "! "; for (long long i = 0; i < n; i++) { cout << ans[i + 1] << " "; } cout << '\n'; cout.flush(); } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); long long t = 1; for (long long tc = 0; tc < t; tc++) { solve(); } return 0; }
219	#include <bits/stdc++.h> using namespace std; const long long N = 1000004; const long long mod = * * + 7; const long long inf = 1000000000; long long n, m, k, z, t, ans, x, y, pat, a[N], b[N]; int main() { cin >> n; a[n - 1] = 1; for (int x = 2; x <= n; x++) { cout << "? "; for (int j = 1; j < n; ++j) cout << << " "; cout << x << endl; cin >> k; if (k == 0) { a[n - 1] = n - x + 2; break; } } for (int i = 1; i <= n; ++i) { if (i == a[n - 1]) continue; cout << "? "; if (i < a[n - 1]) { for (int j = 1; j < n; ++j) cout << a[n - 1] - i << " "; cout << << endl; } else { for (int j = 1; j < n; ++j) cout << << " "; cout << i - a[n - 1] + << endl; } cin >> k; a[k - 1] = i; } cout << "! "; for (int i = 0; i < n; ++i) cout << a[i] << " "; cout << endl; return 0; }
220	#include <bits/stdc++.h> using namespace std; const int N = 110; const int mod = 1e9 + 7; int n; int ans[N]; int print(int a, int b) { printf("? "); for (int i = 1; i < n; i++) { printf("%d ", a); } printf("%d\n", b); fflush(stdout); int k; scanf("%d", &k); return k; } int main() { scanf("%d", &n); for (int i = 1; i < n; i++) { int k = print(n, i); if (k!= 0) { ans[n] = n - i + 1; break; } } if (ans[n] == 0) ans[n] = 1; int x = n - ans[n] + 1; for (int i = 1; i <= n; i++) { if (i == ans[n]) continue; int k = print(5 - i + 1, x); ans[k] = i; } printf("! "); for (int i = 1; i <= n; i++) { printf("%d ", ans[i]); } }
221	#include <bits/stdc++.h> using namespace std; const int N = 110; int ans[N], n, pos, last; int main() { ios::sync_with_stdio(0); cin >> n; last = n; for (int i = 1; i <= n; ++i) { cout << "? "; for (int j = 1; j < n; ++j) cout << << " "; cout << i + << endl; cout.flush(); cin >> pos; if (pos == 0) break; ans[pos] = i; } for (int i = n; i > 1; --i) { cout << "? "; for (int j = 1; j < n; ++j) cout << n << " "; cout << i - << endl; cout.flush(); cin >> pos; if (!pos) { last = n - i + 1; break; } ans[pos] = i - n - 1; } cout << "! "; for (int i = 1; i <= n; ++i) cout << ans[i] + last << " "; cout << endl; return 0; }
222	#include <bits/stdc++.h> namespace FastRead { char __buff[5000]; int __lg = 0, __p = 0; char nc() { if (__lg == __p) { __lg = fread(__buff, 1, 5000, stdin); __p = 0; if (!__lg) return EOF; } return __buff[__p++]; } template <class T> void read(T& __x) { T __sgn = 1; char __c; while (!isdigit(__c = nc())) if (__c == '-') __sgn = -1; __x = __c - '0'; while (isdigit(__c = nc())) __x = __x * + __c - '0'; __x *= __sgn; } } // namespace FastRead using namespace FastRead; using namespace std; const int N = 3e5 + 10; const int M = 1e9 + 7; const long double PI = acos(-1); mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); int n, q, m, x, y; int root[N], h[N], fr[N]; vector<int> G[N], path[N]; int find(int r) { return (root[r] == r? r : root[r] = find(root[r])); } void unite(int x, int y) { x = root[x]; y = root[y]; if (h[x] < h[y]) root[x] = y; else if (h[x] > h[y]) root[y] = x; else root[x] = y, ++h[y]; } bool dfs(int curr, int parent, int asked, int cnt) { if (curr == asked) { path[cnt].push_back(curr); return 1; } for (auto i : G[curr]) if (i!= parent) { bool ok = dfs(i, curr, asked, cnt); if (ok == 1) { path[cnt].push_back(curr); return 1; } } return 0; } void Test() { int i; cin >> n >> m; for (i = 1; i <= n; i++) path[i].clear(), fr[i
223	#include <bits/stdc++.h> using namespace std; #pragma GCC optimize(2) #pragma GCC optimize(3, "Ofast", "inline") template <typename T> void inline read(T &x) { int f = 1; x = 0; char s = getchar(); while (s < '0' || s > '9') { if (s == '-') f = -1; s = getchar(); } while (s <= '9' && s >= '0') x = x * + (s ^ 48), s = getchar(); x *= f; } template <typename T> void inline put(T x) { if (x < 0) putchar('-'), x = -x; if (x > 9) put(x / 10); putchar(x % + '0'); return; } const int maxn = 1e5 + 5; int n, m, q; int vis[maxn], sum, qx[maxn], qy[maxn]; int e[maxn], nex[maxn], h[maxn], id; int fa[maxn], d[maxn], st[maxn]; void add(int x, int y) { e[++id] = y; nex[id] = h[x]; h[x] = id; } void dfs(int x) { st[x] = 1; for (int i = h[x]; i; i = nex[i]) { int j = e[i]; if (st[j]) continue; d[j] = d[x] + 1; fa[j] = x; dfs(j); } } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= m; i++) { int x, y; cin >> x >> y; add(x, y); add(y, x); } dfs(1); cin >> q; for (int i = 1; i <= q; i++) { int x, y; cin >> x >> y; qx[i] = x; qy[i] = y; vis[x]++; vis[y]++; if (
224	#include <bits/stdc++.h> using namespace std; const int maxn = 3e5 + 7; int n, q, m, k, tot; struct _ { int u, v; } e[maxn]; struct que { int a, b; } qq[maxn]; vector<int> adj[maxn]; int fa[maxn], deg[maxn], dep[maxn]; int get(int x) { return fa[x] == x? x : fa[x] = get(fa[x]); } bool merge(int x, int y) { int fx = get(x), fy = get(y); if (fx ^ fy) { fa[fx] = fy; adj[x].push_back(y); adj[y].push_back(x); return true; } return false; } void dfs(int u) { for (int i = 0; i < adj[u].size(); i++) { int v = adj[u][i]; if (!dep[v]) { fa[v] = u; dep[v] = dep[u] + 1; dfs(v); } } } vector<int> ansl, ansr; int main() { scanf("%d%d", &n, &m); for (int i = 1; i <= m; i++) { scanf("%d%d", &e[i].u, &e[i].v); } scanf("%d", &q); for (int i = 1; i <= q; i++) { scanf("%d%d", &qq[i].a, &qq[i].b); deg[qq[i].a]++; deg[qq[i].b]++; } for (int i = 1; i <= n; i++) { k += (deg[i] & 1); } if (k) { printf("NO\n%d\n", k / 2); return 0; } puts("YES"); for (int i = 1; i <= n; i++) fa[i] = i; int rst = n; for (int i = 1; i <= m; i++) { rst -= merge(e[i].u, e[i].v); if (rst == 1) break; } fa[1] = dep[1] = 1; dfs(1);
225	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; const int inf = 1e9; const double pi = acos(-1); vector<int> eg[300005]; int idx[300005], vis[300005], a[300005], b[300005], c[300005]; vector<int> ans[300005]; vector<int> tmp; int dfsid = 0; struct edge { int to, qid; }; int fa[300005]; int ff(int x) { return fa[x] = (fa[x] == x? x : ff(fa[x])); } int merge(int u, int v) { int fu = ff(u), fv = ff(v); if (fu == fv) return 0; else { fa[fu] = fa[fv]; return 1; } } vector<edge> qeg[300005]; int dfs_rt(int x, int to, int id, int qr) { vis[x] = id; if (x == to) { ans[qr].push_back(x); return 1; } for (int i : eg[x]) { if (vis[i]!= id) { if (dfs_rt(i, to, id, qr)) { ans[qr].push_back(i); return 1; } } } return 0; } int main() { ios::sync_with_stdio(false); cin.tie(0); int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) { idx[i] = vis[i] = 0; fa[i] = i; } for (int i = 1; i <= m; i++) { int u, v; cin >> u >> v; if (merge(u, v)) { eg[u].push_back(v); eg[v].push_back(u); } } int q; cin >> q; for (int o = 1; o <= q; o++) { cin >> a[o] >> b[o]; c[a[o]]++; c[b[o]]++; qeg[a[o]].push_back({b[o], o});
226	#include <bits/stdc++.h> using namespace std; int n, m, q; vector<int> graf[300005]; int cnt[300005]; pair<int, int> kveri[300005]; bool vis[300005]; int cale[300005]; int disc[300005]; int out[300005]; int t; void dfs(int u) { vis[u] = true; disc[u] = t; for (int c : graf[u]) { if (vis[c]) continue; t++; cale[c] = u; dfs(c); } out[u] = t; } bool anc(int x, int y) { return disc[x] <= disc[y] && out[y] <= out[x]; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cin >> n >> m; for (int(i) = (1); (i) <= (m); ++(i)) { int u, v; cin >> u >> v; graf[u].push_back(v); graf[v].push_back(u); } dfs(1); cin >> q; for (int(i) = (1); (i) <= (q); ++(i)) { cin >> kveri[i].first >> kveri[i].second; cnt[kveri[i].first]++; cnt[kveri[i].second]++; } int s = 0; for (int(i) = (1); (i) <= (n); ++(i)) s += (cnt[i] & 1); if (s) { cout << "NO\n" << s; return 0; } cout << "YES\n"; for (int(i) = (1); (i) <= (q); ++(i)) { int a = kveri[i].first; int b = kveri[i].second; vector<int> r; while (!anc(a, b)) { r.push_back(a); a = cale[a]; } r.push_back(a); vector<int> l; while (b!= a) { l.push_back
227	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 10; int n, m, qq; vector<int> to[N], res[N]; int sum[N], up[N], dep[N]; void dfs(int u, int fa) { dep[u] = dep[fa] + 1; up[u] = fa; for (int v : to[u]) if (v!= fa &&!dep[v]) dfs(v, u); } int ss = 0; void calc(int u, int fa) { if (sum[u] & 1) ++ss; for (int v : to[u]) if (v!= fa && dep[v] == dep[u] + 1) calc(v, u); } void solve() { cin >> n >> m; for (int i = 1; i <= n; ++i) { int u, v; cin >> u >> v; to[u].push_back(v); to[v].push_back(u); } dfs(1, 1); cin >> qq; for (int i = 1; i <= qq; ++i) { int u, v; cin >> u >> v; vector<int> tmp; while (dep[v] > dep[u]) { tmp.push_back(v); v = up[v]; } while (dep[u] > dep[v]) { res[i].push_back(u); u = up[u]; } while (u!= v) { res[i].push_back(u); tmp.push_back(v); u = up[u]; v = up[v]; } res[i].push_back(u); for (int j = tmp.size() - 1; j >= 0; --j) res[i].push_back(tmp[j]); for (int j = 0; j < res[i].size(); ++j) { if (j!= && j!= res[i].size() - 1) ++sum[res[i][j]]; ++sum[res[i][j]]; } } calc(1, 1); if (ss) cout << "NO\n" << ss / << '\n'; else { cout << "YES\n"; for (int i = 1
228	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using pii = pair<int, int>; using pll = pair<ll, ll>; mt19937 eng(chrono::steady_clock::now().time_since_epoch().count()); const int N = 3e5 + 4; int n, m, cnt[N]; vector<int> g[N], tree[N]; void read() { cin >> n >> m; for (int i = 0; i < m; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } } bool used[N]; int p[N]; void precalc(int u = 1) { used[u] = true; for (int to : g[u]) if (!used[to]) { tree[u].push_back(to); tree[to].push_back(u); p[to] = u; precalc(to); } } void calc(int u) { while (u) { cnt[u] ^= 1; u = p[u]; } } vector<pii> que; vector<int> way; void dfs(int u, int v, int par = -1) { way.push_back(u); if (u == v) { cout << (int)((way).size()) << "\n"; for (int x : way) cout << x << " "; cout << "\n"; way.pop_back(); return; } for (int to : tree[u]) if (to!= par) { dfs(to, v, u); } way.pop_back(); } int endsCnt(int u) { int cur = cnt[u]; for (int to : tree[u]) if (to!= p[u]) { cur += cnt[to]; } return cur == 1; } void solve() { read(); precalc(); int q; cin >> q; while (q--) { int a, b; cin >> a >> b; que.emplace_back(a, b); calc(a); calc(b); } int ans = 0; for (int i = 1; i <= n; ++i) ans +=
229	#include <bits/stdc++.h> using namespace std; int n, k, tt[100005][14], i, ans, j, gg; void cons(int l, int r, int x, int dep) { if (l == r) { return; } int tmp = (r - l + 1) / k, cc = 0; for (int i = l; i <= r; i += tmp) { ++cc; if (x < i + tmp) { tt[x][dep] = cc; cons(i, i + tmp - 1, x, dep + 1); return; } } } int main() { ios::sync_with_stdio(0); cin >> n >> k; gg = 1; while (gg <= k) gg = gg * k, ++ans; for (i = 1; i <= n; ++i) { cons(1, gg, i, 1); } cout << ans << "\n"; for (i = 1; i <= n; ++i) { for (j = i + 1; j <= n; ++j) { for (k = 1;; ++k) { if (tt[i][k]!= tt[j][k]) { cout << k << " "; break; } } } } }
230	#include <bits/stdc++.h> using namespace std; int n, k, tt[100005][14], i, ans, j, gg; void cons(int l, int r, int x, int dep) { if (l == r) { return; } int tmp = (r - l + 1) / k, cc = 0; for (int i = l; i <= r; i += tmp) { ++cc; if (x < i + tmp) { tt[x][dep] = cc; cons(i, i + tmp - 1, x, dep + 1); return; } } } int main() { ios::sync_with_stdio(0); cin >> n >> k; gg = 1; while (gg <= n) gg = gg * k, ++ans; for (i = 1; i <= n; ++i) { cons(1, gg, i, 1); } cout << ans << "\n"; for (i = 1; i <= n; ++i) { for (j = i + 1; j <= n; ++j) { for (k = 1;; ++k) { if (tt[i][k]!= tt[j][k]) { cout << k << " "; break; } } } } }
231	#include <bits/stdc++.h> template <typename T> bool umin(T &a, const T &b) { return (a > b? a = b, : 0); } template <typename T> bool umax(T &a, const T &b) { return (a < b? a = b, : 0); } using namespace std; const int N = 1001; int n, k; int colors[N][N]; int diff = 0; void slv(vector<vector<int> > sts) { if ((int)(sts).size() == 1) return; int i = 0; diff++; vector<vector<int> > nw; while (i < (int)(sts).size()) { vector<int> current; int l = i, r = min((int)(sts).size(), i + k) - 1; for (int x = l; x <= r; ++x) { for (int y = l + 1; y <= r; ++y) { for (auto &a : sts[x]) { for (auto &b : sts[y]) { colors[a][b] = diff; } } } } for (int x = l; x <= r; ++x) { for (auto u : sts[x]) current.push_back(u); } nw.push_back(current); i = r + 1; } slv(nw); } signed main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> n >> k; vector<vector<int> > sts; for (int i = 0; i < n; ++i) { sts.push_back({i}); } slv(sts); cout << diff << endl; for (int i = 0; i < n; ++i) { for (int j = i + 1; j < n; ++j) { cout << colors[i][j] <<''; } } return 0; }
232	#include <bits/stdc++.h> using namespace std; int n, k, m, cnt, now, A[1000 + 5][1000 + 5], La; int main() { register int i, j; scanf("%d%d", &n, &k); now = 1; while (now <= n) { La = now; now *= k; cnt++; for (i = 1; i <= n; i++) { for (j = (i - 1) / La * La + La + 1; j <= (((i - 1) / now * now + now) < (n)? ((i - 1) / now * now + now) : (n)); j++) A[i][j] = cnt; } } printf("%d\n", cnt); for (i = 1; i <= n; i++) for (j = i + 1; j <= n; j++) printf("%d ", A[i][j]); }
233	#include <bits/stdc++.h> using namespace std; int n, m, ans[1005][1005], cnt; int main() { scanf("%d%d", &n, &m); int s = 1; while (s <= n) { cnt++; s *= m; int res = 0; while (res < n) { for (int i = 1; i <= s && res + i <= n; i++) for (int j = i + 1; j <= s && res + j <= n; j++) if (!ans[res + i][res + j]) ans[res + i][res + j] = cnt; res += s; } } printf("%d\n", cnt); for (int i = 1; i <= n; i++) for (int j = i + 1; j <= n; j++) printf("%d ", ans[i][j]); return 0; }
234	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using uint = unsigned int; using ull = unsigned long long; template <typename T> using pair2 = pair<T, T>; using pii = pair<int, int>; using pli = pair<ll, int>; using pll = pair<ll, ll>; mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count()); ll myRand(ll B) { return (ull)rng() % B; } clock_t startTime; double getCurrentTime() { return (double)(clock() - startTime) / CLOCKS_PER_SEC; } int main() { startTime = clock(); int n, k; scanf("%d%d", &n, &k); int pw = 1; int ans = 0; while (pw < n) { pw *= k; ans++; } printf("%d\n", ans); for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) { int x = i, y = j, z = 1; while (x % k == y % k) { x /= k; y /= k; z++; } printf("%d ", z); } printf("\n"); return 0; }
235	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5, mod = 1e9 + 7; int n, q, x, a[N], b[N], f[N], d[N], g[N], dp[N], t[N], ans; multiset<int> s; void M(int x, int y) { for (; x <= * n; x += x & -x) (t[x] += y) %= mod; } int Q(int x) { int ret = 0; for (; x; x -= x & -x) (ret += t[x]) %= mod; return ret; } int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d%d", &a[i], &b[i]), f[i] = i; sort(f + 1, f + n + 1, [&](int x, int y) { return a[x] < a[y]; }); scanf("%d", &q); for (int i = 1; i <= q; i++) scanf("%d", &x), d[x] = 1, s.insert(b[x]); for (int i = 1; i <= q; i++) { x = f[i]; g[x] =!s.empty() && b[x] <= *s.rbegin(); if (d[x]) s.erase(s.find(b[x])); } for (int i = 1; i <= n; i++) x = f[i], M(b[x], dp[x] = (mod + g[x] + Q(2 * n) - Q(b[x])) % mod), (ans += dp[x]) %= mod; printf("%d\n", ans); return 0; }
236	#include <bits/stdc++.h> const int md = 1000000007; inline int add(int a, int b) { a += b; if (a >= md) a -= md; return a; } inline int sub(int a, int b) { a -= b; if (a < 0) a += md; return a; } const int N = 200000; int t, n, s[N], ord[N << 1], suf[N], b[N << 1]; std::pair<int, int> a[N]; bool s_cmp(int x, int y) { return a[x].first < a[y].first; } void inc(int i, int d) { while (i < * n) { b[i] = add(b[i], d); i |= i + 1; } } int get(int i) { int s = 0; while (i >= 0) { s = add(s, b[i]); i = (i & i + 1) - 1; } return s; } int main() { scanf("%d", &n); for (int i = 0; i < n; ++i) { scanf("%d%d", &a[i].first, &a[i].second); --a[i].first; --a[i].second; ord[a[i].first] = ord[a[i].second] = i; } scanf("%d", &t); for (int i = 0; i < t; ++i) { scanf("%d", s + i); --s[i]; } std::sort(s, s + t, s_cmp); for (int i = t - 1; i >= 0; --i) { if (i == t - || a[s[i]].second > a[suf[i + 1]].second) suf[i] = s[i]; else suf[i] = suf[i + 1]; } std::vector<std::pair<int, int> > qr; int last = 0; for (int i = 0; i < t;) { qr.push_back(std::make_pair(a[suf[i]].second, last)); last = a[suf[i]].first + 1; while (
237	#include <bits/stdc++.h> using namespace std; int abc; mt19937 rnd((unsigned long long)(new char)); int rd(int l, int r) { uniform_int_distribution<> ee(l, r); return ee(rnd); } const int mxn = 4e5 + 3, mod = 1e9 + 7; pair<int, int> ee[mxn]; int n, v1[mxn], v2[mxn], px[mxn], m, v0[mxn], xp[mxn]; bool vs[mxn]; bool cmp1(int x, int y) { return v1[x] < v1[y]; } struct arrrr { long long a[mxn]; void add(int x, int y) { for (; x <= n; x += x & -x) a[x] += y; } long long ask(int x) { long long r = 0; for (; x; x &= x - 1) r += a[x], r %= mod; return r; } } ar; set<int> st; int main() { cin >> n; for (int i = 1; i <= n; ++i) abc = scanf("%d%d", v1 + i, v2 + i), ee[i].first = v2[i], ee[i].second = v1[i]; sort(ee + 1, ee + n + 1); cin >> m; for (int i = 1; i <= m; ++i) abc = scanf("%d", v0 + i), v0[i] = v1[v0[i]]; for (int i = 1; i <= n; ++i) v1[i] = ee[i].second, v2[i] = ee[i].first, px[i] = i; sort(px + 1, px + m + 1, cmp1); for (int i = 1; i <= n; ++i) xp[v1[i]] = i; for (int i = 1; i <= m; ++i) st.insert(xp[v0[i]]); for (int t = 1; t <= n && st.size(); ++t) if (*--st.end() >= px[t]) st.er
238	#include <bits/stdc++.h> using namespace std; const int N = 2100, rev[4] = {0, 2, 1, 3}; int n; char a[N][N]; int tag[N]; int id[N][N]; void dye(int n) { for (int i = 1, c = 1; i <= 9; i += 2, c += 2) { id[i][1] = id[1][i] = id[1][i + 1] = id[i + 1][1] = c; for (int j = 2; j < i; j++) id[j][i + - j] = c + (1 ^ j & 1); for (int j = 2; j <= n - i + 1; j++) id[i + j][j] = id[j][i + j] = c + (1 ^ j & 1); } for (int i = 1; i <= n; i++) for (int j = 1; j <= n - i + 1; j++) id[n - i + 1][n - j + 1] = id[i][j]; } int main() { scanf("%d", &n); if (n & 1) { puts("NONE"); return 0; } dye(n); for (int i = 1; i <= n; i++) { scanf("%s", a[i] + 1); for (int j = 1; j <= n; j++) if (a[i][j]!= '.') { tag[id[i][j]] |= << (a[i][j] == 'S'); } } for (int i = 1; i <= n; i += 2) { int &x = tag[i], &y = tag[i + 1]; y = rev[x |= rev[y]]; } int flag = 0; for (int i = 1; i <= n; i++) { if (tag[i] == 3) { puts("NONE"); return 0; } if (!tag[i]) flag = 1; } if (flag) { puts("MULTIPLE"); return 0; } puts("UNIQUE"); for (int i = 1; i <= n; i++, puts("")) for (int j = 1; j <= n; j++) putchar(tag[id[i][
239	#include <bits/stdc++.h> using namespace std; template <typename T> bool chkmin(T &x, T y) { return x > y? x = y, : 0; } template <typename T> bool chkmax(T &x, T y) { return x < y? x = y, : 0; } int readint() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } return x * f; } int n; int a[2005][2005], res[1005]; char s[2005][2005]; int main() { n = readint(); for (int i = 1; i <= n; i++) scanf("%s", s[i] + 1); if (n & 1) { printf("NONE\n"); return 0; } n >>= 1; for (int i = 1; i <= n; i++) a[i][i] = i; for (int i = n + 1; i <= n + n; i++) a[i][i] = n + n - i + 1; for (int i = 2; i <= n + n; i++) { if (i & 1) { for (int j = i; j <= n + n; j++) a[j][j - i + 1] = -a[j - 1][j - i + 2]; } else { a[i][1] = a[i - 1][1]; for (int j = i + 1; j <= n + n; j++) a[j][j - i + 1] = -a[j - 1][j - i]; } } for (int i = 1; i <= n + n; i++) for (int j = i + 1; j <= n + n; j++) a[i][j] = a[j][i]; for (int i = 1; i <= n + n; i++) res[i] = -1; for (int i = 1; i <= n + n; i++) { for (int j = 1
240	#include <bits/stdc++.h> using namespace std; const int N = 2002; int a[N][N]; char b[N][N], color[N / 2]; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; if (n & 1) { cout << "NONE" << endl; return 0; } for (int j = 0; j < n; j++) { a[0][j] = a[n - 1][n - j - 1] = a[j][0] = a[n - j - 1][n - 1] = j / 2; b[0][j] = b[n - 1][n - j - 1] = b[j][0] = b[n - j - 1][n - 1] = 1; if (j == || j == n - 1) continue; a[1][j] = j &? (j + 1) / : (j - 1) / 2; b[1][j] = 0; } for (int i = 2; i < n - 1; ++i) { for (int j = 1; j < n - 1; ++j) { if (a[i - 2][j] == a[i - 1][j - 1]) { a[i][j] = a[i - 1][j + 1]; } else { a[i][j] = a[i - 1][j - 1]; } } } memset(color, -1, sizeof(color)); bool flag = true; for (int i = 0; i < n; ++i) { for (int j = 0; j < n; ++j) { char c; cin >> c; int col = (c == 'S'); if (i > && i < n - && j > && j < n - 1) { if (a[i][j] == a[i - 1][j - 1] && a[i][j] == a[i + 1][j + 1]) { b[i][j] = ^ b[i - 1][j - 1]; } else { b[i][j] = ^ b[i - 1][j + 1]; } } if
241	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e3 + 5; int n; char s[MAXN][MAXN]; int f[MAXN]; inline pair<int, int> get(int x, int y, int k) { if (x == 1) { if (y % 2) ++y; return make_pair(y, k); } if ((x + y) % 2) { int t = min(x - 1, y - 1); x -= t; y -= t; k ^= t & 1; } else { int t = min(x - 1, n - y); x -= t; y += t; k ^= t & 1; } if (x!= 1) x = n - x + 1, y = n - y + 1; return get(x, y, k); } int main(void) { scanf("%d", &n); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); if (n % 2) return printf("NONE"), 0; memset(f, -1, sizeof(f)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (s[i][j]!= '.') { pair<int, int> res = get(i, j, s[i][j] == 'G'); int y = res.first, k = res.second; if (f[y] == -1) f[y] = k; else if (f[y]!= k) return printf("NONE"), 0; } for (int i = 2; i <= n; i += 2) if (f[i] == -1) return printf("MULTIPLE"), 0; printf("UNIQUE\n"); for (int i = 1; i <= n; ++i, putchar('\n')) for (int j = 1; j <= n; ++j) { pair<int, int> res = get(i, j, 0); int k = f[res.first] ^ res.second; putchar("GS"[k]); } return 0; }
242	#include <bits/stdc++.h> using namespace std; int main() { int t, i = 0, c = 0; cin >> t; for (; i < t; i++) { c = 0; int n; cin >> n; int a[n]; for (int j = 0; j < n; j++) { cin >> a[j]; } if (a[0] == 1) c++; for (int k = 1; k < n; k++) { if (a[k] == && a[k - 1] == 0) c++; else if (a[k] == && a[k - 1] == 1) c = c + 5; else if (a[k] == && a[k - 1] == 1) ; else if (a[k] == && a[k - 1] == 0) { c = -1; break; } } cout << c << endl; } }
243	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> v; int sum = 1; for (int i = 0; i < n; i++) { int a; cin >> a; v.push_back(a); } int count0 = 0, count1 = 0; for (int i = 0; i < n; i++) { if (v[i] == 1) { count1++; if (count1 == 2) { sum = sum + 4; } sum++; count0 = 0; } else if (v[i] == 0) { count0++; if (count0 == 2) { sum = -1; break; } count1 = 0; } } cout << sum << endl; } return 0; }
244	#include <bits/stdc++.h> using namespace std; const int N = 110; int n; int a[N]; void solve() { scanf("%d", &n); int now = 1; for (int i = 1; i <= n; i++) scanf("%d", &a[i]); if (n == 1) { if (a[1] == 1) printf("2\n"); else printf("1\n"); return; } if (a[1] == 1) now++; for (int i = 2; i <= n; i++) { if (a[i] == && a[i - 1] == 0) { now = -1; printf("%d\n", now); return; } if (a[i] == 0) continue; if (a[i] == && a[i - 1] == 1) now += 5; else now++; } printf("%d\n", now); } int main() { int t; scanf("%d", &t); while (t--) { solve(); } return 0; }
245	#include <bits/stdc++.h> using namespace std; int n, t, v; int arr[100]; void cf() { cin >> n; v = 0; for (int i = 0; i < n; ++i) { cin >> arr[i]; } for (int i = 0; i < n - 1; ++i) { if (arr[i] == && arr[i + 1] == 0) { cout << -1 << endl; v = 1; } } int ans = 1; if (v == 0) { ans += arr[0]; for (int i = 1; i < n; ++i) { if (arr[i] == 1) { ans += arr[i] + * arr[i - 1]; } } cout << ans << endl; } } int main() { cin >> t; for (int z = 0; z < t; ++z) { cf(); } }
246	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long int n; cin >> n; long long int a[n]; for (int i = 0; i < n; i++) { cin >> a[i]; } long long int count = 0, num = INT_MIN; long long int maxn = *max_element(a, a + n); if (a[n - 1] == maxn) { cout << "0"; } else { for (int i = n - 1; i >= 0; i--) { if (a[i] == maxn) { break; } else if (a[i] > num) { count++; num = a[i]; } } cout << count << endl; } } }
247	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(false); cin.tie(0); int tt; cin >> tt; while (tt--) { int n; cin >> n; int a[n]; int itr, maxa = 0; for (int i = 0; i < n; i++) { cin >> a[i]; if (a[i] >= maxa) { maxa = a[i]; itr = i; } } int br = 0, maxbr = a[n - 1]; for (int i = n - 1; i > itr; i--) { if (maxbr <= a[i]) br++; maxbr = max(a[i], maxbr); } cout << br << "\n"; } return 0; }
248	#include <bits/stdc++.h> using namespace std; int t, n, ans, mpos; struct node { int a, id; } x[200100]; bool cmp(node a, node b) { return a.a < b.a; } int main() { cin >> t; while (t--) { cin >> n; ans = 0; for (int i = 1; i <= n; i++) { cin >> x[i].a; x[i].id = i; } sort(x + 1, x + n + 1, cmp); mpos = x[n].id; for (int i = n - 1; i >= 1; i--) { if (x[i].id > mpos) { ans++; mpos = x[i].id; } } cout << ans << endl; } return 0; }
249	#include <bits/stdc++.h> using namespace std; int t, n, ans, mpos; struct node { int a, id; } x[200010]; bool cmp(node a, node b) { return a.a < b.a; } int main() { cin >> t; while (t--) { cin >> n; ans = 0; for (int i = 1; i <= n; i++) { cin >> x[i].a; x[i].id = i; } sort(x + 1, x + n + 1, cmp); mpos = x[n].id; for (int i = n - 1; i >= 1; i--) { if (x[i].id > mpos) { ans++; mpos = x[i].id; } } cout << ans << endl; } return 0; }
250	#include <bits/stdc++.h> using namespace std; const long long mod = 1000000007; const int64_t longinf = LLONG_MAX - 100000; const long long inf = INT_MAX; long long pw(long long x, long long y, long long p = longinf) { long long res = 1; x = x % p; if (x == 0) return 0; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } long long invmod(long long a, long long m = mod) { return pw(a, m - 2, m); } long long cl(long long a, long long x) { return a % x ==? a / x : a / x + 1; } void run_time_terror(long long case_no = 0) { long long n; cin >> n; vector<long long> a(n); for (long long i = 0; i < n; ++i) { cin >> a[i]; } long long mx = -1; for (long long i = 0; i < n; ++i) { mx = max(mx, a[i]); } vector<long long> b; b.push_back(a[0]); for (long long i = 1; i < n; ++i) { while (b.size() and b.back() < a[i]) { b.pop_back(); } b.push_back(a[i]); } cout << b.size() - << "\n"; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0), cout.tie(0), cout.setf(ios::fixed); cout << setprecision(0); long long tt = 1; cin >> tt; for (long long case_no = 1; case_no <= tt; case_no++) { run_time_terror(case_no); } return 0; }
251	#include <bits/stdc++.h> using namespace std; void solve() { long long n, cnt = 0; cin >> n; int arr[n]; for (int(i) = (0); (i) < (n); ++(i)) { cin >> arr[i]; } long long x = arr[n - 1]; for (int i = n - 2; i >= 0; i--) { if (arr[i] > x) { cnt++; x = arr[i]; } if (i == 0) { cout << cnt; return; } } } int main() { long long t; cin >> t; while (t--) { solve(); cout << endl; } return 0; }
252	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long int n; cin >> n; ; long long int k; cin >> k; ; int a[n]; for (int i = 0; i < n; i++) cin >> a[i]; ; vector<int> v, r; for (int i = 0; i < n; i++) { if (a[i] > 0) v.push_back(a[i]); else r.push_back(abs(a[i])); } sort(v.begin(), v.end()); sort(r.begin(), r.end()); int w = v.size(), y = r.size(); long long int ans = 0; int i = w - 1, i1 = y - 1; while (1) { if (i < 0) break; if (i == w - && (y > && w > && v[w - 1] > r[y - 1])) ans += v[i]; else if (i == w - && y == 0) ans += v[i]; else ans += * v[i]; i = i - k; if (i < 0) break; } while (1) { if (i1 < 0) break; if (i1 == y - && (y > && w > && v[w - 1] < r[y - 1])) ans += r[i1]; else if (i1 == y - && w == 0) ans += r[i1]; else ans += * r[i1]; i1 = i1 - k; if (i1 < 0) break; } cout << ans << endl; } }
253	#include <bits/stdc++.h> using namespace std; const int MAX_N = * 1e5 + 7; const int INF = 1e10 + 7; const int MOD = 1e9 + 7; const int LOG = 22; long long a[MAX_N]; int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { long long n, k; cin >> n >> k; for (int i = 0; i < n; i++) cin >> a[i]; sort(a, a + n); vector<long long> v; long long ans = 0, p = 0; for (int i = 0; i < n; i++) { if (a[i] >= 0) { p = i; break; } } long long MIN = INF, MAX = 0; for (int i = 0; i < p; i += k) { MIN = INF; if (i + k - >= p) { for (int j = i; j < p; j++) MIN = min(MIN, a[j]); } else { for (int j = i; j < i + k; j++) MIN = min(MIN, a[j]); } v.push_back(abs(MIN)); } for (int i = n - 1; i >= p; i -= k) { MAX = 0; if (i - k + < p) { for (int j = i; j >= p; j--) MAX = max(MAX, a[j]); } else { for (int j = i; j > i - k; j--) MAX = max(MAX, a[j]); } v.push_back(MAX); } sort(v.begin(), v.end()); for (long long x : v) ans += (2 * x); ans -= v[v.size() - 1]; cout << ans << '\n'; v.clear(); } }
254	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("avx,avx2,fma") #pragma GCC optimization("unroll-loops") using namespace std; long long merge(long long arr[], long long l, long long mid, long long r) { long long ans = 0; long long n1 = mid - l + 1; long long n2 = r - mid; long long a[n1]; long long b[n2]; for (long long i = 0; i < n1; i++) { a[i] = arr[l + i]; } for (long long i = 0; i < n2; i++) { b[i] = arr[mid + + i]; } long long i = 0; long long j = 0; long long k = l; while (i < n1 && j < n2) { if (a[i] <= b[j]) { arr[k] = a[i]; k++; i++; } else { ans += n1 - i; arr[k] = b[j]; k++; j++; } } while (i < n1) { arr[k] = a[i]; k++; i++; } while (j < n2) { arr[k] = b[j]; k++; j++; } return ans; } long long inversion_count(long long arr[], long long l, long long r) { long long ans = 0; if (l < r) { long long mid = (l + r) / 2; ans += inversion_count(arr, l, mid); ans += inversion_count(arr, mid + 1, r); ans += merge(arr, l, mid, r); } return ans; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; long long v[n]; for (long long i = 0; i < n; i++) cin >> v[i]; bool ans = false; long long inv = inversion_count(v, 0, n); if (inv % == 0
255	#include <bits/stdc++.h> using namespace std; const int maxn = + 50; int T, n, h[maxn], f[maxn], tot, ti[maxn]; int ans, sum; int main() { scanf("%d", &T); for (int oo = 1; oo <= T; ++oo) { scanf("%d", &n); tot = 0; vector<bool> used(n); vector<set<int>> gi(n), ed(n); vector<int> seet; ans = 0, sum = 0; for (int i = 0; i < n; i++) f[i] = 0; for (int i = 0; i < n; i++) { scanf("%d", &h[i]); tot = max(tot, f[--h[i]]++); } for (int i = 0; i < n; ++i) ti[i] = h[i]; sort(h, h + n); for (int i = 0; i < n; i++) if (h[i]!= ti[i]) gi[ti[i]].insert(i), seet.push_back(i), ed[h[i]].insert(i); function<void(int)> dfs = [&](int u) { ed[h[u]].erase(u); sum++; gi[ti[u]].erase(u); if (!ed[ti[u]].empty()) dfs(*ed[ti[u]].begin()); }; for (int i : seet) if (gi[ti[i]].count(i)) { sum = 0; dfs(i); if (sum % == 0) ++ans; } bool p = 1; if (tot > || ans % == 0) p = 0; if (!p) printf("YES\n"); else printf("NO\n"); } return 0; }
256	#include <bits/stdc++.h> using namespace std; const int maxn = 5e5 + 5; int d[maxn]; unordered_map<int, int> mp; struct node { int id; int va; }; vector<node> vec; bool cmp(node a, node b) { return a.va < b.va; } bool vis[maxn]; int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { vec.clear(); mp.clear(); int n; cin >> n; for (int i = 1; i <= n; i++) { int x; cin >> x; mp[x]++; vis[i] = 0; vec.push_back({i, x}); } bool flag = false; for (auto i : mp) { if (i.second >= 2) { cout << "NO" << '\n'; ; flag = true; break; } } if (flag) continue; sort(vec.begin(), vec.end(), cmp); for (int i = 0; i < n; i++) { d[vec[i].id] = i + 1; } int cnt = 0; for (int i = 1; i <= n; i++) { if (vis[i]) continue; int to = i; vis[to] = true; to = d[to]; int ta = 1; while (to!= i) { vis[to] = true; ta++; to = d[to]; } if (ta & 1) ; else cnt++; } cout << ((cnt & 1)? "NO" : "YES") << '\n'; ; } return 0; }
257	#include <bits/stdc++.h> using namespace std; const long long NMX = 432000, oo = 0x3C3C3C3C3C3C3C3C, Bs = 1000000007; long long q, n, a[NMX], A[NMX], kq; bool dd[NMX], YES; void update(long long x) { while (x > 0) { A[x]++; x -= ((x) & (-(x))); } } long long get(long long x) { long long res = 0; while (x < NMX) { res += A[x]; x += ((x) & (-(x))); } return res; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); cin >> q; while (q--) { cin >> n; for (int i = 1; i <= (int)(n); i++) { cin >> a[i]; A[i] = 0; dd[i] = false; } YES = false; for (int i = 1; i <= (int)(n); i++) { if (dd[a[i]]) { cout << "YES\n"; YES = true; break; } dd[a[i]] = true; } if (YES) continue; kq = 0; for (int i = 1; i <= (int)(n); i++) { kq += get(a[i] + 1); update(a[i]); } cout << (kq % ==? "YES\n" : "NO\n"); } return 0; }
258	#include <bits/stdc++.h> using namespace std; template <class c> struct rge { c b, e; }; template <class c> rge<c> range(c i, c j) { return rge<c>{i, j}; } template <class c> auto dud(c *x) -> decltype(cerr << *x, 0); template <class c> char dud(...); struct debug { template <class c> debug &operator<<(const c &) { return *this; } }; template <typename T> void read(T &x) { cin >> x; } template <typename T, typename U> void read(T &x, U &y) { cin >> x >> y; } template <typename T> void read(vector<T> &a) { for (T &x : a) read(x); } template <typename T> T cd(T u, T v) { return (u + v - 1) / v; } void solve() { long long n; read(n); vector<long long> a(n); read(a); auto v = a; sort(v.begin(), v.end()); if (n <= 2) { cout << (a == v? "YES\n" : "NO\n"); return; } map<long long, set<long long>> mp; for (long long i = 0; i < n; i++) mp[a[i]].insert(i); for (long long i = 0; i < n - 2; i++) { if (a[i] == v[i]) { mp[a[i]].erase(i); } else { long long j = *mp[v[i]].begin(); long long k = (j == n - 1)? n - : n - 1; mp[a[i]].erase(i); mp[a[k]].erase(k); mp[a[j]].erase(j); long long temp = a[i]; a[i] = a[j]; a[j] = a[k]; a[k] = temp; mp[a[k]].insert(k); mp[a[j]].insert(j); assert(set<long long>({
259	#include <bits/stdc++.h> using namespace std; mt19937 rnd; struct node { node *l = 0, *r = 0; int x, y, siz; node(int x) : x(x), y(rnd()), siz(1) {} }; int size(node *t) { if (!t) return 0; return t->siz; } void update(node *t) { t->siz = size(t->l) + size(t->r) + 1; } pair<node *, node *> split(node *t, int x) { if (!t) return {0, 0}; if (t->x <= x) { auto p = split(t->r, x); t->r = p.first; update(t); return {t, p.second}; } else { auto p = split(t->l, x); t->l = p.second; update(t); return {p.first, t}; } } node *merge(node *a, node *b) { if (!a) return b; if (!b) return a; if (a->y > b->y) { a->r = merge(a->r, b); update(a); return a; } else { b->l = merge(a, b->l); update(b); return b; } } node *insert(node *t, node *in) { if (!t) return in; if (in->y > t->y) { auto p = split(t, in->x); in->l = p.first; in->r = p.second; update(in); return in; } if (in->x < t->x) { t->l = insert(t->l, in); } else { t->r = insert(t->r, in); } update(t); return t; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; for (int useless = 0; useless < t; useless++) { int n; cin >> n; vector<int> a(n); for (int i = 0; i < n; i++) cin >> a[i]; node *t = 0
260	#include <bits/stdc++.h> using namespace std; template <class T> T read() { T re = 0; char c = getchar(); bool negt = false; while (c < '0' || c > '9') negt |= (c == '-'), c = getchar(); while (c >= '0' && c <= '9') re = (re << 1) + (re << 3) + c - '0', c = getchar(); return negt? -re : re; } const int N = 2e5 + 10; int a[N], b[N]; long long cnt1[N], cnt2[N]; map<pair<int, int>, int> cnt3; int n; void solve() { long long ans = 0; n = read<int>(); for (int i = 1; i <= n; i++) a[i] = read<int>(), b[i] = read<int>(); for (int i = 1; i <= n; i++) cnt1[i] = cnt2[i] = 0; for (int i = 1; i <= n; i++) ++cnt1[a[i]], ++cnt2[b[i]], ++cnt3[make_pair(a[i], b[i])]; long long add = 0; add += n * (n - 1) * (n - 2) / 6; for (int i = 1; i <= n; i++) if (cnt1[i]!= 0) { add -= (cnt1[i] - 1) * cnt1[i] * (n - cnt1[i]) / 2; add -= (cnt1[i] - 2) * (cnt1[i] - 1) * cnt1[i] / 6; } add += n * (n - 1) * (n - 2) / 6; for (int i = 1; i <= n; i++) if (cnt2[i]!= 0) { add -= (cnt2[i] - 1) * cnt2[i] * (n - cnt2[i]) / 2; add -= (cnt2[i] - 2) * (cnt2[i] - 1) * cnt2[i] / 6; } long long minus = n * (n - 1) * (n
261	#include <bits/stdc++.h> constexpr int maxn = 2e5 + 5; constexpr int inf = 1e9; constexpr int mod = 1e9 + 7; using namespace std; using lint = long long; using pii = pair<int, int>; int t, n, a[maxn], b[maxn]; lint ans; map<int, int> ma, mb; signed main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cin >> t; while (t--) { cin >> n; for (int i = 0; i < n; i++) { cin >> a[i] >> b[i]; ma[a[i]]++; mb[b[i]]++; } ans = 1ll * n * (n - 1) * (n - 2) / 6; for (int i = 0; i < n; i++) ans -= (ma[a[i]] - 1) * (mb[b[i]] - 1); cout << ans << '\n'; ma.clear(); mb.clear(); } }
262	#include <bits/stdc++.h> using namespace std; using i64 = long long; using u64 = unsigned long long; using u32 = unsigned int; void solve() { i64 n; cin >> n; map<int, set<int>> m; vector<int> A(n + 1, 0), B(n + 1, 0); for (int i = 0; i < n; ++i) { int a, b; cin >> a >> b; m[a].insert(b); A[a]++; B[b]++; } i64 count = n * (n - 1) * (n - 2) / 6; vector<int> sum(n + 1, 0); for (auto& [a, s] : m) { for (int b : s) { count -= (s.size() - 1) * (A[b] - 1); } } cout << count << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int T = 1; cin >> T; for (int i = 1; i <= T; ++i) solve(); return 0; }
263	#include <bits/stdc++.h> using namespace std; using i64 = long long; using u64 = unsigned long long; using u32 = unsigned int; void solve() { int n; cin >> n; map<int, set<int>> m; vector<int64> A(n + 1, 0), B(n + 1, 0); for (int i = 0; i < n; ++i) { int a, b; cin >> a >> b; m[a].insert(b); A[a]++; B[b]++; } i64 count = n * (n - 1) * (n - 2) / 6; vector<int> sum(n + 1, 0); for (auto& [a, s] : m) { for (int b : s) { count -= (s.size() - 1) * (A[b] - 1); } } cout << count << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int T = 1; cin >> T; for (int i = 1; i <= T; ++i) solve(); return 0; }
264	#include <bits/stdc++.h> using namespace std; using ll = long long; int main() { int t; cin >> t; while (t--) { ll n; cin >> n; ll ans = n * (n - 1) * (n - 2); ans /= 6; map<ll, ll> m_a; map<ll, ll> m_b; vector<pair<ll, ll>> v(n); for (int i = 0; i < n; ++i) { cin >> v[i].first >> v[i].second; m_a[v[i].first]++; m_b[v[i].second]++; } ll elem = 0; for (int i = 0; i < n; ++i) { elem += (m_a[v[i].first] - 1) * (m_b[v[i].second] - 1); } ans -= elem; cout << ans << '\n'; } }
265	#include <bits/stdc++.h> const int INF = 1e8; const long long MOD = 1e9 + 7; using namespace std; bool cases = 1; long long x[200005]; long long y[200005]; void solve(int nc) { long long n, a, b; cin >> n; vector<pair<int, int> > v; long long xd = 0, yd = 0; for (int i = 0; i < n; i++) { cin >> a >> b; v.push_back(pair<int, int>(a, b)); if (x[a] == 0) xd++; if (y[b] == 0) yd++; x[a]++; y[b]++; } long long ans = n * (n - 1) * (n - 2) / 6; for (int i = 0; i < n; i++) { a = v[i].first, b = v[i].second; ans -= (x[a] - 1) * (y[b] - 1); } for (int i = 0; i < n; i++) { a = v[i].first, b = v[i].second; x[a] = y[b] = 0; } cout << ans; cout << "\n"; } int main() { ios::sync_with_stdio(0); cin.tie(0); int t = 1; if (cases) cin >> t; for (int nc = 1; nc < t + 1; nc++) solve(nc); return 0; }
266	#include <bits/stdc++.h> using namespace std; clock_t time_p = clock(); void time_taken() { time_p = clock() - time_p; cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n"; } const long long mod = 1e9 + 7; const long long INF = 1e18; const int N = 1004; long long dp[N][N][2]; int main() { ios_base::sync_with_stdio(false), cin.tie(nullptr); int n, m, q; cin >> n >> m >> q; vector<vector<int> > a(n, vector<int>(m)); memset(dp, 0, sizeof(dp)); dp[n - 1][m - 1][1] = 1; dp[n - 1][m - 1][0] = 1; long long ans = 0; for (int i = n - 1; i >= 0; i--) { for (int j = m - 1; j >= 0; j--) { dp[i][j][0] = 1; if (j + < m) dp[i][j][0] += dp[i][j + 1][1]; dp[i][j][1] = 1; if (i + < n) dp[i][j][1] += dp[i + 1][j][0]; ans += (dp[i][j][0] + dp[i][j][1] - 1); } }; auto upd = [&](int r, int c, int delta) { if (delta == 0) return; ans += delta; dp[r][c][0] += delta; r--; while (r >= and c >= 0) { if (a[r][c] == 1) return; dp[r][c][1] += delta; ans += delta; if (c) { if (a[r][c - 1] == 1) return; dp[r][c - 1][0] += delta; ans += delta; } c--; r--; } }; while (q--) { int r, c; cin >> r >> c, --r, --c; a[r][c] ^= 1; int delta =
267	#include <bits/stdc++.h> using namespace std; int n, m, q; int mmp[1010][1010]; long long ans = 0; int main() { ios::sync_with_stdio(false); cin >> n >> m >> q; long long A = min(m, n), D = (m - n > 0)? (m - n) : (n - m); ans = 2ll * (A - 1ll) * (A) * (2ll * A - 1ll) / 3ll + A * (A - 1ll) + D * A * (2ll * A - 1ll) + 1ll * n * m; int x, y; for (int i = 1; i <= q; i++) { cin >> x >> y; int xt = x, yt = y; long long up = 0, down = 0; for (int j = 1; j > -1; j++) { if (((j & 1)!= 0) && mmp[xt - 1][yt] == && xt - >= 1) xt--; else if (((j & 1) == 0) && mmp[xt][yt - 1] == && yt - >= 1) yt--; else break; up++; } xt = x, yt = y; for (int j = 0; j >= -1; j++) { if (((j & 1)!= 0) && mmp[xt + 1][yt] == && xt + <= n) xt++; else if (((j & 1) == 0) && mmp[xt][yt + 1] == && yt + <= n) yt++; else break; down++; } if (mmp[x][y]) ans += (1ll * up * down + up + down + 1); else ans -= (1ll * up * down + up + down + 1); xt = x, yt = y; up = 0, down = 0; for (int j = 0; j > -1; j++) { if (((j & 1)!= 0) && mmp[xt - 1][yt] == && xt - >= 1) xt--; else if (((j & 1) == 0) && mmp[xt][yt - 1] == &&
268	#include <bits/stdc++.h> using namespace std; const long long N = 1005; long long n, m, q, ans; bool vizitat[N][N]; long long dp[N][N][2]; bool verifica(long long i, long long j) { if (i < || j < || i > n || j > m) return false; return true; } long long cnt(long long i, long long j) { long long answer = 0; for (long long it = 0; it <= 1; it++) { long long up = 0; long long lin = i; long long col = j; while (verifica(lin, col) && vizitat[lin][col] == false) { if (up % == it) { lin--; } else { col--; } up++; } long long down = 0; lin = i; col = j; while (verifica(lin, col) && vizitat[lin][col] == false) { if (down % == it) { lin++; } else { col++; } down++; } answer += up * down; } answer--; return answer; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> n >> m >> q; for (long long i = 1; i <= n; i++) { for (long long j = 1; j <= m; j++) { dp[i][j][1] = dp[i][j - 1][0] + 1; dp[i][j][0] = dp[i - 1][j][1] + 1; ans += dp[i][j][1]; ans += dp[i][j][0]; } } ans -= n * m; while (q--) { long long lin, col; cin >> lin >> col; if (vizitat[lin][col] == true) { vizitat[lin][col] = false; ans += cnt(lin, col); } else { ans -= cnt(lin, col); vizitat[lin][col] = true; } cout << ans << '\n'; } return 0; }
269	#include <bits/stdc++.h> using namespace std; int n, m, a[1005][1005], f[1005][1005], ans; inline bool in(int x, int l, int r) { return l <= x && x <= r; } int calc(int x, int y, int dx, int dy, int t) { if (t == 0) dx = -dx, y = -dy; int cnt = 0; while (in(x + dx, 1, n) && in(y + dy, 1, m)) { x += dx, y += dy; if (!a[x][y]) break; ++cnt; if (dx!= 0) dy = dx, dx = 0; else dx = dy, dy = 0; } return cnt; } signed main() { int q; cin >> n >> m >> q; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = 1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) ans += + calc(i, j, 0, 1, 1) + calc(i, j, 1, 0, 1); while (q--) { int i, j; cin >> i >> j; int sum = (1 + calc(i, j, 0, 1, 1)) * (1 + calc(i, j, 1, 0, 0)) + (1 + calc(i, j, 1, 0, 1)) * (1 + calc(i, j, 0, 1, 0)) - 1; if (a[i][j]) ans -= sum; else ans += sum; a[i][j] ^= 1; cout << ans << "\n"; } }
270	#include <bits/stdc++.h> using namespace std; int n, m, a[1005][1005], f[1005][1005], ans; inline bool in(int x, int l, int r) { return l <= x && x <= r; } int calc(int x, int y, int dx, int dy, int t) { if (t == 0) dx = -dx, dy = -dy; int cnt = 0; while (in(x + dx, 1, n) && in(y + dy, 1, m)) { x += dx, y += dy; if (!a[x][y]) break; ++cnt; if (dx!= 0) dy = dx, dx = 0; else dx = dy, dy = 0; } return cnt; } signed main() { int q; cin >> n >> m >> q; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = 1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) ans += + calc(i, j, 0, 1, 1) + calc(i, j, 1, 0, 1); while (q--) { int i, j; cin >> i >> j; int sum = (1 + calc(i, j, 0, 1, 1)) * (1 + calc(i, j, 1, 0, 0)) + (1 + calc(i, j, 1, 0, 1)) * (1 + calc(i, j, 0, 1, 0)) - 1; if (a[i][j]) ans -= sum; else ans += sum; a[i][j] ^= 1; cout << ans << "\n"; } }
271	#include <bits/stdc++.h> using namespace std; double startTime; double gct() { return ((double)clock() - startTime) / CLOCKS_PER_SEC; } void suraj(); int main() { startTime = (double)clock(); { suraj(); } return 0; } const long long MOD = 1e9 + 7; const int INF = int(1e9); const int NEG_INF = int(-1e9); void suraj() { long long n, m, q; cin >> n >> m >> q; vector<vector<long long>> free(n + 1, vector<long long>(m + 1, true)); long long stairs = 0; for (long long i = 1; i < n; i++) { for (long long j = 1; j < m; j++) { if (i == 1) { for (long long k = 1;; k++) { long long nx = i + k / 2; long long ny = j + (k + 1) / 2; if (nx > n || ny > m) { stairs += ((k - 1) * ((k - 1) + 1)) / 2; break; } } } if (j == 1) { for (long long k = 1;; k++) { long long nx = i + (k + 1) / 2; long long ny = j + k / 2; if (nx > n || ny > m) { stairs += ((k - 1) * ((k - 1) + 1)) / 2; break; } } } } } stairs += n * m; long long currStairs = stairs; for (long long i = 0; i < q; i++) { long long x, y; cin >> x >> y; free[x][y] =!free[x][y]; long long rd = 0; for (rd = 1;; rd++) { long long nx = x + (rd) / 2; long long ny = y + (rd + 1) / 2; if (nx > n || ny > m ||!free[nx][ny]) break; } long long tl = 0; for (tl = 1;; tl++) { long long nx = x - (tl + 1) / 2; long long ny = y - tl / 2; if (nx <
272	#include <bits/stdc++.h> using namespace std; const int N = 1e3 + 5; int n, m, q, ans, f[N][N][2], g[N][N]; bool st[N][N]; int main() { scanf("%d %d %d", &n, &m, &q); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { f[i][j][0] = (j == 1)? : (f[i][j - 1][1] + 1); f[i][j][1] = (i == 1)? : (f[i - 1][j][0] + 1); g[i][j] = f[i][j][0] + f[i][j][1] + 1; } } for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { ans += g[i][j]; } } for (int i = 0; i <= n; ++i) { st[i][0] = st[i][m + 1] = 1; } for (int i = 0; i <= m; ++i) { st[0][i] = st[n + 1][i] = 1; } while (q--) { int x, y, sign; scanf("%d %d", &x, &y); sign = st[x][y]? : -1; int A = min(x - 1, y - 1); int B = min(n - x, m - x); int p = 0, q = 0, s = 0, t = 0; for (int i = 1; i <= A + 1; ++i) { if (st[x - i][y - i + 1]) break; ++p; if (st[x - i][y - i]) break; ++p; } for (int i = 1; i <= A + 1; ++i) { if (st[x - i + 1][y - i]) break; ++q; if (st[x - i][y - i]) break; ++q; } for (int i = 1; i <= B + 1; ++i)
273	#include <bits/stdc++.h> using namespace std; mt19937_64 rnd(time(NULL)); const long long mod = 1000000007; const int N = 1010; int a[N][N]; int cnt[N][N][2]; long long ans = 0; int n, m, q; inline void calc(int i, int j) { if (i <= || j <= || i > n || j > m) return; ans -= cnt[i][j][0] + cnt[i][j][1]; if (a[i][j]) cnt[i][j][0] = cnt[i][j][1] = 0; else { cnt[i][j][0] = cnt[i - 1][j][1] + 1; cnt[i][j][1] = cnt[i][j - 1][0] + 1; } ans += cnt[i][j][0] + cnt[i][j][1]; } void solve() { cin >> n >> m >> q; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { calc(i, j); ans--; } } for (int it = 1; it <= q; it++) { int x, y; cin >> x >> y; ans += - a[x][y]; a[x][y] ^= 1; ans -= - a[x][y]; for (int i = 0; i <= min(n - x, n - y); i++) { calc(x + i, y + i); calc(x + i + 1, y + i); calc(x + i, y + i + 1); } cout << ans << '\n'; } } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(0); int tt = 1; while (tt--) { solve(); } return 0; }
274	#include <bits/stdc++.h> using namespace std; inline int read() { int x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } inline long long llread() { long long x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } int n; char s[25][400010], l[25], rest[25]; vector<int> v[25][400010]; int dp[(1 << 20) + 10][2], g[(1 << 20) + 10]; signed main() { n = read(); for (int i = (1); i <= (n); i++) scanf("%s", s[i] + 1); for (int i = (1); i <= (n); i++) l[i] = strlen(s[i] + 1); for (int i = (1); i <= (n); i++) { int top = 0; for (int j = (1); j <= (l[i]); j++) { if (s[i][j] == '(') top++; else top--; if (top <= 0) v[i][-top].push_back(j); } rest[i] = top; } for (int i = (1); i <= ((1 << n) - 1); i++) dp[i][0] = dp[i][1] = -0x3f3f3f3f; dp[0][0] = dp[0][1] = g[0] = 0; for (int mask = (1); mask <= ((1 << n) - 1); mask++) { for (int i = (1); i <= (n); i++) { if (mask & (1 << (i - 1))) { int S = mask ^ (1 << (i - 1)); if (dp[mask][0] < dp[S][0]) { dp[mask][
275	#include <bits/stdc++.h> using namespace std; const int mx = 4e5 + 10; int main() { int n; cin >> n; vector<string> a(n); for (string& x : a) cin >> x; vector<int> bal(n), mn(n); vector<vector<int>> occ(n), nocc(n); for (int i = 0; i < n; i++) { int b = 0, mn0 = 1e9; occ[i].resize(mx * 2); nocc[i].resize(mx * 2); int mini = 1e9; for (char x : a[i]) { if (x == ')') b--; else b++; mini = min(b, mini); mn0 = min(mn0, b); occ[i][b + mx]++; if (b == mini) nocc[i][b + mx]++; } bal[i] = b, mn[i] = mn0; } vector<vector<int>> answer((1 << n), vector<int>(2, -1e9)); answer[0] = {0, 0}; vector<int> sum(1 << n); for (int mask = 0; mask < (1 << n); mask++) { for (int i = 0; i < n; i++) { if ((1 << i) & mask) { sum[mask] = sum[mask ^ (1 << i)] + bal[i]; break; } } for (int i = 0; i < n; i++) { if ((1 << i) & mask) { int nmask = (1 << i) ^ mask; if (sum[nmask] + mn[i] < 0) { answer[nmask][1] = max(answer[nmask][0] + nocc[i][mx - sum[nmask]], answer[mask][1]); } else { answer[mask][0] = max(answer[mask][0], answer[nmask][0] + occ[i][mx - sum[nmask]]); } } } } int ans = 0; for (auto x : answer) ans = max({x[0], x[1], ans}); cout << ans; return 0; }
276	#include <bits/stdc++.h> using namespace std; const long long N = 22; const long long oo = 1e18 + 7, mod = 1e9 + 7; string s[N]; long long n, k; long long num[N][400005]; long long ans[(1LL << N)][2]; long long pref[(1LL << N)], mn[N]; set<pair<long long, long long> > second; set<long long> nums[400005]; void process() { cin >> n; for (long long i = 1; i <= n; i++) { cin >> s[i]; s[i] = '*' + s[i]; second.clear(); for (long long j = 0; j <= 400000; j++) nums[j].clear(); long long prefix = 0; mn[i] = 0; for (long long j = 1; j < s[i].length(); j++) { prefix += (s[i][j] == '('? : -1); mn[i] = min(mn[i], prefix); if (prefix <= 0) { second.insert({j, -prefix}); nums[-prefix].insert(j); } } pref[(1LL << (i - 1))] = prefix; for (long long j = 400000; j >= 0; j--) { if (!nums[j].size()) continue; num[i][j] = nums[j].size(); long long temp = (*nums[j].begin()); set<pair<long long, long long> >::iterator it = second.find({j, temp}), it2 = it; for (; it2!= second.end(); it2++) nums[(*it2).second].erase((*it2).first); second.erase(it, second.end()); } } ans[0][1] = 0, ans[0][0] = -oo; for (long long i = 1; i < (1LL << n); i++) { ans[i][0] = ans[i][1] = -oo; if (__builtin_popcountll(i) >= 2) { for (long long j = 0; j < n; j++) { if (i & (1LL << j)) { pref[i] = (
277	#include <bits/stdc++.h> using namespace std; const int maxn = 400010; int n, a[maxn], b[maxn]; char s[maxn]; int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) { scanf("%d", &a[i]); } scanf("%s", s + 1); sort(a + 1, a + n + 1); int l = 1, r = n; for (int i = n; i; i--) { if (s[i] == s[i - 1]) b[i] = l++; else b[i] = r--; } for (int i = 1; i <= n; i++) { printf("%d %c\n", a[b[i]], (b[i] ^ 1) ^ (i & 1) ^ (s[i] == 'R')? 'R' : 'L'); } return 0; }
278	#include <bits/stdc++.h> using namespace std; signed main() { long long n; cin >> n; long long a[n]; for (long long i = 0; i < n; i++) cin >> a[i]; sort(a, a + n + 1); string s; cin >> s; long long cnt = 0; for (long long i = 0; i < n - 1; i++) { if (s[i]!= s[i + 1]) cnt++; } char dir[n]; dir[n - - cnt] = s[0]; for (long long i = n - - cnt; i >= 0; i--) { if (dir[i + 1] == 'L') dir[i] = 'R'; else dir[i] = 'L'; } for (long long i = n - cnt; i < n; i++) { if (dir[i - 1] == 'L') dir[i] = 'R'; else dir[i] = 'L'; } long long l = n - - cnt, r = n - - cnt; cout << a[n - - cnt] <<'' << dir[n - - cnt] << '\n'; for (long long i = 1; i < n; i++) { if (s[i] == s[i - 1]) { l--; cout << a[l] <<'' << dir[l] << '\n'; } else { r++; cout << a[r] <<'' << dir[r] << '\n'; } } }
279	#include <bits/stdc++.h> using namespace std; const int N = 200005; int n, a[N], b[N]; char s[N]; void sol(int l, int r, int d) { if (d == 1) { b[d] = a[l]; return; } if (s[d - 1] == s[n]) { b[d] = a[l]; sol(l + 1, r, d - 1); } else { b[d] = a[r]; sol(l, r - 1, d - 1); } } int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); scanf("%s", s + 1); sort(a + 1, a + n + 1); if (s[n] == 'L') for (int i = n; i >= 1; i -= 2) a[i] = -a[i]; else for (int i = n - 1; i >= 1; i -= 2) a[i] = -a[i]; sol(1, n, n); for (int i = 1; i <= n; i++) { if (b[i] > 0) printf("%d R\n", b[i]); else printf("%d L\n", -b[i]); } return 0; }
280	#include <bits/stdc++.h> using namespace std; int n, a[200005]; string str; pair<int, int> ans[200005]; int main() { scanf("%d", &n); for (int i = 0; i < n; i++) scanf("%d", &a[i]); sort(a, a + n); cin >> str; int now = n - 1, l = 0, r = n - 1; while (now >= 0) { if (now == 0) { ans[now] = pair<int, int>(a[now], str[l] == 'L'? : 1); break; } if (str[now]!= str[now - 1]) { ans[now] = pair<int, int>(a[r], str[now] == 'L'? : 1); now--; r--; } else { if (now == || str[now] == str[now - 2]) { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[r - 1], str[now] == 'L'? : 0); now -= 2; r -= 2; } else if ((r - l + 1) & 1) { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[l], str[now] == 'L'? : 1); now -= 2; r--; l++; } else { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[l], str[now] == 'L'? : 0); now -= 2; r--; l++; } } } for (int i = 0; i < n; i++) printf("%d %c\n", ans[i].first, ans[i].second? 'R' : 'L'); return 0; }
281	#include <bits/stdc++.h> using namespace std; vector<vector<int>> g; vector<int> ans; vector<int> a; vector<int> mp(1000000, 0); vector<int> lb; vector<int> p, pi; struct query { int id, l, k; }; vector<vector<query>> vq; void dfs(int v, int pa = -1) { mp[a[v]]++; int c = pi[a[v]]; int b = lb[mp[a[v]] + 1] - 1; swap(p[c], p[b]); swap(pi[p[c]], pi[p[b]]); lb[mp[a[v]]]--; for (query q : vq[v]) { int d = lb[q.l]; if (d + q.k - >= p.size()) { ans[q.id] = -1; } else { ans[q.id] = p[d + q.k - 1]; } } for (int u : g[v]) if (u!= pa) { dfs(u, v); } c = lb[mp[a[v]]]; b = pi[a[v]]; swap(p[c], p[b]); swap(pi[p[c]], pi[p[b]]); lb[mp[a[v]]]++; mp[a[v]]--; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); int t; cin >> t; while (t--) { int n, q; cin >> n >> q; a.resize(n); for (int i = 0; i < n; ++i) cin >> a[i]; g.clear(); g.resize(n); for (int i = 1; i < n; ++i) { int x; cin >> x; --x; g[x].push_back(i); g[i].push_back(x); } vq.clear(); vq.resize(n); for (int i = 0; i < q; ++i) { int v, l, k; cin >> v >> l >> k; --v; vq[v].push_back
282	#include <bits/stdc++.h> using namespace std; vector<int> ch[1000009]; int n, ans[1000009], st[1000009], en[1000009], fr[1000009], a[1000009], ord[1000009], pos[1000009]; vector<int> qr[1000009]; int s[1000009], k[1000009]; void add(int x) { int z = en[fr[x]]; int u = ord[z]; swap(ord[pos[x]], ord[z]); swap(pos[x], pos[u]); st[fr[x] + 1] = en[fr[x]]; en[fr[x]]--; if (en[fr[x]] < st[fr[x]]) st[fr[x]] = en[fr[x]] = -1; fr[x]++; if (en[fr[x]] == -1) en[fr[x]] = st[fr[x]]; } void rem(int x) { int z = st[fr[x]]; int u = ord[z]; swap(ord[pos[x]], ord[z]); swap(pos[x], pos[u]); en[fr[x] - 1] = st[fr[x]]; st[fr[x]]++; if (en[fr[x]] < st[fr[x]]) st[fr[x]] = en[fr[x]] = -1; fr[x]--; if (st[fr[x]] == -1) st[fr[x]] = en[fr[x]]; } void sol(int x) { if (fr[ord[n - 1]] < s[x]) { ans[x] = -1; return; } int l = 0, r = n - 1; while (r > l) { int mid = (l + r) / 2; if (fr[ord[mid]] >= s[x]) r = mid; else l = mid + 1; } l += k[x] - 1; if (l > n - 1) ans[x] = -1; else ans[x] = ord[l]; } void go(int x) { add(a[x]); for (int i = 0; i < qr[x].size
283	#include <bits/stdc++.h> using namespace std; const int maxn = 1000005; int a[maxn], p[maxn], ans[maxn]; int dfs[2 * maxn][2], freq[maxn], psum[maxn]; int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { int n, q; cin >> n >> q; for (int i = 0; i < n; ++i) { cin >> a[i]; --a[i]; } for (int i = 0; i < n - 1; ++i) { cin >> p[i]; --p[i]; } vector<vector<int>> g(n); vector<vector<vector<int>>> qs(n); for (int i = 0; i < n - 1; ++i) g[p[i]].push_back(i + 1); for (int i = 0; i < q; ++i) { int v, l, k; cin >> v >> l >> k; --v; vector<int> q; q.push_back(i); q.push_back(l); q.push_back(k); qs[v].push_back(q); } int pt = 0; vector<unordered_set<int>> sets(n + 2); for (int i = 0; i < n; ++i) sets[0].insert(i); sets[n + 1].insert(-2); for (int i = 1; i <= n + 1; ++i) psum[i] = n; dfs[pt][0] = 0; dfs[pt++][1] = 0; while (pt) { int i = dfs[--pt][0], stage = dfs[pt][1]; sets[freq[a[i]]].erase(a[i]); if (stage == 0) { sets[++freq[a[i]]].insert(a[i]); --psum[freq[a[i]]]; for (vector<int> qry : qs[i]) { int id = qry[0], l = qry[1], k = qry[2] + psum[l]; int bucket = n + 1; for (int
284	#include <bits/stdc++.h> using namespace std; void _io() { std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); } void _init(); const int MAXN = 1000005; const long long mod = 998244353; int n, q, a[MAXN], p[MAXN], ans[MAXN]; int occur[MAXN]; vector<int> num[MAXN]; vector<int> g[MAXN]; struct NODE { int l, k, id; NODE(int a, int b, int c) : l(a), k(b), id(c) {} }; vector<NODE> Q[MAXN]; int ta[MAXN]; void add(int k, int p) { if (k <= 0) return; for (int i = k; i <= n; i += i & (-i)) ta[i] += p; } int get(int k) { int res = 0; for (int i = k; i > 0; i -= i & (-i)) res += ta[i]; return res; } void add(int v) { add(occur[v], -1); occur[v]++; add(occur[v], 1); num[occur[v]].emplace_back(v); } void del(int v) { add(occur[v], -1); occur[v]--; add(occur[v], 1); num[occur[v]].emplace_back(v); } int deal(int l, int k) { int low = l, high = n; while (low < high) { int mid = (low + high) >> 1; if (get(mid) - get(l - 1) >= k) high = mid; else low = mid + 1; } if (get(low) - get(l - 1) < k) return -1; while (occur[num[low].back()] < l) num[low].pop_back(); return num[low].back(); } void dfs(int u) { add(a[u]); for (auto x : Q[u]) { ans[x.id] = deal(x.l, x.k); } for (auto v : g[u]) { dfs(
285	#include <bits/stdc++.h> using namespace std; template <typename T> struct binary_indexed_tree { int N; vector<T> BIT; binary_indexed_tree(int N) : N(N), BIT(N + 1, 0) {} void add(int i, T x) { i++; while (i <= N) { BIT[i] += x; i += i & -i; } } T sum(int i) { T ans = 0; while (i > 0) { ans += BIT[i]; i -= i & -i; } return ans; } T sum(int L, int R) { return sum(R) - sum(L); } }; void dfs(int n, vector<vector<int>> &c, vector<int> &a, vector<int> &ans, vector<vector<tuple<int, int, int>>> &query, vector<int> &freq, binary_indexed_tree<int> &freq_cnt, vector<set<int>> &st, int v = 0) { freq_cnt.add(freq[a[v]], -1); st[freq[a[v]]].erase(a[v]); freq[a[v]]++; freq_cnt.add(freq[a[v]], 1); st[freq[a[v]]].insert(a[v]); for (auto &q : query[v]) { int l = get<0>(q); int k = get<1>(q); int id = get<2>(q); if (freq_cnt.sum(l, n + 1) < k) { ans[id] = -2; } else { int tv = n + 1, fv = l; while (fv - tv > 1) { int mid = (tv + fv) / 2; if (freq_cnt.sum(l, mid) >= k) { tv = mid; } else { fv = mid; } } ans[id] = *st[fv].begin(); } } for (int w : c[v]) { dfs(n, c, a, ans, query, freq, freq_cnt, st, w); } freq_cnt.add(freq[a[v]], -1); st[freq[a[v]]].erase
286	#include <bits/stdc++.h> using namespace std; const long long mod = 998244353; const int N = 500007; stack<long long> s; long long a[N]; long long f[N]; long long sum[N]; int main() { int n; scanf("%d", &n); for (int i = 1; i <= n; i++) { scanf("%lld", &a[i]); } s.push(0); f[0] = 1; sum[0] = 1; long long ans; for (int i = 1; i <= n; i++) { while (!s.empty() && a[s.top()] >= a[i]) { long long pos = s.top(); s.pop(); if (s.empty()) { ans = (ans - a[pos] * sum[pos - 1] % mod + mod) % mod; } else { ans = (ans - a[pos] * (sum[pos - 1] - sum[s.top() - 1] + mod) % mod + mod) % mod; } } if (s.empty()) { ans = (ans + a[i] * sum[i - 1] % mod) % mod; } else { ans = (ans + a[i] * ((sum[i - 1] - sum[s.top() - 1] + mod) % mod) % mod) % mod; } s.push(i); if (i % == 1) { f[i] = ans; } else { f[i] = (mod - ans) % mod; } if (i % == 1) { f[i] = (mod - f[i]) % mod; } sum[i] = (f[i] + sum[i - 1]) % mod; } if (n % == 1) { printf("%lld\n", (mod - f[n]) % mod); } else { printf("%lld\n", f[n]); } return 0; }
287	#include <bits/stdc++.h> using namespace std; inline long long read() { long long x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') f = ch == '-'? -1 : 1, ch = getchar(); while (ch >= '0' && ch <= '9') x = x * + ch - 48, ch = getchar(); return x * f; } const long long N(2e5 + 10); const long long mod(998244353); long long n; long long a[N]; long long g[N]; long long s[N]; long long pre[N]; long long nxt[N]; long long stk[N]; signed main() { n = read(); a[1] = a[n + 2] = -1e9; long long top = 1; stk[1] = 1; for (long long i = (2); i <= (n + 1); i++) a[i] = read(); for (long long i = (2); i <= (n + 2); i++) { for (; top && a[stk[top]] >= a[i]; top--) nxt[stk[top]] = i; pre[i] = stk[top], stk[++top] = i; } s[1] = 1; for (long long i = (2); i <= (n + 1); i++) { long long x = s[i - 1] - s[pre[i] - 1] + mod; x = (x % mod * a[i]) % mod, (g[i] += g[i - 1] + x) %= mod; (g[nxt[i]] += mod - x) %= mod, s[i] = (s[i - 1] + mod - g[i]) % mod; } if ((n + 1) & 1) g[n + 1] = mod - g[n + 1]; cout << g[n + 1]; return 0; }
288	#include <bits/stdc++.h> using namespace std; constexpr int INF = (numeric_limits<int>::max()) / 2; constexpr long long INFLL = (numeric_limits<long long>::max()) / 2; template <class T> istream &operator>>(istream &is, vector<T> &a) { for (auto &i : a) { is >> i; } return is; } constexpr int mod = 998244353; struct segtree { struct line { int k = -INFLL, b = -INFLL; line() = default; line(int k, int b) : k(k), b(b){}; bool operator==(line p) const { return k == p.k && b == p.b; } }; struct Node { int sum = 0; line push; Node *l = nullptr, *r = nullptr; Node() = default; }; Node *root = nullptr; int n = 1e9 + 1; void creatend(Node *&v) { if (v == nullptr) { v = new Node(); } } void push(Node *v, int l, int r) { if (v->push == line()) { return; } if (l + < r) { creatend(v->l); if (v->l->push == line()) { v->l->push = v->push; } else { v->l->push = { (int)((v->push.k * 1ll * v->l->push.k) % mod), (int)((v->push.k * 1ll * v->l->push.b + v->push.b) % mod)}; } creatend(v->r); if (v->r->push == line()) { v->r->push = v->push; } else { v->r->push = { (int)((v->push.k * 1ll * v->r->push.k) % mod), (int)((v->push.k * 1ll * v->r->push.b + v->push.b) % mod)}; } } v->sum = (v->sum * 1ll * v->push.k) % mod; v->sum = (v->sum + (r - l)
289	#include <bits/stdc++.h> using namespace std; int main() { int n; cin >> n; while (n--) { long long int num, a = 0, l = 0; cin >> num; cout << - num + << " " << num << "\n"; } }
290	#include <bits/stdc++.h> using namespace std; int main() { int T; cin >> T; while (T--) { long long n; cin >> n; if (n == 1) { printf("0\n"); continue; } printf("-%lld %lld\n", n - 1, n); } return 0; }
291	#include <bits/stdc++.h> using namespace std; void solve(); void solvet() { int t; cin >> t; for (long long __ = (0); __ < (t); __++) solve(); } int main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cout.precision(9); ; cout << setprecision(20); solvet(); return 0; } void solve() { long long mod = 1e9 + 7; long long n, k; cin >> n >> k; long long ans = 0; long long len = log2(k); for (long long i = (0); i < (len + 10); i++) { if (k & (1ll << i)) { long long p = 1; for (long long j = (0); j < (i); j++) { p *= n; p %= mod; } ans += p; ans %= mod; } } cout << ans << endl; }
292	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; long long ksm(long long x, int k) { long long sum = 1; while (k) { if (k & 1) sum = sum * x % mod; x = x * x % mod; k >>= 1; } return sum; } void solve() { int n, k; long long ans = 0; scanf("%d%d", &n, &k); for (int i = 19; i >= 0; i--) { if ((1 << i) <= k) { k -= (1 << i); ans = (ans + ksm(n, i)) % mod; } } printf("%lld\n", ans); } int main() { int t; scanf("%d", &t); while (t--) solve(); return 0; }
293	#include <bits/stdc++.h> using namespace std; template <typename A, typename B> ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; } template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream &operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; } void dbg_out() { cerr << endl; } template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << " " << H; dbg_out(T...); } void solve() { int n; char c; string s; cin >> n >> c >> s; vector<int> ans; bool need = false; for (int i = 0; i < n; i++) { if (s[i]!= c) { need = true; } } for (int i = n / 2; i < n - 1; i++) { if (s[i] == c) { ans.push_back(i + 1); break; } } if (need == false) { cout << "0\n"; return; } if ((int)ans.size() == 0) { ans.push_back(n); ans.push_back(n - 1); } cout << ans.size() << '\n'; for (int i : ans) { cout << i <<''; } cout << '\n'; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int tests = 1; cin >> tests; while (tests--) { solve(); } }
294	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long T; cin >> T; while (T--) { long long n; cin >> n; char a; cin >> a; string s; cin >> s; long long ss = s.size(); bool flag = true; long long k, c = 0; int x; bool ff = true; for (int i = 0; i < ss; i++) { if (s[i]!= a) { ff = false; } } if (ff) { cout << << endl; continue; } if (ss % == 0) { x = (ss / 2) + 1; } else { x = (ss / 2) + 1; } bool fl = false; for (long long i = x; i < ss; i++) { if (s[i - 1] == a) { fl = true; c = i; break; } } if (fl) { cout << << endl; cout << c << endl; } else { cout << << endl; cout << ss << " " << ss - << endl; } } }
295	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { vector<int> ans; int p = 0, flag = 0, n; string s; char ch; cin >> n >> ch; cin >> s; s = " " + s; for (int i = 1; i < n; i++) if (s[i]!= ch) flag = 1; if (!flag) cout << "0" << endl; else if (s[n]!= ch) { int f = 0; for (int i = 1; i <= n; i++) { f = 0; for (int j = i; j <= n; j += i) if (s[j]!= ch) f = 1; if (!f) { cout << "1" << endl << i << endl; break; } } if (f) cout << "2" << endl << n - << " " << n << endl; } else cout << "1" << endl << n << endl; } return 0; }
296	#include <bits/stdc++.h> using namespace std; const long long N = 2e5 + 10, mod = 1e9 + 7; template <typename T> void Debug(T x, string s) { cout << s << ": " << x << endl; } const int maxn = 1e6 + 10; int prime[maxn]; int visit[maxn]; void Prime() { visit[1] = 1; for (int i = 2; i < maxn; i++) { if (!visit[i]) { prime[++prime[0]] = i; } for (int j = 1; j <= prime[0] && i * prime[j] < maxn; j++) { visit[i * prime[j]] = 1; if (i % prime[j] == 0) { break; } } } } void solve() { int n; char c; cin >> n >> c; string s; cin >> s; vector<int> vec; for (int i = 0; i < n; i++) { if (s[i]!= c) vec.push_back(i + 1); } if (!vec.size()) { cout << << endl; return; } if (s[n - 1] == c) { cout << << endl; cout << n << endl; return; } for (int i = n / 2; i <= n; i++) { if (vec[i - 1] == c) { cout << << endl; cout << i << endl; return; } } cout << << endl; cout << n - << " " << n << endl; } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); Prime(); int t; cin >> t; while (t--) solve(); }
297	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 3, Mod = 1e9 + 7; const int maxN = 1e5 + 3; long long gcd(long long a, long long b) { if (a > b) swap(a, b); if (a == 0) return b; return gcd(b, a % b); } void solve() { long long n; char c; string s; cin >> n >> c; cin >> s; bool issame = 1; bool divby[n + 1]; for (int i = 1; i <= n; i++) divby[i] = 0; for (int i = 0; i < n; i++) { if (s[i]!= c) { issame = 0; for (int j = 1; j * j <= i + 1; j++) { if ((i + 1) % j == 0) { divby[j] = 1; divby[(i + 1) / j] = 1; } } } } if (issame) { cout << << endl; return; } for (int i = 1; i <= n; i++) { if (divby[i] == 0) { cout << << endl; cout << i << endl; return; } } cout << << endl; for (int i = 2; i <= n; i++) { if (n % i!= 0) { cout << n << " " << i << endl; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); int t = 1; cin >> t; for (int i = 0; i < t; i++) { solve(); } }
298	#include <bits/stdc++.h> using namespace std; void solve() { long long int n; char c; cin >> n >> c; string s; cin >> s; long long int o = 0, e = 0; long long int vo, ve; for (long long int i = 1; i <= n; i++) { if (s[i - 1]!= c) { if (i % 2) { o++; vo = i; } else { e++; ve = i; } } } if (o == and e == 0) { cout << << endl; } else if (o == 0) { cout << << endl; if (ve -!= 1) cout << ve - << endl; else { cout << ve + << endl; } } else if (e == 0) { cout << << endl << << endl; } else { vector<long long int> idx, b; for (long long int i = 1; i <= n; i++) { if (s[i - 1] == c) { idx.push_back(i); } else { b.push_back(i); } } for (auto i : idx) { long long int j = i; long long int cnt = 1; long long int flag = 1; while (j * cnt <= n) { if (binary_search(b.begin(), b.end(), j * cnt)) { flag = 0; break; } cnt++; } if (flag) { cout << << endl << i << endl; return; } } cout << << endl; if (ve -!= 1) cout << "2 " << ve - << endl; else { cout << "2 " << ve + << endl; } } } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t; cin >> t; while (t--) solve(); return 0; }
299	#include <bits/stdc++.h> using namespace std; const int maxn = 2e5 + 100; int fa[maxn], col[maxn][2], dis[maxn]; int find(int x) { if (x!= fa[x]) { int root = find(fa[x]); dis[x] ^= dis[fa[x]]; fa[x] = root; } return fa[x]; } int main() { int t; cin >> t; while (t--) { bool f = false; int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) { fa[i] = i; dis[i] = 0; col[i][0] = 1; col[i][1] = 0; } for (int i = 1; i <= m; i++) { int x, y; string s; cin >> x >> y >> s; int val = s[0] == 'i'? : 0; int px = find(x), py = find(y); if (px == py) { if ((dis[x] ^ dis[y])!= val) { f = true; break; } } else { fa[py] = px; dis[py] = dis[x] ^ dis[y] ^ val; col[px][1] += col[py][dis[py] ^ 1]; col[px][0] += col[py][dis[py]]; } } if (f) { puts("-1"); continue; } int ans = 0; for (int i = 1; i <= n; i++) { if (fa[i] == i) { ans += max(col[i][0], col[i][1]); } } cout << ans << endl; } return 0; }
300	#include <bits/stdc++.h> using namespace std; long long MOD = 1e9 + 7; void cincout() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cout << fixed << setprecision(15); } pair<long long, long long> binarySearch(long long l, long long r, long long pr, long long x) { if (r >= l) { long long mid = l + (r - l) / 2; long long ans = (r) * (r + 1) / 2; cout << ans << " r =" << r << endl; if (ans == x) return {l, r}; if (ans > x) return binarySearch(l, mid - 1, r, x); return binarySearch(l, r + mid, r, x); } return {-1, -1}; } set<int> parent; vector<vector<pair<int, int> > > v(200005); vector<int> d; int N = 2000005; int M = 2000005; vector<int> mem(2000005); vector<bool> visited(2000005); vector<bool> imposter(2000005); vector<bool> recStack(2000005); set<int> second; queue<int> q; void dfsParent(int node) { visited[node] = 1; for (auto i : v[node]) { parent.erase(i.first); if (!visited[i.first]) { dfsParent(i.first); } } } void getparents() { for (int i = 1; i <= N; i++) parent.insert(i); for (int i = 1; i <= N; i++) { dfsParent(i); } if (parent.size() == 0) parent.insert(1); } bool ans = true; int coun[2]; void dfs(int node) { coun[imposter[node]]++; visited[node] = 1; for (auto i : v[node]) { auto first = imposter[node] ^ i.second; if (!visited[i.first]) { imposter[i.first] = first; dfs(i.first); } else if (first!= imposter[i.first
301	#include <bits/stdc++.h> #pragma GCC optimize("-Ofast,unroll-loops") #pragma GCC target("avx2") std::mt19937 rnd(237); using namespace std; const int N = 2e5, mod = 1e9 + 7; int n, m, type[N], cmp[N], cmp_p = 0; vector<array<int, 2>> g1[N], g2[N]; long long dfs(int v) { cmp[cmp_p++] = v; long long ans = (type[v]? : 1); for (auto &[u, c] : g1[v]) { if (~type[u]) { if (type[v] && type[u]!= c) return -2e9; if (!type[v] && type[u] == c) return -2e9; } else { type[u] = (type[v]? c : - c); ans += dfs(u); } } for (auto &[u, c] : g2[v]) { if (~type[u]) { if (type[u] == && type[v]!= c) return -2e9; if (type[u] == && type[v] == c) return -2e9; } else { type[u] = (type[v] == c? : 0); ans += dfs(u); } } return ans; } void solve() { cin >> n >> m; fill(type, type + n, -1); cmp_p = 0; for (int i = 0; i < n; ++i) { g1[i].clear(); g2[i].clear(); } for (int i = 0; i < m; ++i) { int u, v; string s; cin >> u >> v >> s; --u, --v; if (s == "crewmate") { g1[u].push_back({v, 1}); g2[v].push_back({u, 1}); } else { g1[u].push_back({v, 0}); g2[v].push_back({u, 0}); } } long long ans = 0; for (int i = 0; i < n; ++i) {
302	#include <bits/stdc++.h> using namespace std; long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long extgcd(long long a, long long b, long long& x, long long& y) { if (b == 0) { x = 1; y = 0; return a; } long long x1, y1; long long d = extgcd(b, a % b, x1, y1); x = y1; y = x1 - y1 * (a / b); return d; } long long revrsno(long long n) { long long k = 0; vector<long long> z; while (n > 0) { z.push_back(n % 10); n /= 10; } for (long long i = 0; i < z.size(); i++) k = k * + z[i]; return k; } bool isPrime(long long n) { if (n <= 1) return false; if (n <= 3) return true; if (n % == || n % == 0) return false; for (long long i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return false; return true; } bool isPowerOfTwo(long long n) { if (n == 0) return false; return (ceil(log2(n)) == floor(log2(n))); } long long powm(long long a, long long b) { long long res = 1; while (b) { if (b & 1) res = (res * a) % 1000000007; a = (a * a) % 1000000007; b >>= 1; } return res; } long long divide(long long a, long long b) { return (a % 1000000007) * powm(b, - 2) % 1000000007; } long long mul(long long a, long long b) { return ((a % 1000000007) * (b % 1000000007)) % 1000000007; } long long add(long long a, long long b) { return (a % + b % 1000000007) % 1000000007; } long long Tot
303	#include <bits/stdc++.h> using namespace std; using ll = long long; using pii = pair<int, int>; constexpr ll MOD = (ll)1e9 + 7; ll exp(ll b) { if (b == 1) { return 2LL; } ll res = exp(b / 2); res %= MOD; res *= res; res %= MOD; if (b % == 1) { res *= 2; } res %= MOD; return res; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); ll k; cin >> k; if (k == 1) { cout << << '\n'; return 0; } ll node_count = (1 << k) - 1; ll p = node_count - 1; ll ans = 6LL * exp(2LL * p); ans %= MOD; cout << ans << '\n'; return 0; }
304	#include <bits/stdc++.h> using namespace std; inline char gc() { static char buf[1000000], *p1 = buf, *p2 = buf; return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2)? EOF : *p1++; } long long read() { long long pos = 1, num = 0; char ch = getchar(); while (!isdigit(ch)) { if (ch == '-') pos = -1; ch = getchar(); } while (isdigit(ch)) { num = num * + (long long)(ch - '0'); ch = getchar(); } return pos * num; } void write(long long x) { if (x < 0) { putchar('-'); write(-x); return; } if (x >= 10) write(x / 10); putchar(x % + '0'); } void writesp(long long x) { write(x); putchar(' '); } void writeln(long long x) { write(x); putchar('\n'); } const long long mod = 1e9 + 7; inline long long quickpower(long long a, long long b) { long long res = 1; a %= mod; while (b) { if (b & 1) (res *= a) %= mod; b >>= 1; (a *= a) %= mod; } return res; } signed main() { long long k = read(); writeln(6 * quickpower(4, (1LL << k) - 2) % mod); }
305	#include <bits/stdc++.h> using namespace std; const int MOD = 1e9 + 7; int pwr(int a, long long b) { int res = 1; for (; b; b >>= 1) { if (b & 1) res = 1LL * res * a % MOD; a = 1LL * a * a % MOD; } return res; } int T, n; int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); T = 1; while (T--) { cin >> n; if (n == 1) return cout << << '\n', 0; long long x = (1LL << n); x -= 2; cout << 1LL * * pwr(4, x) % MOD << '\n'; } }
306	#include <bits/stdc++.h> using namespace std; long long int pwr(long long int a, long long int b) { long long int res = 1; while (b > 0) { if (b & 1) { res = (res % * a % 1000000007) % 1000000007; } a = (a % * a % 1000000007) % 1000000007; b >>= 1; } return res; } int main() { long long int k, ans = 1, nodes = 0; cin >> k; nodes = pwr(2, k); nodes = nodes - 2; ans = pwr(4, nodes); ans %= 1000000007; ans *= 6; cout << (ans % 1000000007); return 0; }
307	#include <bits/stdc++.h> using namespace std; const long long M = 1e9 + 7; long long power(long long a, long long b) { if (b == 0) return 1; if (b % == 0) { long long x = power(a, b / 2); return (x * x) % M; } else return (a * power(a, b - 1)) % M; } void fun() { long long k; cin >> k; long long n; cin >> n; map<string, int> m; m["white"] = 0; m["yellow"] = 1; m["green"] = 2; m["blue"] = 3; m["red"] = 4; m["orange"] = 5; map<long long, int> vis; map<long long, vector<long long>> v; set<long long> des; map<long long, int> f; for (int i = 0; i < n; i++) { long long x; cin >> x; string s; cin >> s; int y = m[s]; vector<long long> cv(6, 0); cv[y]++; v[x] = cv; des.insert(-x); f[x]++; } while (!des.empty()) { long long x = -(*des.begin()); des.erase(des.begin()); vis[x]++; long long lvl = log2(2LL * x) + 1; long long nl = lvl; if (lvl <= k) { vector<long long> cx(6, 0); lvl = k - lvl + 1; long long curr = power(2LL, lvl); curr -= 2LL; if (curr < 0) curr += M; curr = power(4, curr); cx.assign(6, curr); if (vis[2LL * x] == 0) { v[2LL * x] = cx; } if (vis[2LL * x + 1] == 0) v[2LL * x + 1] = cx; } if (!f[x]) { vector<long long> cv(6, 0); for (int i = 0; i < 6; i++) { int c = i; int oc = c; if (c % == 0) oc++; else oc--; for (
308	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; bool could[6][6]; bool could1[6][6][6]; map<long long, int> mp; vector<long long> fuck[300]; int k, n; void init() { memset(could, 0, sizeof(could)); for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i!= j) { could[i][j] = 1; } } } could[0][1] = could[1][0] = 0; could[2][3] = could[3][2] = 0; could[4][5] = could[5][4] = 0; memset(could1, 0, sizeof(could1)); for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { for (int k = 0; k < 6; k++) { could1[i][j][k] = could[i][j] & could[i][k]; } } } } char shit[100]; vector<long long> dfs(int id, int ceng) { if (mp.count(id) == 0) { return fuck[ceng]; } if (ceng == k) { vector<long long> now(6, 1); if (mp[id]!= -1) { int c = mp[id]; for (int i = 0; i < 6; i++) { if (i!= c) { now[i] = 0; } } } return now; } vector<long long> L = dfs(id << 1, ceng + 1); vector<long long> R = dfs(id << | 1, ceng + 1); vector<long long> now(6, 0); for (int c = 0; c < 6; c++) { for (int l = 0; l < 6; l++) { for (int r = 0; r < 6; r++) { now[c] = (now[c] + could1[c][l][r] * L[l] * R[r]) % mod; } } } if (mp[id]!= -1) { int c
309	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx") using namespace std; const int64_t inf = 1000000005; const int64_t P = 1e9 + 7; const int N = 2e5 + 7; int64_t pw(int64_t a, int64_t n) { int64_t r = 1; a %= P; while (n > 0) { if (n % 2) r = (r * a) % P; a = (a * a) % P; n /= 2; } return r; } int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); unordered_map<int64_t, int64_t> a1, a2, a3; int k; cin >> k; int n; cin >> n; int64_t v; string ss; std::vector<int64_t> S, RR; int V; for (int i = 0; i < n; ++i) { cin >> v >> ss; V = v; while (V > 0) { S.push_back(V); V /= 2; } RR.push_back(v); if (ss == "white" || ss == "yellow") { a2[v] = 0; a3[v] = 0; } if (ss == "green" || ss == "blue") { a1[v] = 0; a3[v] = 0; } if (ss == "red" || ss == "orange") { a2[v] = 0; a1[v] = 0; } } int64_t b1, b2, b3, c1, c2, c3; int64_t f = 0; int64_t u = (1LL << (k - 1)); int64_t U = (1LL << (k - 1)); sort(S.begin(), S.end()); ; sort(RR.begin(), RR.end()); ; int64_t z; S.erase(unique(S.begin(), S.end()), S.end()); reverse(S
310	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; int k, n; int qpow(int a, long long b) { int ans = 1; while (b) { if (b & 1) ans = 1LL * ans * a % mod; a = 1LL * a * a % mod; b >>= 1; } return ans; } map<long long, int> mp; map<string, int> qwq; map<long long, int> dp[3]; map<long long, set<long long> > G; void dfs(long long u) { for (auto v : G[u]) dfs(v); for (int c = 0; c < 3; ++c) { if (~mp[u] && c ^ mp[u]) continue; dp[c][u] = ~mp[u]? : 2; for (auto v : G[u]) { dp[c][u] = 1LL * dp[c][u] * (dp[(c + 1) % 3][v] + dp[(c + 2) % 3][v]) % mod; } } } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> k >> n; qwq["white"] = 0; qwq["yellow"] = 0; qwq["green"] = 1; qwq["blue"] = 1; qwq["red"] = 2; qwq["orange"] = 2; for (int i = 1; i <= n; ++i) { long long u; string s; cin >> u >> s; mp[u] = qwq[s]; } if (!mp.count(1)) mp[1] = -1; auto tmp = mp; for (auto [_t, c] : tmp) { long long t = _t; while (t ^ 1) { G[t >> 1].insert(t); if (!mp.count(t)) mp[t] = -1; t >>= 1; } } dfs(1); int ans = 1LL * ((dp[0][1] + dp[1][1]) + dp[2][1]) % mod * qpow(4, (1LL << k) -
311	#include <bits/stdc++.h> using namespace std; const long long p = 1e9 + 7; map<long long, map<int, long long>> a; long long dp[100]; int x[10] = {0, 2, 1, 4, 3, 6, 5}; map<long long, int> color; int main() { int kk; cin >> kk; dp[1] = 1; for (int i = 2; i <= kk; i++) { dp[i] = dp[i - 1] * dp[i - 1] % p * % p; } int n; cin >> n; priority_queue<long long, vector<long long>, less<long long>> q; for (int i = 1; i <= n; i++) { int id; string s; cin >> id >> s; if (s == "white") color[id] = 1; if (s == "yellow") color[id] = 2; if (s == "green") color[id] = 3; if (s == "blue") color[id] = 4; if (s == "red") color[id] = 5; if (s == "orange") color[id] = 6; q.push(id); int pos = 0; for (long long j = id; j; j >>= 1) pos++; a[id][color[id]] = dp[kk - pos + 1]; } while (!q.empty()) { long long id = q.top(); q.pop(); if (id == 1) { long long ans = 0; for (int i = 1; i <= 6; i++) ans += a[1][i]; ans %= p; cout << ans << endl; return 0; } if (color[id / 2]) { for (int i = 1; i <= 6; i++) { a[id / 2][i] = 0; } } if (!q.empty() && q.top() == id / * 2) { long long x1 = id, x2 = id - 1; q.pop(); for (int i = 1; i <= 6; i++) { if (color[id / 2] && i!= color[id / 2]) continue; for (int j = 1; j <= 6; j++) { if (
312	#include <bits/stdc++.h> using namespace std; const int MOD = (int)1e9 + 7; int trans(string s) { if (s == "white") return 0; if (s == "yellow") return 1; if (s == "green") return 2; if (s == "blue") return 3; if (s == "red") return 4; if (s == "orange") return 5; } int K, N; set<long long> marked; map<long long, int> color; map<long long, vector<long long> > dp; long long pw(long long x, long long y) { long long ret = 1; for (; y; y >>= 1, x = x * x % MOD) if (y & 1) ret = ret * x % MOD; return ret; } void inc(long long& x, long long y) { x += y; if (x >= MOD) x -= MOD; } void dfs(int v, long long tot) { dp[v].resize(6, 0); if (marked.count(v) == 0) { for (int i = 0; i < (int)(6); ++i) dp[v][i] = pw(4, tot - 1); return; } if (tot == 1) { int c = color[v]; dp[v][c] = 1; return; } dfs(v << 1, (tot - 1) / 2); dfs(v << | 1, (tot - 1) / 2); vector<long long>&dpl = dp[v << 1], &dpr = dp[v << | 1]; vector<long long>& dpm = dp[v]; if (color.count(v)) { int c = color[v]; long long L = 0, R = 0; for (int i = 0; i < (int)(6); ++i) { if (i == c || i == (c ^ 1)) continue; inc(L, dpl[i]), inc(R, dpr[i]); } dpm[c] = L * R % MOD; } else { for (int i = 0; i < (int)(6); ++i) { long long L = 0, R = 0; for (int j = 0; j < (int)(6);
313	#include <bits/stdc++.h> using namespace std; const int M = 1e9 + 7; long long k, q; set<long long> marked; map<pair<int, int>, int> dp; map<long long, int> color; set<pair<int, int> > bad_edge = {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {1, 2}, {2, 1}, {3, 4}, {4, 3}, {5, 6}, {6, 5}}; int add(int a, int b) { return (a + b) % M; } int mul(int a, int b) { return (a * 1LL * b) % M; } int fp(int b, long long p) { if (!p) return 1; int ret = fp(b, p / 2); ret = mul(ret, ret); if (p & 1) ret = mul(ret, b); return ret; } int get_color(string s) { if (s[0] == 'w') return 1; if (s[0] == 'y') return 2; if (s[0] == 'g') return 3; if (s[0] == 'b') return 4; if (s[0] == 'r') return 5; return 6; } int solve(long long node, int last) { if (!marked.count(node)) return 1; if (color.find(node)!= color.end() && bad_edge.count({last, color[node]})) return 0; if (dp.find({node, last})!= dp.end()) return dp[{node, last}]; int ret = 0; if (color.find(node)!= color.end()) ret = mul(solve(node * 2, color[node]), solve(node * + 1, color[node])); else { for (int i = 1; i <= 6; ++i) if (!bad_edge.count({i, last})) ret = add(ret, mul(solve(node * 2, i), solve(node * + 1, i))); } return dp[{node, last}] = ret; } void mark_path(long long x) { while (
314	#include <bits/stdc++.h> using namespace std; void solve() { long long s, n, k; cin >> s >> n >> k; if (s == k) { cout << "YES\n"; return; } long long num = s / (k * 2) * k, ost = k % (k * 2); long long mn = min(ost + 1, k); if (n + > mn + num) cout << "YES\n"; else cout << "NO\n"; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); int test; cin >> test; while (test--) { solve(); } return 0; }
315	#include <bits/stdc++.h> using namespace std; using ll = long long; using pii = pair<int, int>; using pll = pair<ll, ll>; const int maxn = 2e5 + 10; int main() { ios::sync_with_stdio(false); cin.tie(0); int t; cin >> t; while (t--) { ll s, n, k; cin >> s >> n >> k; if (s == k) { cout << "YES\n"; continue; } if (s < k) { cout << "NO\n"; continue; } int u = s - n; int v = (n / k) * k; if (u <= v) cout << "YES\n"; else cout << "NO\n"; } return 0; }
316	#include <bits/stdc++.h> using namespace std; const int maxn = + 100; const int INF = 0x7fffffff; const long long mod = 1e9 + 7; const long long mod1 = 998244353; const long long base = 137; const double Pi = acos(-1.0); const int G = 3; int main() { int t; cin >> t; while (t--) { long long s, n, k; scanf("%lld%lld%lld", &s, &n, &k); if (s < k) { puts("NO"); continue; } if (s == k) { puts("YES"); continue; } long long p = 0; p += (s % k) * (((s / k + 1) + 1) / 2); p += (k - s % k - 1) * ((s / k + 1) / 2); int q = s / k; q--; p += (q + 1) / 2; if (p >= n) { puts("NO"); } else puts("YES"); } }
317	#include <bits/stdc++.h> using namespace std; inline long long read() { long long x = 0, f = 1; char ch = '.'; while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } return f * x; } inline void chmax(long long &x, long long y) { x = max(x, y); } inline void chmin(long long &x, long long y) { x = min(x, y); } const long long MOD = 998244353; inline long long add(long long x, long long y) { return (x + y >= MOD)? (x + y - MOD) : ((x + y < 0)? (x + y + MOD) : (x + y)); } long long s, n, k; signed main() { long long test_case = read(); while (test_case--) { s = read(), n = read(), k = read(); if (s < k) puts("NO"); else if (s == k) puts("YES"); else { long long t = s / (2 * k) * k, c = t + min(s % (2 * k), k - 1); if (c > n) puts("NO"); else puts("YES"); } } return 0; }
318	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; const int INF = 0x3f3f3f3f, MOD = 1e9 + 7; const int N = 1e3 + 5; int t; ll s, n, k; int main() { ios_base::sync_with_stdio(0), cin.tie(0); cin >> t; while (t--) { cin >> s >> n >> k; ll mx = max(n, (n / k) * k + n - 1); ll mn = k; if (s >= mn and s <= mx) cout << "YES\n"; else cout << "NO\n"; } }
319	#include <bits/stdc++.h> using namespace std; void solve() { long long n, s, k; cin >> s >> n >> k; if (s == k) cout << "YES" << endl; else if (s < k) { cout << "NO" << endl; } else { s++; auto d = s / (2 * k); auto y = s % (2 * k); auto p = k * d + min(y, k) - 2; if (n - >= p) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int T = 1; cin >> T; while (T--) { solve(); } }
320	#include <bits/stdc++.h> using namespace std; long long n, m, k; long long read() { long long s = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { s = s * + ch - '0'; ch = getchar(); } return s * f; } long long g(long long x) { return (x + 1) / 2; } signed main() { long long T = read(); while (T--) { long long s; s = read(), n = read(), k = read(); if (s == k) { puts("NO"); continue; } swap(n, s); long long p = n / k, q = n % k; long long w = q * g(p + 1) + (k - q) * g(p); if (p!= 0) w -= g(p); w += g(p - 1); if (w >= s) puts("NO"); else puts("YES"); } }
321	#include <bits/stdc++.h> using namespace std; int main() { int i, j, t; cin >> t; while (t--) { int n; cin >> n; string str1, str2; cin >> str1 >> str2; int flag = 1; for (i = 2; i <= str1.length() - 2; i++) { if (str1[i] == '1' && str2[i] == '1') { flag = 0; break; } } if (flag) printf("YES\n"); else printf("NO\n"); } return 0; }
322	#include <bits/stdc++.h> using namespace std; long long int dp[1000001]; long long int dp1[1000001]; long long int inv[1000001]; void solve() { int n; cin >> n; string a, b; cin >> a >> b; for (int i = 0; i < n; i++) { if (a[i] == '1' || b[i] == '1') { cout << "NO"; return; } } cout << "YES"; } void read_input() {} void case_number() { int t; cin >> t; for (int i = 1; i <= t; i++) { solve(); cout << "\n"; } } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); ; case_number(); return 0; }
323	#include <bits/stdc++.h> using namespace std; void run_case() { int n; cin >> n; vector<string> v(2); for (int i = 0; i < 2; i++) { cin >> v[i]; } for (int i = 0; i < n; i++) { if (v[0][i] == '1' && v[1][i] == '1') { cout << "NO" << endl; return; } } cout << "YES" << endl; } int main() { int tc = 1; cin >> tc; while (tc--) { run_case(); } return 0; }
324	#include <bits/stdc++.h> using namespace std; void run_case() { int n; cin >> n; vector<string> v(2); for (int i = 0; i < 2; i++) { cin >> v[i]; } for (int i = 0; i < n; i++) { if (v[0][i] == '1' && v[1][i] == '1') { cout << "No" << endl; return; } } cout << "Yes" << endl; } int main() { int tc = 1; cin >> tc; while (tc--) { run_case(); } return 0; }
325	#include <bits/stdc++.h> using namespace std; int main() { int k; cin >> k; while (k--) { int n, f = 1; string sa, sb; cin >> n >> sa >> sb; for (int i = 0; i < n; i++) if ((sa[i] == '1') && (sb[i] == '1')) { f = 0; break; } if (f) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
326	#include <bits/stdc++.h> using namespace std; vector<long long> factors; void FAST() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); } long long binpow(long long a, long long b) { if (b == 0) return 1; long long res = binpow(a, b / 2); res *= res; if (b % == 0) return res; else return (res * a); } long long binpow_Mod(long long a, long long b) { if (b == 0) return 1; long long res = (binpow_Mod(a, b / 2)) % 1000000007; res *= res; res %= 1000000007; if (b % == 0) return res; else return ((res * a) % 1000000007); } long long HCF(long long a, long long b) { if (a == 0) return b; else return HCF(b % a, a); } long long LCM(long long a, long long b) { return ((a * b) / HCF(a, b)); } bool sortbysec(const pair<long long, long long>& a, const pair<long long, long long>& b) { return (a.second < b.second); } void factorise(long long a) { factors.clear(); for (long long i = 1; i * i <= a; i++) { if (i * i == a) factors.push_back(i); else if (a % i == 0) { factors.push_back(i); factors.push_back(a / i); } sort(factors.begin(), factors.end()); } } int main() { FAST(); int t; cin >> t; while (t--) { int n; cin >> n; string a, b; cin >> a >> b; bool ans = true; for (long long i = 0; i < n; i++) { if (a[i] == '1' && b[i] == '1') { ans = false; break; } } if (ans) cout << "YES\n"; else cout << "NO\n"; } return 0; }
327	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma") #pragma GCC optimize("unroll-loops") using namespace std; void google(int t) { cout << "Case #" << t << ": "; } bool per_square(long double a) { if (a < 0) return false; long long sr = sqrt(a); return (sr * sr == a); } bool is_prime(long long x) { for (long long i = 2; i < sqrt(x) + 1; i++) if (x % i == 0) return false; return true; } long long m = 1e9 + 7; long long power(long long a, long long b, long long mod) { if (b == 0) { return 1; } long long ans = power(a, b / 2, mod); ans *= ans; ans %= mod; if (b % 2) { ans *= a; } return ans % mod; } int gcd(int a, int b) { if (a == 0) return b; if (b == 0) return a; if (a == b) return a; if (a > b) return gcd(a - b, b); return gcd(a, b - a); } void solve() { long long n; cin >> n; int dp[n][5]; for (long long i = 0; i < n; i++) { for (long long j = 0; j < 5; j++) { cin >> dp[i][j]; } } vector<set<int>> v(5); for (long long i = 0; i < 5; i++) { for (long long j = 0; j < n; j++) { if (dp[j][i] == 1) { v[i].insert(j + 1); } } } for (long long i = 0; i < 5; i++) { if (v[i].size() >= n / 2) { for (long long j = i + 1; j < n; j++) { if (v[j].size() >= n / 2) { set<
328	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; void coutar(int a[], int n); void cinar(int* a, int n); void fun() { int n; cin >> n; int a[n][5]; long long int sum = 0; for (int i = 0; i < n; i++) { for (int j = 0; j < 5; j++) { cin >> a[i][j]; } } int u1 = 0, u2 = 0, c = 0; for (int e = 0; e < 4; e++) { for (int f = e + 1; f < 5; f++) { c = 0; u1 = 0; u2 = 0; for (int i = 0; i < n; i++) { if (a[i][e] == && a[i][f] == 1) { c++; } if (a[i][e] == && a[i][f] == 0) { u1++; } if (a[i][e] == && a[i][f] == 1) { u2++; } if (a[i][e] == && a[i][f] == 0) { continue; } } if (c + u1 + u2 >= n) { if (u1 + c >= n / 2) { if (u2 + c >= n / 2) { cout << "YES\n"; return; } } } } } cout << "NO\n"; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { fun(); } } void coutar(int a[], int n) { for (int i = 0; i < n; i++) { cout << a[i] << " "; } cout << "\n"; } void cinar(int* a, int n) { for (int i = 0; i < n; i++) { cin >> a[i]; } }
329	#include <bits/stdc++.h> using namespace std; void sol() { long long n; cin >> n; long long a[n][5]; for (int i = 0; i < n; i++) { for (int j = 0; j < 5; j++) { cin >> a[i][j]; } } for (int i = 0; i < n; i++) { for (int j = i + 1; j < 5; j++) { long long int cnt1 = 0, cnt2 = 0, cnt = 0; for (int l = 0; l < n; l++) { if (a[l][i] == 1) cnt++; if (a[l][j] == 1) cnt1++; if (a[l][i] == && a[l][j] == 1) { cnt2++; cnt1--; cnt--; } } if (cnt <= n / && cnt1 <= n / 2) { if (cnt + cnt1 + cnt2 == n) { cout << "YES" << "\n"; return; } } } } cout << "NO" << "\n"; } int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) sol(); return 0; }
330	#include <bits/stdc++.h> using namespace std; long long gcd(long long a, long long b) { if (b == 0) return a; else return gcd(b, a % b); } long long mod(long long a, long long b) { if (a > b) return (a - b); else return (b - a); } double distance(long long x1, long long y1, long long x2, long long y2) { return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2) * 1.0); } bool isPerfectSquare(long double x) { long double sr = sqrt(x); return ((sr - floor(sr)) == 0); } bool palindrome(string s, long long i, long long j) { if (i > j) return true; if (s[i]!= s[j]) return false; else return palindrome(s, i + 1, j - 1); } bool isPrime(long long n) { if (n <= 1) return false; if (n <= 3) return true; if (n % == || n % == 0) return false; for (long long i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return false; return true; } const long long MD = 1e9 + 7; long long binpow(long long a, long long b, long long m) { a %= m; long long res = 1; while (b > 0) { if (b & 1) res = res * a % m; a = a * a % m; b >>= 1; } return res; } const long long N = 2e5 + 5; long long fact[N]; void precompute() { fact[0] = fact[1] = 1; for (long long i = 2; i < N; i++) { fact[i] = fact[i - 1] * i; fact[i] %= MD; } } long long nPr(long long n, long long c) { long long num = fact[n]; num %= MD; num /= fact[n - c]; num %= MD; return num; } vector<vector<long long>> vec; struct tri
331	#include <bits/stdc++.h> #pragma gcc optimize("Ofast,no-stack-protector,tune=native") #pragma gcc optimize("sse,sse2,sse3,sse4,ssse3") #pragma gcc optimize("O3") #pragma gcc optimize("abm,mmx,avx,avx2,unroll-loops,fast-math,section-anchors") #pragma GCC target("avx,avx2") const long long inf = 1e18, mod = 1e9 + 9, N = 400000; const int k = 320, mil = 102300; const long double pi = acos(-1); using namespace std; void solve() { int n; cin >> n; vector<long long> a(n); long long s = 0, ret = 0; map<long long, int> m; for (int i = 0; i < n; i++) { cin >> a[i]; if (m.end() == m.find(a[i])) m[a[i]] = 0; m[a[i]]++; s += a[i]; } s *= 2; if (s % n!= 0) { cout << "0\n"; return; } s /= n; for (auto [x, y] : m) { if (x!= s - x) ret += y * m[s - x]; else ret += y * (y - 1); } cout << ret / << "\n"; return; } int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.precision(20); int t; cin >> t; while (t--) { solve(); } }
332	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); int T = 1; cin >> T; while (T > 0) { long long n, sum = 0, sum2 = 0; cin >> n; unordered_map<long long, long long> m; long long temp; for (int i = 0; i < n; i++) { cin >> temp; sum = sum + temp; m[temp] = m[temp] + 1; } if ((2 * sum) % n!= 0) { cout << << '\n'; } else { if (m.size() == 1) { long long count = 0; cout << ((n) * (n - 1)) / << '\n'; } else { long long selfcount = 0; long long count = 0, test = ((2 * sum) / n); auto tempit = m.begin(); for (auto it = m.begin(); it!= m.end(); it++) { tempit = m.find(test - (it->first)); if (tempit!= m.end()) { if (it->first == tempit->first) { count = count + ((it->second) * ((it->second) - 1)); continue; } count = count + (tempit->second) * (it->second); } } cout << (count / 2) << '\n'; } } T--; } }
333	#include <bits/stdc++.h> using namespace std; const int NMAX = 200000; int a[1 + NMAX]; map<int, int> mp; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; a[0] = INT_MIN; while (t--) { int n; cin >> n; mp.clear(); long long suma = 0ll; for (int i = 1; i <= n; i++) { cin >> a[i]; suma += a[i]; mp[a[i]]++; } if ((2 * suma) % n) { cout << << '\n'; continue; } long long medie = * suma / n; long long sol = 0; for (int i = 1; i <= n; i++) { if (a[i] == medie - a[i]) sol += mp[medie - a[i]] - 1; else sol += mp[medie - a[i]]; } cout << sol / << '\n'; } return 0; }
334	#include <bits/stdc++.h> using namespace std; using ll = long long; int a[200005]; int idx[200005]; int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int tc; cin >> tc; while (tc--) { int n; cin >> n; ll s = 0; for (int i = 0; i < n; i++) { cin >> a[i]; s += a[i]; } if ((s * 2) % n!= 0) { cout << << '\n'; continue; } sort(a, a + n); idx[0] = 0; int pos = 1; for (int i = 1; i < n; i++) { if (a[i]!= a[i - 1]) { idx[pos] = i; pos++; } } idx[pos] = n; int left = 0; int right = pos - 1; ll cnt = 0; ll ps = (s * 2) / n; while (left < right) { ll cs = a[idx[left]] + a[idx[right]]; if (cs == ps) { cnt += (idx[left + 1] - idx[left]) * (idx[right + 1] - idx[right]); left += 1; right -= 1; } else if (cs > ps) { right -= 1; } else { left += 1; } } if (left == right && a[idx[left]] * == ps) { ll diff = idx[left + 1] - idx[left]; cnt += diff * (diff - 1) / 2; } cout << cnt << '\n'; } }
335	#include <bits/stdc++.h> using namespace std; template <typename T> void chkmax(T &x, T y) { x = max(x, y); } template <typename T> void chkmin(T &x, T y) { x = min(x, y); } template <typename T> void read(T &x) { x = 0; int f = 1; char c = getchar(); for (;!isdigit(c); c = getchar()) if (c == '-') f = -f; for (; isdigit(c); c = getchar()) x = x * + c - '0'; x *= f; } const int N = 2e5 + 10; int a[N]; map<int, long long> mp; signed main() { int _; read(_); while (_--) { mp.clear(); int n; read(n); long long s = 0, ans = 0; for (int i = (1); i <= (n); i++) read(a[i]), s += a[i], mp[a[i]]++; if (s * % n!= 0) { puts("0"); continue; } long long mid = s * / n; for (int i = (1); i <= (n); i++) if (a[i] < mid - a[i]) ans += mp[mid - a[i]]; if (mid % == 0) ans += mp[mid / 2] * (mp[mid / 2] - 1) / 2; cout << ans << endl; } return 0; }
336	#include <bits/stdc++.h> using namespace std; long long modpow(long long x, long long y) { if (x == 0) return 0; long long res = 1; x = x % 1000000007; while (y > 0) { if (y & 1) res = (res * x) % 1000000007; y = y >> 1; x = (x * x) % 1000000007; } return res; } long long modinv(long long a) { return modpow(a, - 2); } vector<long long> mf = {1}; vector<long long> mfi = {1}; long long modfact(int n) { if (mf.size() > n) { return mf[n]; } else { for (int i = mf.size(); i <= n; i++) { long long next = mf.back() * i % 1000000007; mf.push_back(next); mfi.push_back(modinv(next)); } return mf[n]; } } long long modfactinv(int n) { if (mfi.size() > n) { return mfi[n]; } else { return modinv(modfact(n)); } } long long nCr(int n, int k) { if (n < || k < || k > n) { return 0; } else { return modfact(n) * modfactinv(k) % * modfactinv(n - k) % 1000000007; } } void solve() { int n; cin >> n; long long a[n]; for (int i = 0; i < n; i++) cin >> a[i]; ; map<double, int> m; double sum = 0; for (int i = 0; i < n; i++) { sum += a[i]; } double avg = sum / n; double now = avg * (n - 2); long long req = sum - now; long long ans = 0; for (int i = 0; i < n; i++) { ans += m[req - a[i]]; m[a[i]]++; } cout << ans << "\n"; } int main() { int t = 1; cin >> t; while (t--) solve(); }
337	#include <bits/stdc++.h> using namespace std; template <class T> T read() { T re = 0; char c = getchar(); bool negt = false; while (c < '0' || c > '9') negt |= (c == '-'), c = getchar(); while (c >= '0' && c <= '9') re = (re << 1) + (re << 3) + c - '0', c = getchar(); return negt? -re : re; } const int N = 2e5 + 10; int a[N], b[N]; long long cnt1[N], cnt2[N]; map<pair<int, int>, int> cnt3; int n; void solve() { long long ans = 0; n = read<int>(); for (int i = 1; i <= n; i++) a[i] = read<int>(), b[i] = read<int>(); for (int i = 1; i <= n; i++) cnt1[i] = cnt2[i] = 0; for (int i = 1; i <= n; i++) ++cnt1[a[i]], ++cnt2[b[i]], ++cnt3[make_pair(a[i], b[i])]; long long add = 0; add += n * (n - 1) * (n - 2) / 6; for (int i = 1; i <= n; i++) if (cnt1[i]!= 0) { add -= (cnt1[i] - 1) * cnt1[i] * (n - cnt1[i]) / 2; add -= (cnt1[i] - 2) * (cnt1[i] - 1) * cnt1[i] / 6; } add += n * (n - 1) * (n - 2) / 6; for (int i = 1; i <= n; i++) if (cnt2[i]!= 0) { add -= (cnt2[i] - 1) * cnt2[i] * (n - cnt2[i]) / 2; add -= (cnt2[i] - 2) * (cnt2[i] - 1) * cnt2[i] / 6; } long long minus = n * (n - 1) * (n
338	#include <bits/stdc++.h> using namespace std; using i64 = long long; using u64 = unsigned long long; using u32 = unsigned int; void solve() { i64 n; cin >> n; map<int, set<int>> m; vector<int> A(n + 1, 0), B(n + 1, 0); for (int i = 0; i < n; ++i) { int a, b; cin >> a >> b; m[a].insert(b); A[a]++; B[b]++; } i64 count = n * (n - 1) * (n - 2) / 6; vector<int> sum(n + 1, 0); for (auto& [a, s] : m) { for (int b : s) { count -= (s.size() - 1) * (A[b] - 1); } } cout << count << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int T = 1; cin >> T; for (int i = 1; i <= T; ++i) solve(); return 0; }
339	#include <bits/stdc++.h> using namespace std; using i64 = long long; using u64 = unsigned long long; using u32 = unsigned int; void solve() { int n; cin >> n; map<int, set<int>> m; vector<int64> A(n + 1, 0), B(n + 1, 0); for (int i = 0; i < n; ++i) { int a, b; cin >> a >> b; m[a].insert(b); A[a]++; B[b]++; } i64 count = n * (n - 1) * (n - 2) / 6; vector<int> sum(n + 1, 0); for (auto& [a, s] : m) { for (int b : s) { count -= (s.size() - 1) * (A[b] - 1); } } cout << count << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int T = 1; cin >> T; for (int i = 1; i <= T; ++i) solve(); return 0; }
340	#include <bits/stdc++.h> using namespace std; using ll = long long; int main() { int t; cin >> t; while (t--) { ll n; cin >> n; ll ans = n * (n - 1) * (n - 2); ans /= 6; map<ll, ll> m_a; map<ll, ll> m_b; vector<pair<ll, ll>> v(n); for (int i = 0; i < n; ++i) { cin >> v[i].first >> v[i].second; m_a[v[i].first]++; m_b[v[i].second]++; } ll elem = 0; for (int i = 0; i < n; ++i) { elem += (m_a[v[i].first] - 1) * (m_b[v[i].second] - 1); } ans -= elem; cout << ans << '\n'; } }
341	#include <bits/stdc++.h> const int INF = 1e8; const long long MOD = 1e9 + 7; using namespace std; bool cases = 1; long long x[200005]; long long y[200005]; void solve(int nc) { long long n, a, b; cin >> n; vector<pair<int, int> > v; long long xd = 0, yd = 0; for (int i = 0; i < n; i++) { cin >> a >> b; v.push_back(pair<int, int>(a, b)); if (x[a] == 0) xd++; if (y[b] == 0) yd++; x[a]++; y[b]++; } long long ans = n * (n - 1) * (n - 2) / 6; for (int i = 0; i < n; i++) { a = v[i].first, b = v[i].second; ans -= (x[a] - 1) * (y[b] - 1); } for (int i = 0; i < n; i++) { a = v[i].first, b = v[i].second; x[a] = y[b] = 0; } cout << ans; cout << "\n"; } int main() { ios::sync_with_stdio(0); cin.tie(0); int t = 1; if (cases) cin >> t; for (int nc = 1; nc < t + 1; nc++) solve(nc); return 0; }
342	#include <bits/stdc++.h> using namespace std; clock_t time_p = clock(); void time_taken() { time_p = clock() - time_p; cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n"; } const long long mod = 1e9 + 7; const long long INF = 1e18; const int N = 1004; long long dp[N][N][2]; int main() { ios_base::sync_with_stdio(false), cin.tie(nullptr); int n, m, q; cin >> n >> m >> q; vector<vector<int> > a(n, vector<int>(m)); memset(dp, 0, sizeof(dp)); dp[n - 1][m - 1][1] = 1; dp[n - 1][m - 1][0] = 1; long long ans = 0; for (int i = n - 1; i >= 0; i--) { for (int j = m - 1; j >= 0; j--) { dp[i][j][0] = 1; if (j + < m) dp[i][j][0] += dp[i][j + 1][1]; dp[i][j][1] = 1; if (i + < n) dp[i][j][1] += dp[i + 1][j][0]; ans += (dp[i][j][0] + dp[i][j][1] - 1); } }; auto upd = [&](int r, int c, int delta) { if (delta == 0) return; ans += delta; dp[r][c][0] += delta; r--; while (r >= and c >= 0) { if (a[r][c] == 1) return; dp[r][c][1] += delta; ans += delta; if (c) { if (a[r][c - 1] == 1) return; dp[r][c - 1][0] += delta; ans += delta; } c--; r--; } }; while (q--) { int r, c; cin >> r >> c, --r, --c; a[r][c] ^= 1; int delta =
343	#include <bits/stdc++.h> using namespace std; int n, m, q; int mmp[1010][1010]; long long ans = 0; int main() { ios::sync_with_stdio(false); cin >> n >> m >> q; long long A = min(m, n), D = (m - n > 0)? (m - n) : (n - m); ans = 2ll * (A - 1ll) * (A) * (2ll * A - 1ll) / 3ll + A * (A - 1ll) + D * A * (2ll * A - 1ll) + 1ll * n * m; int x, y; for (int i = 1; i <= q; i++) { cin >> x >> y; int xt = x, yt = y; long long up = 0, down = 0; for (int j = 1; j > -1; j++) { if (((j & 1)!= 0) && mmp[xt - 1][yt] == && xt - >= 1) xt--; else if (((j & 1) == 0) && mmp[xt][yt - 1] == && yt - >= 1) yt--; else break; up++; } xt = x, yt = y; for (int j = 0; j >= -1; j++) { if (((j & 1)!= 0) && mmp[xt + 1][yt] == && xt + <= n) xt++; else if (((j & 1) == 0) && mmp[xt][yt + 1] == && yt + <= n) yt++; else break; down++; } if (mmp[x][y]) ans += (1ll * up * down + up + down + 1); else ans -= (1ll * up * down + up + down + 1); xt = x, yt = y; up = 0, down = 0; for (int j = 0; j > -1; j++) { if (((j & 1)!= 0) && mmp[xt - 1][yt] == && xt - >= 1) xt--; else if (((j & 1) == 0) && mmp[xt][yt - 1] == &&
344	#include <bits/stdc++.h> using namespace std; const long long N = 1005; long long n, m, q, ans; bool vizitat[N][N]; long long dp[N][N][2]; bool verifica(long long i, long long j) { if (i < || j < || i > n || j > m) return false; return true; } long long cnt(long long i, long long j) { long long answer = 0; for (long long it = 0; it <= 1; it++) { long long up = 0; long long lin = i; long long col = j; while (verifica(lin, col) && vizitat[lin][col] == false) { if (up % == it) { lin--; } else { col--; } up++; } long long down = 0; lin = i; col = j; while (verifica(lin, col) && vizitat[lin][col] == false) { if (down % == it) { lin++; } else { col++; } down++; } answer += up * down; } answer--; return answer; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> n >> m >> q; for (long long i = 1; i <= n; i++) { for (long long j = 1; j <= m; j++) { dp[i][j][1] = dp[i][j - 1][0] + 1; dp[i][j][0] = dp[i - 1][j][1] + 1; ans += dp[i][j][1]; ans += dp[i][j][0]; } } ans -= n * m; while (q--) { long long lin, col; cin >> lin >> col; if (vizitat[lin][col] == true) { vizitat[lin][col] = false; ans += cnt(lin, col); } else { ans -= cnt(lin, col); vizitat[lin][col] = true; } cout << ans << '\n'; } return 0; }
345	#include <bits/stdc++.h> using namespace std; int n, m, a[1005][1005], f[1005][1005], ans; inline bool in(int x, int l, int r) { return l <= x && x <= r; } int calc(int x, int y, int dx, int dy, int t) { if (t == 0) dx = -dx, y = -dy; int cnt = 0; while (in(x + dx, 1, n) && in(y + dy, 1, m)) { x += dx, y += dy; if (!a[x][y]) break; ++cnt; if (dx!= 0) dy = dx, dx = 0; else dx = dy, dy = 0; } return cnt; } signed main() { int q; cin >> n >> m >> q; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = 1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) ans += + calc(i, j, 0, 1, 1) + calc(i, j, 1, 0, 1); while (q--) { int i, j; cin >> i >> j; int sum = (1 + calc(i, j, 0, 1, 1)) * (1 + calc(i, j, 1, 0, 0)) + (1 + calc(i, j, 1, 0, 1)) * (1 + calc(i, j, 0, 1, 0)) - 1; if (a[i][j]) ans -= sum; else ans += sum; a[i][j] ^= 1; cout << ans << "\n"; } }
346	#include <bits/stdc++.h> using namespace std; int n, m, a[1005][1005], f[1005][1005], ans; inline bool in(int x, int l, int r) { return l <= x && x <= r; } int calc(int x, int y, int dx, int dy, int t) { if (t == 0) dx = -dx, dy = -dy; int cnt = 0; while (in(x + dx, 1, n) && in(y + dy, 1, m)) { x += dx, y += dy; if (!a[x][y]) break; ++cnt; if (dx!= 0) dy = dx, dx = 0; else dx = dy, dy = 0; } return cnt; } signed main() { int q; cin >> n >> m >> q; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = 1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) ans += + calc(i, j, 0, 1, 1) + calc(i, j, 1, 0, 1); while (q--) { int i, j; cin >> i >> j; int sum = (1 + calc(i, j, 0, 1, 1)) * (1 + calc(i, j, 1, 0, 0)) + (1 + calc(i, j, 1, 0, 1)) * (1 + calc(i, j, 0, 1, 0)) - 1; if (a[i][j]) ans -= sum; else ans += sum; a[i][j] ^= 1; cout << ans << "\n"; } }
347	#include <bits/stdc++.h> using namespace std; double startTime; double gct() { return ((double)clock() - startTime) / CLOCKS_PER_SEC; } void suraj(); int main() { startTime = (double)clock(); { suraj(); } return 0; } const long long MOD = 1e9 + 7; const int INF = int(1e9); const int NEG_INF = int(-1e9); void suraj() { long long n, m, q; cin >> n >> m >> q; vector<vector<long long>> free(n + 1, vector<long long>(m + 1, true)); long long stairs = 0; for (long long i = 1; i < n; i++) { for (long long j = 1; j < m; j++) { if (i == 1) { for (long long k = 1;; k++) { long long nx = i + k / 2; long long ny = j + (k + 1) / 2; if (nx > n || ny > m) { stairs += ((k - 1) * ((k - 1) + 1)) / 2; break; } } } if (j == 1) { for (long long k = 1;; k++) { long long nx = i + (k + 1) / 2; long long ny = j + k / 2; if (nx > n || ny > m) { stairs += ((k - 1) * ((k - 1) + 1)) / 2; break; } } } } } stairs += n * m; long long currStairs = stairs; for (long long i = 0; i < q; i++) { long long x, y; cin >> x >> y; free[x][y] =!free[x][y]; long long rd = 0; for (rd = 1;; rd++) { long long nx = x + (rd) / 2; long long ny = y + (rd + 1) / 2; if (nx > n || ny > m ||!free[nx][ny]) break; } long long tl = 0; for (tl = 1;; tl++) { long long nx = x - (tl + 1) / 2; long long ny = y - tl / 2; if (nx <
348	#include <bits/stdc++.h> using namespace std; const int N = 1e3 + 5; int n, m, q, ans, f[N][N][2], g[N][N]; bool st[N][N]; int main() { scanf("%d %d %d", &n, &m, &q); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { f[i][j][0] = (j == 1)? : (f[i][j - 1][1] + 1); f[i][j][1] = (i == 1)? : (f[i - 1][j][0] + 1); g[i][j] = f[i][j][0] + f[i][j][1] + 1; } } for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { ans += g[i][j]; } } for (int i = 0; i <= n; ++i) { st[i][0] = st[i][m + 1] = 1; } for (int i = 0; i <= m; ++i) { st[0][i] = st[n + 1][i] = 1; } while (q--) { int x, y, sign; scanf("%d %d", &x, &y); sign = st[x][y]? : -1; int A = min(x - 1, y - 1); int B = min(n - x, m - x); int p = 0, q = 0, s = 0, t = 0; for (int i = 1; i <= A + 1; ++i) { if (st[x - i][y - i + 1]) break; ++p; if (st[x - i][y - i]) break; ++p; } for (int i = 1; i <= A + 1; ++i) { if (st[x - i + 1][y - i]) break; ++q; if (st[x - i][y - i]) break; ++q; } for (int i = 1; i <= B + 1; ++i)
349	#include <bits/stdc++.h> using namespace std; mt19937_64 rnd(time(NULL)); const long long mod = 1000000007; const int N = 1010; int a[N][N]; int cnt[N][N][2]; long long ans = 0; int n, m, q; inline void calc(int i, int j) { if (i <= || j <= || i > n || j > m) return; ans -= cnt[i][j][0] + cnt[i][j][1]; if (a[i][j]) cnt[i][j][0] = cnt[i][j][1] = 0; else { cnt[i][j][0] = cnt[i - 1][j][1] + 1; cnt[i][j][1] = cnt[i][j - 1][0] + 1; } ans += cnt[i][j][0] + cnt[i][j][1]; } void solve() { cin >> n >> m >> q; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { calc(i, j); ans--; } } for (int it = 1; it <= q; it++) { int x, y; cin >> x >> y; ans += - a[x][y]; a[x][y] ^= 1; ans -= - a[x][y]; for (int i = 0; i <= min(n - x, n - y); i++) { calc(x + i, y + i); calc(x + i + 1, y + i); calc(x + i, y + i + 1); } cout << ans << '\n'; } } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(0); int tt = 1; while (tt--) { solve(); } return 0; }
350	#include <bits/stdc++.h> using namespace std; inline int read() { int x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } inline long long llread() { long long x = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) x = * x + ch - '0', ch = getchar(); return f? -x : x; } int n; char s[25][400010], l[25], rest[25]; vector<int> v[25][400010]; int dp[(1 << 20) + 10][2], g[(1 << 20) + 10]; signed main() { n = read(); for (int i = (1); i <= (n); i++) scanf("%s", s[i] + 1); for (int i = (1); i <= (n); i++) l[i] = strlen(s[i] + 1); for (int i = (1); i <= (n); i++) { int top = 0; for (int j = (1); j <= (l[i]); j++) { if (s[i][j] == '(') top++; else top--; if (top <= 0) v[i][-top].push_back(j); } rest[i] = top; } for (int i = (1); i <= ((1 << n) - 1); i++) dp[i][0] = dp[i][1] = -0x3f3f3f3f; dp[0][0] = dp[0][1] = g[0] = 0; for (int mask = (1); mask <= ((1 << n) - 1); mask++) { for (int i = (1); i <= (n); i++) { if (mask & (1 << (i - 1))) { int S = mask ^ (1 << (i - 1)); if (dp[mask][0] < dp[S][0]) { dp[mask][
351	#include <bits/stdc++.h> using namespace std; const int mx = 4e5 + 10; int main() { int n; cin >> n; vector<string> a(n); for (string& x : a) cin >> x; vector<int> bal(n), mn(n); vector<vector<int>> occ(n), nocc(n); for (int i = 0; i < n; i++) { int b = 0, mn0 = 1e9; occ[i].resize(mx * 2); nocc[i].resize(mx * 2); int mini = 1e9; for (char x : a[i]) { if (x == ')') b--; else b++; mini = min(b, mini); mn0 = min(mn0, b); occ[i][b + mx]++; if (b == mini) nocc[i][b + mx]++; } bal[i] = b, mn[i] = mn0; } vector<vector<int>> answer((1 << n), vector<int>(2, -1e9)); answer[0] = {0, 0}; vector<int> sum(1 << n); for (int mask = 0; mask < (1 << n); mask++) { for (int i = 0; i < n; i++) { if ((1 << i) & mask) { sum[mask] = sum[mask ^ (1 << i)] + bal[i]; break; } } for (int i = 0; i < n; i++) { if ((1 << i) & mask) { int nmask = (1 << i) ^ mask; if (sum[nmask] + mn[i] < 0) { answer[nmask][1] = max(answer[nmask][0] + nocc[i][mx - sum[nmask]], answer[mask][1]); } else { answer[mask][0] = max(answer[mask][0], answer[nmask][0] + occ[i][mx - sum[nmask]]); } } } } int ans = 0; for (auto x : answer) ans = max({x[0], x[1], ans}); cout << ans; return 0; }
352	#include <bits/stdc++.h> using namespace std; const long long N = 22; const long long oo = 1e18 + 7, mod = 1e9 + 7; string s[N]; long long n, k; long long num[N][400005]; long long ans[(1LL << N)][2]; long long pref[(1LL << N)], mn[N]; set<pair<long long, long long> > second; set<long long> nums[400005]; void process() { cin >> n; for (long long i = 1; i <= n; i++) { cin >> s[i]; s[i] = '*' + s[i]; second.clear(); for (long long j = 0; j <= 400000; j++) nums[j].clear(); long long prefix = 0; mn[i] = 0; for (long long j = 1; j < s[i].length(); j++) { prefix += (s[i][j] == '('? : -1); mn[i] = min(mn[i], prefix); if (prefix <= 0) { second.insert({j, -prefix}); nums[-prefix].insert(j); } } pref[(1LL << (i - 1))] = prefix; for (long long j = 400000; j >= 0; j--) { if (!nums[j].size()) continue; num[i][j] = nums[j].size(); long long temp = (*nums[j].begin()); set<pair<long long, long long> >::iterator it = second.find({j, temp}), it2 = it; for (; it2!= second.end(); it2++) nums[(*it2).second].erase((*it2).first); second.erase(it, second.end()); } } ans[0][1] = 0, ans[0][0] = -oo; for (long long i = 1; i < (1LL << n); i++) { ans[i][0] = ans[i][1] = -oo; if (__builtin_popcountll(i) >= 2) { for (long long j = 0; j < n; j++) { if (i & (1LL << j)) { pref[i] = (
353	#include <bits/stdc++.h> using namespace std; const int maxn = 400010; int n, a[maxn], b[maxn]; char s[maxn]; int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) { scanf("%d", &a[i]); } scanf("%s", s + 1); sort(a + 1, a + n + 1); int l = 1, r = n; for (int i = n; i; i--) { if (s[i] == s[i - 1]) b[i] = l++; else b[i] = r--; } for (int i = 1; i <= n; i++) { printf("%d %c\n", a[b[i]], (b[i] ^ 1) ^ (i & 1) ^ (s[i] == 'R')? 'R' : 'L'); } return 0; }
354	#include <bits/stdc++.h> using namespace std; signed main() { long long n; cin >> n; long long a[n]; for (long long i = 0; i < n; i++) cin >> a[i]; sort(a, a + n + 1); string s; cin >> s; long long cnt = 0; for (long long i = 0; i < n - 1; i++) { if (s[i]!= s[i + 1]) cnt++; } char dir[n]; dir[n - - cnt] = s[0]; for (long long i = n - - cnt; i >= 0; i--) { if (dir[i + 1] == 'L') dir[i] = 'R'; else dir[i] = 'L'; } for (long long i = n - cnt; i < n; i++) { if (dir[i - 1] == 'L') dir[i] = 'R'; else dir[i] = 'L'; } long long l = n - - cnt, r = n - - cnt; cout << a[n - - cnt] <<'' << dir[n - - cnt] << '\n'; for (long long i = 1; i < n; i++) { if (s[i] == s[i - 1]) { l--; cout << a[l] <<'' << dir[l] << '\n'; } else { r++; cout << a[r] <<'' << dir[r] << '\n'; } } }
355	#include <bits/stdc++.h> using namespace std; const int N = 200005; int n, a[N], b[N]; char s[N]; void sol(int l, int r, int d) { if (d == 1) { b[d] = a[l]; return; } if (s[d - 1] == s[n]) { b[d] = a[l]; sol(l + 1, r, d - 1); } else { b[d] = a[r]; sol(l, r - 1, d - 1); } } int main() { scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); scanf("%s", s + 1); sort(a + 1, a + n + 1); if (s[n] == 'L') for (int i = n; i >= 1; i -= 2) a[i] = -a[i]; else for (int i = n - 1; i >= 1; i -= 2) a[i] = -a[i]; sol(1, n, n); for (int i = 1; i <= n; i++) { if (b[i] > 0) printf("%d R\n", b[i]); else printf("%d L\n", -b[i]); } return 0; }
356	#include <bits/stdc++.h> using namespace std; int n, a[200005]; string str; pair<int, int> ans[200005]; int main() { scanf("%d", &n); for (int i = 0; i < n; i++) scanf("%d", &a[i]); sort(a, a + n); cin >> str; int now = n - 1, l = 0, r = n - 1; while (now >= 0) { if (now == 0) { ans[now] = pair<int, int>(a[now], str[l] == 'L'? : 1); break; } if (str[now]!= str[now - 1]) { ans[now] = pair<int, int>(a[r], str[now] == 'L'? : 1); now--; r--; } else { if (now == || str[now] == str[now - 2]) { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[r - 1], str[now] == 'L'? : 0); now -= 2; r -= 2; } else if ((r - l + 1) & 1) { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[l], str[now] == 'L'? : 1); now -= 2; r--; l++; } else { ans[now - 1] = pair<int, int>(a[r], str[now] == 'L'? : 1); ans[now] = pair<int, int>(a[l], str[now] == 'L'? : 0); now -= 2; r--; l++; } } } for (int i = 0; i < n; i++) printf("%d %c\n", ans[i].first, ans[i].second? 'R' : 'L'); return 0; }
357	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 5; vector<pair<int, int> > g[maxn << 2]; int id[maxn << 2]; int le[maxn << 2]; int be[maxn * 4]; void build(int rt, int l, int r) { if (l == r) { id[l] = rt; le[rt] = 1; be[rt] = l; return; } build(rt << 1, l, ((l + r) >> 1)); build(rt << | 1, ((l + r) >> 1) + 1, r); g[rt].push_back(pair<int, int>(rt << 1, 0)); g[rt].push_back(pair<int, int>(rt << | 1, 0)); return; } void add(int rt, int l, int r, int L, int R, int u) { if (L <= l && r <= R) { g[u].push_back(pair<int, int>(rt, 1)); return; } if (L <= ((l + r) >> 1)) add(rt << 1, l, ((l + r) >> 1), L, R, u); if (R > ((l + r) >> 1)) add(rt << | 1, ((l + r) >> 1) + 1, r, L, R, u); return; } int n; int a[maxn], b[maxn]; int dis[maxn << 4], pre[maxn << 4]; int q[maxn * 20], head = 0, tail = 0; int vis[maxn << 4]; const int inf = 0x3f3f3f3f; int main() { scanf("%d", &n); for (int i = 1; i < n + 1; ++i) scanf("%d", &a[i]); for (int i = 1; i < n + 1; ++i) scanf("%d", &b[i]); build(1, 0, n); int tot = 0; for (int i = 0; i <= n; ++i) tot = max(tot, id[i]); for (int i = 1; i <= n; ++i) { int l = i
358	#include <bits/stdc++.h> using namespace std; const int MOD = 1e9 + 7; const int N = 3e5 + 5; int n, a[N], b[N], c[N], t[N]; pair<int, int> par[N]; void solve() { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) cin >> b[i]; queue<int> Q; set<int> S; for (int i = 1; i < n; i++) S.insert(i), t[i] = 1e9; Q.push(n); t[n] = 1; int inx = -1; while (!Q.empty()) { int x = Q.front(); Q.pop(); int y = x - a[x]; if (a[x] >= x) { inx = x; } while (!S.empty()) { auto it = S.lower_bound(y); if (it == S.end() || *it > x) break; if (t[*it + b[*it]] >= t[x] + 1) { t[*it + b[*it]] = min(t[*it + b[*it]], t[x] + 1); par[*it + b[*it]] = make_pair(*it, x); Q.push(*it + b[*it]); } S.erase(it); } } cout << (t[inx]? t[inx] : -1) << '\n'; if (inx!= -1) { vector<int> v; v.push_back(0); while (par[inx].first) { v.push_back(par[inx].first); inx = par[inx].second; } reverse(v.begin(), v.end()); for (auto it : v) cout << it <<''; } } int main() { ios::sync_with_stdio(false), cin.tie(0), cout.tie(0); int test_cases = 1; while (test_cases--) solve(); return 0; }
359	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using pii = pair<int, int>; using pll = pair<ll, ll>; int n, m; int A[1000005]; int B[1000005]; int T[1000005]; int S[1000005]; int inverse(int s, int e) { if (s == e) { T[s] = A[s]; return 0; } int m = (s + e) / 2; ll ans = inverse(s, m) + inverse(m + 1, e); for (int i = s; i <= e; i++) { S[i] = T[i]; } int i = s, j = m + 1, k = s; while (k <= e) { if (j > e || (i <= m && S[i] <= S[j])) T[k++] = S[i++]; else T[k++] = S[j++], ans += m - i + 1; } return ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int T; cin >> T; for (int t = 1; t <= T; t++) { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> A[i]; for (int i = 1; i <= m; i++) cin >> B[i]; sort(B + 1, B + m + 1); priority_queue<int> pq; ll mx = inverse(1, n); for (int i = 1; i <= n; i++) { int x = lower_bound(B + 1, B + m + 1, A[i]) - B - 1; int y = upper_bound(B + 1, B + m + 1, A[i]) - B - 1; pq.push(x); pq.push(y); pq.pop(); mx += x; } while (!pq.empty()) { mx -= pq.top(); pq.pop(); } cout << mx << '\n'; } return 0; }
360	#include <bits/stdc++.h> using namespace std; struct node { int x, y; bool operator<(const node &a) const { if (min(x, y)!= min(a.x, a.y)) return min(x, y) < min(a.x, a.y); return max(x, y) < max(a.x, a.y); } }; node st[500000 + 1]; int n, d, cnt; int main() { cin >> n >> d; for (int i = 1; i <= n; ++i) cin >> st[i].x >> st[i].y; sort(st + 1, st + n + 1); for (int i = 1; i <= n; ++i) if (st[i].x >= d) cnt++, d = max(d, st[i].y); cout << cnt << endl; return 0; }
361	#include <bits/stdc++.h> int a[200005], b[200005]; using namespace std; inline double cal_possible(int n, int learned_num) { double c2 = 1.5 * static_cast<double>(n - learned_num) / n * (n - learned_num - 1) / (n - 1) * (learned_num) / (n - 2); double c3 = static_cast<double>(n - learned_num) / n * (n - learned_num - 1) / (n - 1) * (n - learned_num - 2) / (n - 2); return - c2 - c3; } int main() { ios::sync_with_stdio(false); if (0) freopen("data.in", "r", stdin); int n; double p; cin >> n >> p; int l = 0, r = n - 1; while (l < r - 1) { int mid = (l + r) / 2; double ans = cal_possible(n, mid); if (0) cout << "when " << mid << " " << ans << endl; if (cal_possible(n, mid) >= p) { r = mid; } else { l = mid; } } cout << l << endl; }
362	#include <bits/stdc++.h> using namespace std; long double eps = 1e-7; void solve() { int64_t n; long double p; cin >> n >> p; for (long double i = 0; i < n; i += 1) { long double nn = n; long double cube = (nn * (nn - 1) * (nn - 2)); long double chance_to_0 = max((long double)0, (nn - i) * (nn - i - 1) * (nn - i - 2) / cube); long double chance_to_1 = max((long double)0, i * (nn - i) * (nn - i - 1) * / cube); long double chance_to_2 = max((long double)0, i * (i - 1) * (nn - i) * / cube); long double chance_to_3 = - chance_to_1 - chance_to_2 - chance_to_0; if (chance_to_3 + chance_to_2 + chance_to_1 / + eps > p) { cout << i << endl; return; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(0); int t = 1; while (t > 0) { t--; solve(); } }
363	#include <bits/stdc++.h> using namespace std; long double eps = 1e-7; void solve() { int64_t n; long double p; cin >> n >> p; for (long double i = 0; i < n; i += 1) { long double nn = n; long double cube = (nn * (nn - 1) * (nn - 2)); long double chance_to_0 = max((long double)0, (nn - i) * (nn - i - 1) * (nn - i - 2) / cube); long double chance_to_1 = max((long double)0, i * (nn - i) * (nn - i - 1) * / cube); long double chance_to_2 = max((long double)0, i * (i - 1) * (nn - i) * / cube); long double chance_to_3 = - chance_to_1 - chance_to_2 - chance_to_0; if (chance_to_3 + chance_to_2 + chance_to_1 / + eps > p) { cout << i << endl; return; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(0); int t = 1; while (t > 0) { t--; solve(); } }
364	#include <bits/stdc++.h> const int P = 998244353; using namespace std; template <class T> using vector2D = vector<vector<T>>; template <class T> using vector3D = vector<vector2D<T>>; template <class T> using pque = priority_queue<T>; template <class T> using heap = priority_queue<T, vector<T>, greater<T>>; template <class T> T max(T a, T b, T c) { return max(max(a, b), c); } template <class T> T min(T a, T b, T c) { return min(min(a, b), c); } template <class T> bool umax(T &x, T y) { return (x < y)? x = y, true : false; } template <class T> bool umin(T &x, T y) { return (x > y)? x = y, true : false; } void prepare() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); } long long n; double p, i3 = 1.0 / 3; const double eps = 1e-10; double calc(long long m) { long long k = n - m; long long tot = n * (n - 1) * (n - 2) / 6; long long cas0 = k * (k - 1) * (k - 2) / 6; long long cas1 = k * (k - 1) / * m; long long cas2 = m * (m - 1) / * k; long long cas3 = m * (m - 1) * (m - 2) / 6; return (double)(cas3 + cas2) / tot + i3 * cas1 / tot; } int main() { prepare(); cin >> n >> p; long long l = 0, r = n, ans = -1; while (l <= r) { if (calc((l + (r - l) / 2)) < p - eps) l = (l + (r - l) / 2) + 1; else ans = (l + (r - l) / 2), r = (l + (r - l) / 2
365	#include <bits/stdc++.h> using namespace std; long double eps = 1e-12, X = 1.0; long long nCr(long long n, long long r) { if (r > n) return 0; if (r == 1) return n; if (r == 2) return n * (n - 1) / 2; if (r == 3) return n * (n - 1) * (n - 2) / 6; return 0; } long double fun(int m, int n) { int r = n - m; long double a = 0, b = 0; if (r >= 3) a = nCr(r, 3) * X / nCr(n, 3); if (r >= and m >= 1) { long double p = (nCr(r, 2) * X * m / nCr(n, 3)); p *= (X / 2); b = p; } return X - (a + b); } int main() { int n; long double p; cin >> n >> p; for (int i = 1; i <= n; i++) { if (abs(fun(i, n)) + eps >= p) { cout << i; return 0; } } }
366	#include <bits/stdc++.h> using namespace std; const long double eps = 1e-14; long double getpwin(long double total, long double good) { long double bad = total - good; long double sol = 0; if (good >= 3) { long double prob = 1; prob *= good / total; prob *= (good - 1) / (total - 1); prob *= (good - 2) / (total - 2); sol += prob; } if (good >= && bad >= 1) { long double prob = 1; prob *= good / total; prob *= (good - 1) / (total - 1); prob *= bad / (total - 2); sol += prob * 3; } if (good >= && bad >= 2) { long double prob = 1; prob *= good / total; prob *= bad / (total - 1); prob *= (bad - 1) / (total - 2); prob *= ((long double)1 / (long double)3 + (long double)1 / (long double)6) * prob; sol += prob * 3; } return sol; } long long n; long double p; signed main() { ios::sync_with_stdio(0); cin.tie(0); cin >> n >> p; for (long long i = 1; i <= n; i++) { if (getpwin(n, i) - p >= -eps) { cout << i << "\n"; return 0; } } assert(0); exit(0); return 0; }
367	#include <bits/stdc++.h> using namespace std; const long long int MAX = 2e5 + 2; const long long int mod = 1e9 + 7; mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); template <class T> T rand(T a, T b) { return uniform_int_distribution<T>(a, b)(rng); } template <class T> T rand() { return uniform_int_distribution<T>()(rng); } void _print(long long int t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr <<
368	#include <bits/stdc++.h> using namespace std; const int mxN = 1e3 + 5; const double EPS = 1e-9; vector<vector<long long>> C(mxN, vector<long long>(4, -1)); long long ini(int n, int k) { if (n == k || k == 0) return C[n][k] = 1; if (C[n][k]!= -1) return C[n][k]; return C[n][k] = ini(n - 1, k - 1) + ini(n - 1, k); } int main() { int n; cin >> n; double p; cin >> p; if (p == 0) { cout << "0\n"; return 0; } ini(mxN - 1, 3); for (int i = 2; i < n; ++i) { double tot = C[n][3]; double ans = (double)(n - i >=? i * C[n - i][2] : 0) * 0.5 + (n - i >=? C[n - i][3] : 0); if (p <= (tot - ans) / tot + EPS) { cout << i << '\n'; return 0; } } }
369	#include <bits/stdc++.h> using namespace std; long long n; double p; double myfunc(long long n, long long m) { if (n < m) return 0; double ret = 1; for (int i = 0; i < m; ++i) { ret *= n - i; ret /= i + 1; } return ret; } double mypr(long long n, long long m, int i) { return myfunc(m, i) * myfunc(n - m, - i) / myfunc(n, 3); } double shit(long long n, long long m, int i) { double pp = mypr(n, m, i); if (i == 0) { return pp * 0; } else if (i == 1) { return pp * 0.5; } else if (i == 2) { return pp * 1; } else { return pp * 1; } } int fuck() { if (p < 1e-6) return 0; for (long long m = 1; m <= n; ++m) { double temp = 0; for (int i = 0; i <= && i <= m; ++i) { temp += shit(n, m, i); } if (temp >= p) return m; } } int main() { cin >> n >> p; cout << fuck() << endl; }
370	#include <bits/stdc++.h> using namespace std; const double pi = acos(-1.0); const double eps = 1e-11; template <class T> inline void ckmin(T &a, T b) { a = min(a, b); } template <class T> inline void ckmax(T &a, T b) { a = max(a, b); } template <class T> inline T sqr(T x) { return x * x; } using uint = unsigned int; using int64 = long long; using uint64 = unsigned long long; using ipair = pair<int, int>; using VI = vector<int>; using VD = vector<double>; using VS = vector<string>; using VVI = vector<VI>; double choose[1024][1024]; double calc(int n, int m) { double r = 0; for (int c1 = 0; c1 < (4); ++c1) { int c2 = - c1; if (c1 <= m && c2 <= n - m) { double prob1 = choose[m][c1] * choose[n - m][c2]; double prob2 = 0; if (c1 == 0) prob2 = 0; else if (c1 == 1) prob2 = 2.0 / 3.0; else prob2 = 1; r += prob1 * prob2; } } r /= choose[n][3]; return r; } int main() { std::ios::sync_with_stdio(false); memset(choose, 0, sizeof(choose)); for (int i = 0; i < (1024); ++i) for (int j = 0; j < (i + 1); ++j) choose[i][j] = (j ==? : choose[i - 1][j - 1] + choose[i - 1][j]); int n; double p; cin >> n >> p; for (int m = 0; m <= n; m++) if (calc(n, m) >= p - eps) { printf("%d\n", m); return 0; } printf("%d\n", n); return 0; }
371	#include <bits/stdc++.h> using namespace std; inline int read() { bool ok = 0; int res = 0; char c; while (((c = getchar()) < '0' || c > '9') && c!= '-') ; if (c == '-') ok = 1; else res = c - 48; while ((c = getchar()) >= '0' && c <= '9') res = (res << 3) + (res << 1) + (c - 48); return ok? ~res + : res; } int cn3(int n) { if (n < 3) return 0; return n * (n - 1) * (n - 2) / 6; } int cn2(int n) { if (n < 2) return 0; return n * (n - 1) / 2; } int main() { int n; double p; cin >> n >> p; for (int a = 1; a <= n; ++a) { double ans = 0; if (a >= 3) ans += 1.0 * cn3(a) / cn3(n); if (n - a >= 1) ans += 1.0 * cn2(a) * (n - a) / cn3(n); if (n - a >= 2) ans += 1.0 * a * cn2(n - a) / cn3(n) * 0.5; if (ans > p || (abs(ans - p) < 1e-6)) { cout << a << endl; break; } } return 0; }
372	#include <bits/stdc++.h> using namespace std; const int N = 200010, mo = 1e9 + 7; int n, q; long long a[N], s1[N], s2[N], c[N]; long long qmi(long long a, long long k) { long long res = 1; while (k) { if (k & 1) res = res * a % mo; a = a * a % mo; k >>= 1; } return res; } long long mod(long long x) { return (x % mo + mo) % mo; } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> q; for (int i = 1; i <= n; i++) { cin >> a[i]; s1[i] = (s1[i - 1] + a[i]) % mo; s2[i] = (s2[i - 1] + a[i] * a[i] % mo) % mo; c[i] = (c[i - 1] + i * i % mo) % mo; } long long l, r, d, len; while (q--) { cin >> l >> r >> d; len = r - l + 1; long long f1 = (s1[r] - s1[l - 1]), f2 = (s2[r] - s2[l - 1]); f1 = mod(f1), f2 = mod(f2); long long f = (f1 * * qmi(len, mo - 2) % mo - (len - 1) * d % mo) % mo * qmi(2, mo - 2) % mo; f = mod(f); long long ans = f * f % mo * len % mo + f * (len - 1) % mo * len % mo * d % mo + c[len - 1] * d % mo * d % mo; ans = mod(ans); if (ans == f2) puts("Yes"); else puts("No"); } return 0; }
373	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; long long binpow(long long a, long long b) { long long ans = 1; while (b) { if (b & 1) { ans = ans * a % MOD; } b /= 2; a = a * a % MOD; } return ans; } long long inv(long long a) { return binpow(a, MOD - 2); } long long get_sum(long long n) { return (n * (n + 1) / 2) % MOD; } long long get_sum2(long long n) { return n * (n + 1) % MOD * (2 * n + 1) % MOD * inv(6) % MOD; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); mt19937 rnd(239); int n, q; cin >> n >> q; vector<long long> a(2 * n); vector<long long> sum(2 * n, 0), sum2(2 * n, 0); long long val = rnd() % MOD; for (int i = 0; i < * n; i++) { if (i < n) { long long first; cin >> first; first = (first + val) % MOD; a[i] = first; } else { a[i] = a[i - n]; } if (i) { sum[i] = sum[i - 1]; sum2[i] = sum2[i - 1]; } sum[i] = (sum[i] + a[i]) % MOD; sum2[i] = (sum2[i] + a[i] * a[i]) % MOD; } while (q--) { int l, r; long long d; cin >> l >> r >> d; if (r < l) { r += n; } l--; r--; long long sm = sum[r]; if (l) { sm = (sm - sum[l - 1] + MOD) % MOD; } long long sm2 = sum2[r]; if (l) { sm2 = (sm2 - sum2[l - 1] + MOD) % MOD; } long long len = r -
374	#include <bits/stdc++.h> using namespace std; const int N = 200010; const double eps = 1e-10; struct Point { int x, y, id, rnk; } p1[N]; int n, m, s, p; bool ok[N]; double ans, tot; bool cmp(Point i, Point j) { if (i.x!= j.x) return i.x < j.x; return i.y < j.y; } bool cmp1(Point i, Point j) { return i.rnk < j.rnk; } inline bool check(Point i, Point j, Point k) { return 1ll * (j.x - i.x) * (k.y - j.y) == 1ll * (k.x - j.x) * (j.y - i.y); } inline double dis(int i, int j) { return sqrt(1.0 * (p1[i].x - p1[j].x) * (p1[i].x - p1[j].x) + 1.0 * (p1[i].y - p1[j].y) * (p1[i].y - p1[j].y)); } int main() { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d%d", &p1[i].x, &p1[i].y), p1[i].id = i; if (n == 3) { double tmp[3]; ans = dis(1, 2) + dis(2, 3) + dis(3, 1); for (int i = 1, j = 0; i <= 3; ++i) { if (i!= m) tmp[++j] = dis(i, m); } ans -= max(tmp[1], tmp[2]); printf("%.10lf\n", ans); return 0; } sort(p1 + 1, p1 + n + 1, cmp); for (int i = 1; i <= n; ++i) p1[i].rnk = i; p = 0; for (int i = 2; i < n; ++i) ok[i] = check(p1[i - 1
375	#include <bits/stdc++.h> using namespace std; template <typename Tp> void read(Tp &num) { num = 0; auto f = 1; char c = getchar(); while (!isdigit(c)) c == '-'? f = -1 : 1, c = getchar(); while (isdigit(c)) num = num * + (c ^ 48), c = getchar(); num *= f; } template <typename Tp, typename... etc> void read(Tp &num, etc &...more) { read(num); read(more...); } const int MAX = 10; int d1, d2, d3, d4, mid; int main() { printf("? %d %d\n", 1, MAX); fflush(stdout); scanf("%d", &d1); printf("? %d %d\n", 1, 1); fflush(stdout); scanf("%d", &d2); mid = (MAX - d1 + d2 + 1) / 2; printf("? %d %d\n", MAX, mid); fflush(stdout); scanf("%d", &d3); printf("? %d %d\n", 1, mid); fflush(stdout); scanf("%d", &d4); printf("! %d %d %d %d\n", + d4, d2 - d4 + 1, MAX - d3, MAX - (d1 - d4)); fflush(stdout); }
376	#include <bits/stdc++.h> using namespace std; template <typename Tp> void read(Tp &num) { num = 0; auto f = 1; char c = getchar(); while (!isdigit(c)) c == '-'? f = -1 : 1, c = getchar(); while (isdigit(c)) num = num * + (c ^ 48), c = getchar(); num *= f; } template <typename Tp, typename... etc> void read(Tp &num, etc &...more) { read(num); read(more...); } const int MAX = 1E9; int d1, d2, d3, d4, mid; int main() { printf("? %d %d\n", 1, MAX); fflush(stdout); scanf("%d", &d1); printf("? %d %d\n", 1, 1); fflush(stdout); scanf("%d", &d2); mid = (MAX - d1 + d2 + 1) / 2; printf("? %d %d\n", MAX, mid); fflush(stdout); scanf("%d", &d3); printf("? %d %d\n", 1, mid); fflush(stdout); scanf("%d", &d4); printf("! %d %d %d %d\n", + d4, d2 - d4 + 1, MAX - d3, MAX - (d1 - 1)); fflush(stdout); }
377	#include <bits/stdc++.h> using namespace std; inline int query(int x, int y) { printf("? %d %d\n", x, y); fflush(stdout); int ans; scanf("%d", &ans); return ans; } int dis11; inline int calcly() { int L = 1, R = 1e9, ans = 1; while (L <= R) { int mid = L + R >> 1; if (query(1, mid)!= dis11 - (mid - 1)) ans = mid, R = mid - 1; else L = mid + 1; } return ans - 1; } int main() { dis11 = query(1, 1); int ly = calcly(); int lx = dis11 + - ly; int rx = query(1e9, 1) - ly + 1; int ry = query(1, 1e9) - lx + 1; rx = 1e9 - rx; ry = 1e9 - ry; printf("! %d %d %d %d\n", lx, rx, ly, ry); }
378	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; const long long INF = 1e9; const long long N = 1e9; long long query(long long x, long long y) { cout << "? " << x << " " << y << endl; long long o; cin >> o; return o; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); ; long long p = query(1, 1); long long l = 2, r = N; long long ans = 0; while (l <= r) { long long m = (l + r) / 2; if (query(m, 1) == p - m + 1) { ans = m; l = m + 1; } else { r = m - 1; } } long long fx = ans, fy = p - ans + 2; long long q = query(1, N); long long sx = N - (q - fy + 1), ss = fy; long long lp = query(N, N); long long tx = sx, ty = * N - (lp + tx); cout << "! " << fx << " " << fy << " " << tx << " " << ty << endl; return 0; }
379	#include <bits/stdc++.h> using namespace std; static const int edge = * * 1000; int main() { ios::sync_with_stdio(false); cout << "? 1" << endl; int a; cin >> a; cout << "? 1" << endl; int b; cin >> b; cout << "? 1000000000" << endl; int c; cin >> c; cout << "? 1000000000" << endl; int d; cin >> d; int mid = (1 + a + edge - b) / 2; auto ask = [&](int x) { if (x < || x > edge) return * edge + 5; cout << "? " << x << " 1" << endl; int y; cin >> y; return y; }; int y1 = min({ask(mid - 1), ask(mid), ask(mid + 1)}) + 1; int x1 = (a + 2) - y1; int x2 = edge - b + (y1 - 1); int y2 = edge - c + (x1 - 1); cout << "| " << x1 << " " << y1 << " " << x2 << " " << y2 << endl; }
380	#include <bits/stdc++.h> using namespace std; inline long long query(int x, int y) { cout << "? " << x << " " << y << endl; long long ans; cin >> ans; if (ans == -1) exit(0); return ans; } int main() { ios::sync_with_stdio(false); if (1) freopen("data.in", "r", stdin); long long base = query(1, 1); long long min_dis; const long long bound = 1e9; long long l = 1, r = bound; while (l < r - 1) { int mid = (l + r) / 2; long long ans = query(mid, 1); if ((base - ans) == (mid - 1)) { l = mid; min_dis = ans; } else { r = mid; } } long long right_down = query(bound, 1); long long right_up = query(bound, bound); long long x1, y1, x2, y2; y1 = min_dis + 1; x1 = base - min_dis + 1; x2 = bound - (right_down - min_dis); y2 = bound - (right_up - (bound - x2)); cout << "! " << x1 << " " << y1 << " " << x2 << " " << y2 << endl; }
381	#include <bits/stdc++.h> using namespace std; const int N = 1e9; int ask(int x, int y) { cout << "? " << x << " " << y << endl; cout.flush(); cin >> x; return x; } void answerit(int x1, int y1, int x2, int y2) { cout << "! " << min(x1, x2) << " " << min(y1, y2) << " " << max(x1, x2) << " " << max(y1, y2) << endl; } int main() { int L = ask(1, 1), R = ask(N, 1), q = 1, ql, qr; if (L > R) ql = R - L + 1, qr = N; else ql = 1, qr = N - (R - L); int mid = (ql + qr) / 2; int upL = ask(mid, 1); int x1 = L - upL + 1, y1 = upL + 1, x2 = N - (R - upL), y2 = N - ask(mid, N); answerit(x1, y1, x2, y2); return 0; }
382	#include <bits/stdc++.h> using namespace std; int n; int ans[1003]; int arr[1003]; int sum_mask[1000003 * 14]; vector<int> v[2]; vector<int> loop; void print(bool is_ok) { cout << (is_ok? "YES" : "NO") << '\n'; if (!is_ok) exit(0); cout << ans[0]; for (int i = 1; i < n; ++i) cout << " " << ans[i]; cout << '\n'; exit(0); } void input() { cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; int is_odd = arr[i] & 1; v[is_odd].push_back(arr[i]); } } void solve() { sort(arr, arr + n); for (int i = 0; i < n - 1; ++i) { if (arr[i] == arr[i + 1]) { for (int j = 0; j < n; ++j) ans[j] = arr[j]; ans[i] = 0; print(true); } } if (!v[0].empty()) { if (v[0].size() >= 3) loop = {v[0][0], v[0][1], v[0][2]}; else if (v[1].size() >= 2) loop = {v[0][0], v[1][0], v[1][1]}; else print(false); ans[0] = (loop[0] + loop[1] - loop[2]) / 2; ans[1] = (loop[1] + loop[2] - loop[0]) / 2; ans[2] = (loop[2] + loop[0] - loop[1]) / 2; int idx = 3; for (int i = 0; i < n; ++i) { bool skip = 0; for (int j = 0; j < 3; ++j) if (arr[i] == loop[j]) { skip = 1; break; } if (!skip) ans[i] = arr[i] - ans[0]; } print(true); } int m = min(n
383	#include <bits/stdc++.h> using namespace std; int n, t[1005]; bool ps; map<int, int> m; int main() { ios_base::sync_with_stdio(false); cin >> n; for (int i = 1; i <= n; i++) { cin >> t[i]; if (t[i] % == 0) { ps = 1; } } sort(t + 1, t + n + 1); if (n == && t[1]!= t[2] || n == && (t[1] + t[2] + t[3]) % && t[1]!= t[2] && t[2]!= t[3]) { cout << "NO\n"; return 0; } for (int i = 1; i < n; i++) { if (t[i] == t[i + 1]) { cout << "YES\n"; cout << << " "; for (int j = 1; j <= n; j++) { if (i!= j) { cout << t[j] << " "; } } return 0; } } if (ps) { for (int i = 2; i <= n; i++) { if (t[i] % == 0) { swap(t[i], t[1]); } } if (t[2] %!= t[3] % 2) { if (t[2] % == t[4] % 2) { swap(t[3], t[4]); } else { swap(t[2], t[4]); } } int sum = (t[1] + t[2] + t[3]) / 2, ert = sum - t[1]; cout << "YES\n"; cout << sum - t[1] << " " << sum - t[2] << " " << sum - t[3] << " "; for (int i = 4; i <= n; i++) { cout << t[i] - ert << " "; } cout << "\n"; return 0; } int n2 = min(n, 26), db = n2 / 2; for (int i = 0; i < (1 << n2); i++) { if (__builtin_popcount(i) == db) { int
384	#include <bits/stdc++.h> using namespace std; const long long mod = 1000000007; const unsigned gen_seed = std::chrono::system_clock::now().time_since_epoch().count(); std::mt19937_64 gen(gen_seed); int n; std::vector<int> b; std::vector<int> a; void yes() { printf("YES\n"); for (auto x : a) printf("%d ", x); exit(0); } void no() { printf("NO\n"); exit(0); } void fill(int f) { for (int i = f; i < n; i++) { a.push_back(b[i] - a[0]); } } int w[15 * 1000000]; void get(int mask1, int mask2) { int sm = mask1 & mask2; mask1 ^= sm; mask2 ^= sm; int l = __builtin_popcount(mask1); std::vector<int> a1, a2; std::vector<int> fr; for (int i = 0; i < min(30, n); i++) { if ((1 << i) & mask1) a1.push_back(b[i]); else if ((1 << i) & mask2) a2.push_back(b[i]); else fr.push_back(b[i]); } for (int i = * l; i < min(30, n); i++) b[i] = fr[i - * l]; std::vector<int> zp; for (int i = 0; i < l; i++) { zp.push_back(a1[i]); zp.push_back(a2[i]); } int last = 0; for (int i = 0; i < * l; i++) { a.push_back(zp[i] - last); last = a.back(); } fill(2 * l); yes(); } int main() { scanf("%d", &n); b.resize(n); for (int i = 0; i < n; i++) scanf("%d", &b[i]); for (int i = 0; i < n; i++) if (b[i] % == 0) swap(b[0], b[i]); if (n
385	#include <bits/stdc++.h> using namespace std; int n; int ans[1003]; int arr[1003]; int sum_mask[1000003 * 14]; vector<int> v[2]; vector<int> loop; void print(bool is_ok) { cout << (is_ok? "YES" : "NO") << '\n'; if (!is_ok) exit(0); cout << ans[0]; for (int i = 1; i < n; ++i) cout << " " << ans[i]; cout << '\n'; exit(0); } void input() { cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; int is_odd = arr[i] & 1; v[is_odd].push_back(arr[i]); } } void solve() { sort(arr, arr + n); for (int i = 0; i < n - 1; ++i) { if (arr[i] == arr[i + 1]) { for (int j = 0; j < n; ++j) ans[j] = arr[j]; ans[i] = 0; print(true); } } if (!v[0].empty()) { if (v[0].size() >= 3) loop = {v[0][0], v[0][1], v[0][2]}; else if (v[1].size() >= 2) loop = {v[0][0], v[1][0], v[1][1]}; else print(false); ans[0] = (loop[0] + loop[1] - loop[2]) / 2; ans[1] = (loop[1] + loop[2] - loop[0]) / 2; ans[2] = (loop[2] + loop[0] - loop[1]) / 2; int idx = 3; for (int i = 0; i < n; ++i) { bool skip = 0; for (int j = 0; j < 3; ++j) if (arr[i] == loop[j]) { skip = 1; break; } if (!skip) ans[i] = arr[i] - ans[0]; } print(true); } int m = min(n
386	#include <bits/stdc++.h> #pragma GCC optimize("unroll-loops") #pragma GCC optimize("O3") #pragma GCC target("avx2") using namespace std; void solve() { long long n; cin >> n; vector<long long> arr(n); for (long long i = 0; i < n; i++) cin >> arr[i]; long long l = 0, r = 0; for (l = 0; l < n - 1; l++) if (arr[l] > arr[l + 1]) break; for (r = 0; r < n - 1; r++) if (arr[n - - r] > arr[n - - r]) break; if (l % == || r % == 0) cout << "Bob\n"; else cout << "Bob\n"; return; } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long tc = 1; for (long long i = 0; i < tc; i++) solve(); }
387	#include <bits/stdc++.h> using namespace std; int main() { int n; cin >> n; vector<int> v(n); for (int i = 0; i < n; i++) { cin >> v[i]; } vector<int> v1 = {v[0]}; for (int i = 1; i < v.size(); i++) { if (v[i] <= v1.back()) { break; } v1.push_back(v[i]); } vector<int> v2 = {v.back()}; for (int i = n - 2; i >= 0; i--) { if (v[i] <= v2.back()) { break; } v2.push_back(v[i]); } if (v1.size() % == || v2.size() % == 1) { cout << "Alice\n"; return 0; } cout << "Bob"; return 0; }
388	#include <bits/stdc++.h> using namespace std; using ll = long long; int n; vector<int> v, ans_front, ans_back; bool dfs(int left = 0, int right = 0, int last = -1) { if (left > n - - right) return 0; if (v[left] > last && v[n - - right] <= last) { int now = ans_front[left]; now = min(now, n - right - left); if (now % 2) return 1; return 0; } if (v[left] <= last && v[n - - right] > last) { int now = ans_back[n - - right]; now = min(now, n - right - left); if (now % 2) return 1; return 0; } if (v[left] > last && v[n - - right] > last) { if (v[left] >= v[n - - right]) { int now = ans_front[left]; now = min(now, n - left - right); if (now % 2) return 1; return dfs(left, right + 1, v[n - - right]); } int now = ans_back[n - - right]; now = min(now, n - right - left); if (now % 2) return 1; return dfs(left + 1, right, v[left]); } return 0; } int main() { cin >> n; v.resize(n); ans_front.resize(n); ans_back.resize(n); for (int i = 0; i < n; ++i) { cin >> v[i]; } int pos = n - 1; ans_front[n - 1] = 1; for (int i = n - 2; i >= 0; --i) { if (v[i] >= v[i + 1]) pos = i; ans_front[i] = pos - i + 1; } pos = 0; ans_back[0] = 1; for (int i = 1; i < n; ++i) { if (v[i] >= v[i - 1]) pos = i; ans_back[i] = i - pos + 1; } if (dfs()) cout << "Alice\n"; else cout <<
389	#include <bits/stdc++.h> using namespace std; int main() { long long n; cin >> n; vector<long long> a(n); for (auto &i : a) cin >> i; vector<long long> back; vector<long long> front; int prev = -1; map<long long, long long> posf, posb; for (int i = 0; i < n; i++) { if (prev < a[i]) { front.push_back(a[i]); prev = a[i]; posf[a[i]] = i; } else { break; } } prev = -1; for (int i = n - 1; i >= 0; i--) { if (prev < a[i]) { back.push_back(a[i]); prev = a[i]; posb[a[i]] = n - - i; } else { break; } } if (front.size() == n || back.size() == n) { cout << "Alice"; return 0; } deque<long long> deq; for (auto &i : a) deq.push_back(i); int parity = 0; prev = -1; while (true) { if (deq.size() == 1) { if (parity) cout << "Bob"; else cout << "Alice"; return 0; } long long ff = deq.front(); long long bb = deq.back(); if (ff <= prev && bb <= prev) { if (parity) cout << "Alice"; else cout << "Bob"; return 0; } if (ff > bb) { int ch = front.size() - posf[ff]; if (ch % 2) { if (parity) cout << "Bob"; else cout << "Alice"; return 0; } else if (bb > prev) { prev = bb; deq.pop_back(); } else { if (parity) cout << "Bob"; else cout << "Alice"; return 0; } } else { int ch = back.size() - posb[bb]; if (ch % 2) { if (parity) cout << "Bob"; else cout << "Alice"; return 0; } else if (
390	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("avx,avx2,fma") using namespace std; using ll = long long; using ull = unsigned long long; template <typename T> void print(vector<T> v) { for (T i : v) cout << i << " "; cout << '\n'; } template <typename T> void print(vector<vector<T>>& v) { for (vector<T>& vv : v) { for (T& i : vv) cout << i << " "; cout << '\n'; } } template <typename T> void print(T&& t) { cout << t << '\n'; } template <typename T, typename... Args> void print(T&& t, Args&&... args) { cout << t << " "; print(forward<Args>(args)...); } template <typename T> istream& operator>>(istream& is, vector<T>& v) { for (auto& i : v) is >> i; return is; } template <typename T> ostream& operator<<(ostream& os, vector<T>& v) { for (auto& i : v) os << i <<''; return os; } void __print(int x) { cerr << x; } void __print(long x) { cerr << x; } void __print(long long x) { cerr << x; } void __print(unsigned x) { cerr << x; } void __print(unsigned long x) { cerr << x; } void __print(unsigned long long x) { cerr << x; } void __print(double x) { cerr << x; } void __print(long double x) { cerr << x; } void __print(char x) { cerr << '\'' << x << '\''; } void __print(const char* x) { cerr << '\"' << x << '\"'; } void __print(const string& x) { cerr << '\"' << x << '\"'; } void __print(bool x) { cerr << (x? "true" : "false"); } template <typename T, typename V> void __print
391	#include <bits/stdc++.h> using namespace std; using ll = long long; using P = pair<ll, ll>; using PP = pair<ll, P>; const ll n_ = 2e5 + 100, inf = 1e18 + 1, mod = 1e9 + 7, sqrtN = 320; ll dy[4] = {-1, 0, 1, 0}, dx[4] = {0, 1, 0, -1}; ll n, m, k, tc = 1, a, b, c, sum, x, y, z, w, base, ans; ll gcd(ll x, ll y) { if (!y) return x; return gcd(y, x % y); } void solve() { cin >> n; vector<ll> v(n); vector<ll> A(n), B(n); for (int i = 0; i < n; i++) cin >> v[i]; A[n - 1] = 1; for (int i = n - 2; i >= 0; i--) { if (v[i] < v[i + 1]) A[i] = A[i + 1] + 1; else A[i] = 1; } B[0] = 1; for (int i = 1; i < n; i++) { if (v[i] < v[i - 1]) B[i] = B[i - 1] + 1; else B[i] = 1; } x = 0, a = 0, b = n - 1; ans = -1; while (1) { if (v[a] > v[b]) { if (A[a] & 1) break; else if (B[b] > ans) { ans = B[b]; b--; } else { x++; break; } } else if (v[b] > v[a]) { if (B[b] & 1) break; else if (v[a] > ans) { ans = v[a]; a++; } else { x++; break; } } else { if ((A[a] & 1) == && (B[b] & 1) == 0) x++; break; } x++; } if (x & 1) cout << "Bob";
392	#include <bits/stdc++.h> using namespace std; long long M = 1e9 + 7; long long power(long long a, long long b) { long long r = 1; long long o = a; if (b <= 0) return 1; while (b!= 0) { if (b % 2) r = (r * o) % M, b--; else { b /= 2; o = (o * o) % M; } } return r; } void solve(); int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long t = 1; while (t--) { solve(); cout << "\n"; } return 0; } void solve() { long long n; cin >> n; vector<long long> a(n); for (int i = 0; i < n; i++) cin >> a[i]; long long p = n; for (long long i = (1); i < (n); i++) { if (a[i] <= a[i - 1]) { p = i; break; } } long long d = n; for (long long i = (n - 2); i >= (0); i--) { if (a[i] <= a[i + 1]) { p = n - i + 1; break; } } if (d % || p % 2) cout << "Alice"; else cout << "Bob"; }
393	#include <bits/stdc++.h> using namespace std; const int maxn = 2e5 + 100; int a[maxn]; int l, r; int n; inline void prework() { int i = 1; while (a[i + 1] > a[i]) i++; l = i; i = n; while (a[i - 1] > a[i]) i--; r = i; } bool solve(int i, int j, int player) { if (a[i] == a[j]) { if ((l - i + 1) & 1) return player; else if ((j - r + 1) & 1) return player; else return player ^ 1; } else if (a[i] > a[j]) { if ((l - i + 1) & 1) return player; else return solve(i, j - 1, player ^ 1); } else if (a[i] < a[j]) { if ((j - r + 1) & 1) return player; else return solve(i + 1, j, player ^ 1); } } int main() { cin >> n; for (int i = 1; i <= n; i++) scanf("%d", &a[i]); prework(); if (solve(1, n, 1)) printf("Alice\n"); else printf("Bob\n"); return 0; }
394	#include <bits/stdc++.h> using namespace std; int main() { int n; scanf("%d", &n); vector<int> A(n); for (int i = 0; i < n; ++i) { cin >> A[i]; } int leftLen = 1, rightLen = 1; for (int i = 1; i < n; ++i) { if (A[i] > A[i - 1]) ++leftLen; else break; } for (int i = n - 2; i >= 0; --i) { if (A[i] > A[i + 1]) ++rightLen; else break; } (leftLen % 2 || rightLen % 2)? printf("Alice") : printf("Bob"); return 0; }
395	#include <bits/stdc++.h> using namespace std; inline int read() { char ch; int f = 1, x; while (ch = getchar(),!isdigit(ch)) if (ch == '-') f = -1; x = (ch ^ 48); while (ch = getchar(), isdigit(ch)) x = (x << 3) + (x << 1) + (ch ^ 48); return x * f; } inline void write(int x) { if (x < 0) { putchar('-'); write(-x); return; } if (x > 9) write(x / 10); putchar(x % ^ 48); } inline void writ(int x, char p = '\n') { write(x); putchar(p); } int n, m, g[110][110]; int main() { n = min(read(), 50), m = read(); for (int i = (1); i <= (m); ++i) { int u = read(), v = read(); if (u < n && v < n) g[u][v] = g[v][u] = 1; } int ans[5]; for (ans[0] = 1; ans[0] <= n; ++ans[0]) for (ans[1] = ans[0] + 1; ans[1] <= n; ++ans[1]) for (ans[2] = ans[1] + 1; ans[2] <= n; ++ans[2]) for (ans[3] = ans[2] + 1; ans[3] <= n; ++ans[3]) for (ans[4] = ans[3] + 1; ans[4] <= n; ++ans[4]) { int cnt = 0; for (int i = (0); i <= (4); ++i) for (int j = (i + 1); j <= (4); ++j) cnt += g[ans[i]][ans[j]]; if (cnt == || cnt == 10) { for (int i = (0); i <= (3); ++i) writ(ans[i],''); writ(ans[4]); return 0; } } puts("-1"); return 0; }
396	#include <bits/stdc++.h> using namespace std; inline void rd(char *x) { scanf("%s", x); } inline void rd(double &x) { scanf("%lf", &x); } template <typename T> inline void rd(T &x) { x = 0; bool is = 0; char ch = getchar(); while (!isdigit(ch)) is |= (ch == '-'), ch = getchar(); while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar(); is && (x = -x); } template <typename T, typename... U> inline void rd(T &x, U &...y) { rd(x), rd(y...); } template <typename T> inline void write(T x) { if (x >= 10) write(x / 10); putchar('0' + x % 10); } const int maxn = 114514; set<pair<int, int>> st; inline pair<int, int> mp(int u, int v) { return u < v? pair<int, int>(u, v) : pair<int, int>(v, u); } int ans[6], n, m; int check() { int ret = 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (ans[i] == ans[j]) return 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (st.count(mp(ans[i], ans[j]))) ++ret; return (ret == || ret == 0); } int main() { srand(time(0)); rd(n, m); for (int i = (1), __i = (m); i <= __i; ++i) { int u, v; rd(u, v); st.insert(mp(u, v)); } int fl = 0; n = min(n, 50); for (int tot = (1
397	#include <bits/stdc++.h> using namespace std; inline bool Read(int &a) { return scanf("%d", &a)!= EOF; } inline bool Read(int &a, int &b) { return scanf("%d%d", &a, &b)!= EOF; } inline bool Read(int &a, int &b, int &c) { return scanf("%d%d%d", &a, &b, &c)!= EOF; } inline bool Read(int &a, int &b, int &c, int &d) { return scanf("%d%d%d%d", &a, &b, &c, &d)!= EOF; } const int INF = 0x3f3f3f3f; const int maxn = 1e5 + 10; long long g[50]; long long revg[50]; int N, M; int d = 0; bool dfs(bool connect, int u, int cnt, long long edges, long long tmp, long long &ans) { if (cnt == 5) { ans = tmp; return true; } long long e = edges; while (e > 0) { int v = __builtin_ctzll(e); e ^= 1LL << v; if (v == || u == v) continue; long long gv = connect? g[v] : revg[v]; if (dfs(connect, v, cnt + 1, edges & gv, tmp | (1LL << v), ans)) { return true; } } return false; } int Process() { while (Read(N, M)) { N = min(48, N); memset(g, 0, sizeof(g)); for (int i = 1; i <= N; i++) { revg[i] = ((1LL << (N + 1)) - 1) ^ (1 << i); } for (int _i = 0; _i < M; _i++) { int u, v; Read(u, v); if (u <= && v <= && u!= v) { g[u] |= 1LL << v; g[v] |= 1LL << u; revg[u] ^= 1LL << v; revg[v] ^= 1LL << u; } } long long ans; bool bFound = false; for (
398	#include <bits/stdc++.h> using namespace std; inline bool Read(int &a) { return scanf("%d", &a)!= EOF; } inline bool Read(int &a, int &b) { return scanf("%d%d", &a, &b)!= EOF; } inline bool Read(int &a, int &b, int &c) { return scanf("%d%d%d", &a, &b, &c)!= EOF; } inline bool Read(int &a, int &b, int &c, int &d) { return scanf("%d%d%d%d", &a, &b, &c, &d)!= EOF; } const int INF = 0x3f3f3f3f; const int maxn = 1e5 + 10; long long g[50]; long long revg[50]; int N, M; int d = 0; bool dfs(bool connect, int u, int cnt, long long edges, long long tmp, long long &ans) { if (cnt == 5) { ans = tmp; return true; } long long e = edges; while (e > 0) { int v = __builtin_ctzll(e); e ^= 1LL << v; if (v == || u == v) continue; long long gv = connect? g[v] : revg[v]; if (dfs(connect, v, cnt + 1, edges & gv, tmp | (1LL << v), ans)) { return true; } } return false; } int Process() { while (Read(N, M)) { N = min(48, N); memset(g, 0, sizeof(g)); for (int i = 1; i <= N; i++) { revg[i] = ((1LL << (N + 1)) - 1) ^ (1LL << i); } for (int _i = 0; _i < M; _i++) { int u, v; Read(u, v); if (u <= && v <= && u!= v) { g[u] |= 1LL << v; g[v] |= 1LL << u; revg[u] ^= 1LL << v; revg[v] ^= 1LL << u; } } long long ans; bool bFound = false; for
399	#include <bits/stdc++.h> using namespace std; inline void rd(char *x) { scanf("%s", x); } inline void rd(double &x) { scanf("%lf", &x); } template <typename T> inline void rd(T &x) { x = 0; bool is = 0; char ch = getchar(); while (!isdigit(ch)) is |= (ch == '-'), ch = getchar(); while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar(); is && (x = -x); } template <typename T, typename... U> inline void rd(T &x, U &...y) { rd(x), rd(y...); } template <typename T> inline void write(T x) { if (x >= 10) write(x / 10); putchar('0' + x % 10); } const int maxn = 114514; set<pair<int, int>> st; inline pair<int, int> mp(int u, int v) { return u < v? pair<int, int>(u, v) : pair<int, int>(v, u); } int ans[6], n, m; int check() { int ret = 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (ans[i] == ans[j]) return 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (st.count(mp(ans[i], ans[j]))) ++ret; return (ret == || ret == 0); } int main() { srand(time(0)); rd(n, m); for (int i = (1), __i = (m); i <= __i; ++i) { int u, v; rd(u, v); st.insert(mp(u, v)); } int fl = 0; for (int tot = (1), __tot = (114514
400	#include <bits/stdc++.h> using namespace std; inline void rd(char *x) { scanf("%s", x); } inline void rd(double &x) { scanf("%lf", &x); } template <typename T> inline void rd(T &x) { x = 0; bool is = 0; char ch = getchar(); while (!isdigit(ch)) is |= (ch == '-'), ch = getchar(); while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar(); is && (x = -x); } template <typename T, typename... U> inline void rd(T &x, U &...y) { rd(x), rd(y...); } template <typename T> inline void write(T x) { if (x >= 10) write(x / 10); putchar('0' + x % 10); } const int maxn = 114514; set<pair<int, int>> st; inline pair<int, int> mp(int u, int v) { return u < v? pair<int, int>(u, v) : pair<int, int>(v, u); } int ans[6], n, m; int check() { int ret = 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (ans[i] == ans[j]) return 0; for (int i = (1), __i = (5); i <= __i; ++i) for (int j = (1), __j = (i - 1); j <= __j; ++j) if (st.count(mp(ans[i], ans[j]))) ++ret; return (ret == || ret == 0); } int main() { srand(time(0)); rd(n, m); for (int i = (1), __i = (m); i <= __i; ++i) { int u, v; rd(u, v); st.insert(mp(u, v)); } int fl = 0; for (int tot = (1), __tot = (114514
401	#include <bits/stdc++.h> using namespace std; long long n, t, ans, i, j, m, k, a, b, z, voly, c, s[1000 * + 1], parent[1000 * + 1], used[1000 * + 1]; vector<long long> v; void make_set(int v) { parent[v] = v; s[v] = 1; } int find_set(int v) { if (v == parent[v]) return v; return parent[v] = find_set(parent[v]); } void union_sets(int a, int b) { a = find_set(a); b = find_set(b); if (a!= b) { if (s[a] < s[b]) swap(a, b); parent[b] = a; s[a] += s[b]; } } signed main() { cin >> n >> m; for (j = 1; j <= n * m; j++) { make_set(j); used[j] = 0; } for (i = 1; i <= n; i++) { for (j = 1; j <= m; j++) { cin >> c; if (c % == 0) { union_sets((i - 1) * m + j, (i - 1) * m + j - 1); } c = c / 2; if (c % == 0) { union_sets((i - 1) * m + j, (i)*m + j); } } } for (j = 1; j <= n * m; j++) { c = find_set(j); if (used[c] == 0) { v.push_back(s[c]); used[c] = 1; } } sort(v.begin(), v.end()); for (j = 1; j <= v.size(); j++) { cout << v[v.size() - j] << "\n"; } }
402	#include <bits/stdc++.h> using namespace std; const int N = 1e3 + 10; int n, m, res[N], idx = -1, step; int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0}; bool book[N][N]; int a[N][N]; void dfs(int x, int y) { bool flag = 0; int xx = a[x][y]; for (int i = 0; i < 4; i++) { if ((xx >> i) & == 1) continue; int tx = x + dx[i]; int ty = y + dy[i]; if (tx < || tx >= n || ty < || ty >= m) { continue; } if (!book[tx][ty]) { flag = 1; book[tx][ty] = 1; step++; dfs(tx, ty); } } if (!flag) return; } int main() { idx = -1; cin >> n >> m; for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) cin >> a[i][j]; for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (!book[i][j]) { step = 1; book[i][j] = 1; dfs(i, j); res[++idx] = step; } sort(res, res + idx + 1); for (int i = idx; i >= 0; i--) cout << res[i] <<''; puts(""); return 0; }
403	#include <bits/stdc++.h> using namespace std; const int mxN = 1e3; int n, m, mp[mxN][mxN] = {0}; bool vis[mxN][mxN] = {0}; bool e(int i, int j) { return i >= && i < n && j >= && j < m && vis[i][j]; } int search(int i, int j) { bool toS[4] = {0, 0, 0, 0}; int ans = 0; if (!(mp[i][j] & 8) && e(i - 1, j)) { vis[i - 1][j] = false; toS[0] = 1; ans++; } if (!(mp[i][j] & 4) && e(i, j + 1)) { vis[i][j + 1] = false; toS[1] = 1; ans++; } if (!(mp[i][j] & 2) && e(i + 1, j)) { vis[i + 1][j] = false; toS[2] = 1; ans++; } if (!(mp[i][j] & 1) && e(i, j - 1)) { vis[i][j - 1] = false; toS[3] = 1; ans++; } if (toS[0]) ans += search(i - 1, j); if (toS[1]) ans += search(i, j + 1); if (toS[2]) ans += search(i + 1, j); if (toS[3]) ans += search(i, j - 1); return ans; } int main() { ios_base::sync_with_stdio(false); cin >> n >> m; vector<int> res; for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { cin >> mp[i][j]; vis[i][j] = 1; } } for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { if (e(i, j)) { vis[i][j] = 0; int temp = search(i, j); res.push_back(1 +
404	#include <bits/stdc++.h> using namespace std; namespace std {} long long t, n, m; bitset<4> s[1005][1005]; bool vis[1005][1005]; queue<long long> Q; long long A[(long long)1e6 + 10], N; void bfs(long long x, long long y) { queue<pair<long long, long long>> q; long long cnt = 1; q.push({x, y}); vis[x][y] = 1; while (q.size()) { long long a = q.front().first, b = q.front().second; q.pop(); if (a - >= &&!vis[a - 1][b] &&!s[a - 1][b][1]) { cnt++; vis[a - 1][b] = 1; q.push({a - 1, b}); } if (a + < n &&!vis[a + 1][b] &&!s[a + 1][b][3]) { cnt++; vis[a - 1][b] = 1; q.push({a + 1, b}); } if (b - >= &&!vis[a][b - 1] &&!s[a][b - 1][2]) { cnt++; vis[a][b - 1] = 1; q.push({a, b - 1}); } if (b + < m &&!vis[a][b + 1] &&!s[a][b + 1][0]) { cnt++; vis[a][b + 1] = 1; q.push({a, b + 1}); } } A[N] = cnt; N++; } signed main() { ios::sync_with_stdio(0), cin.tie(0); cin >> n >> m; for (long long i = 0; i < n; ++i) for (long long j = 0; j < m; ++j) { long long p; cin >> p; s[i][j] = p; } for (long long i = 0; i < n; ++i) { for (long long j = 0; j < m; ++j) { if (!vis[i][j]) { bfs(i, j); } } } sort(A, A + N
405	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; const long long maxn = 1e6 + 10; long long lowbit(long long x) { return x & -x; } bool ispow(long long n) { return (n & (n - 1)) == 0; } long long fast(long long a, long long n) { long long base = a, res = 1; while (n) { if (n & 1) res = ((res % mod) * (base % mod)) % mod; base = ((base % mod) * (base % mod)) % mod; n >>= 1; } return res % mod; } long long las[maxn]; string txt = "wygbro"; long long dp[maxn]; bool s[1030][1030][4]; bool vis[1030][1030]; long long ans[maxn], cnt; long long dx[] = {-1, 0, 1, 0}; long long dy[] = {0, 1, 0, -1}; long long dfs(long long x, long long y) { long long Size = 1; vis[x][y] = true; long long res = Size; for (long long i = 0; i < 4; i++) { long long vx = x + dx[i], vy = y + dy[i]; if (s[x][y][i] && vis[vx][vy] == 0) { res += dfs(vx, vy); } } return res; } long long cmp(long long a, long long b) { return a > b; } signed main() { long long n, m; cin >> n >> m; for (long long i = (1); i <= (n); ++i) { for (long long j = (1); j <= (m); ++j) { long long a; scanf("%lld", &a); long long wall = 3; while (wall!= -1) { if (a == || a % == 0) s[i][j][wall] = true; else if (a % == 1) s[i][j][wall] = false; wall--; a /= 2; } } } for (long long i = (1); i <= (n); ++i) { for (long long j =
406	#include <bits/stdc++.h> using namespace std; int n, m; vector<vector<int>> a; bool vis[1001][1001]; bool isNext(int i, int j, int u, int v, int dir) { int val1 = a[i][j], val2 = a[u][v]; bitset<4> dir1(val1); bitset<4> dir2(val2); if (dir == 1) { return!dir1[1] &&!dir2[3]; } else if (dir == 2) return!dir1[2] &&!dir2[0]; else if (dir == 3) return!dir1[0] &&!dir2[2]; else return!dir1[3] &&!dir2[1]; } void dfs(int i, int j, int &sz) { if (i + < n &&!vis[i + 1][j] && isNext(i, j, i + 1, j, 1)) { vis[i + 1][j] = 1; sz++; dfs(i + 1, j, sz); } if (j + < m &&!vis[i][j + 1] && isNext(i, j, i, j + 1, 2)) { vis[i][j + 1] = 1; sz++; dfs(i, j + 1, sz); } if (i - >= &&!vis[i - 1][j] && isNext(i, j, i - 1, j, 4)) { vis[i - 1][j] = 1; sz++; dfs(i - 1, j, sz); } if (j - >= &&!vis[i][j - 1] && isNext(i, j, i, j - 1, 3)) { vis[i][j - 1] = 1; sz++; dfs(i, j - 1, sz); } } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cin >> n >> m; a.resize(n); for (auto &i : a) i.resize(m); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { cin >> a[i][j]; }
407	#include <bits/stdc++.h> using namespace std; int t, n, a[200005], bit[32], num; int gcd(int a, int b) { b ==? a : gcd(b, a % b); } int main() { cin >> t; while (t--) { cin >> n; memset(bit, 0, sizeof(bit)); for (int i = 1; i <= n; i++) { cin >> num; int j = 1; while (num) { bit[j++] += num & 1; num >>= 1; } } int k = 0; for (int i = 1; i <= 31; i++) k = gcd(k, bit[i]); if (k == 0) { for (int i = 1; i <= n; i++) cout << i << " "; } else for (int i = 1; i <= k; i++) { if (k % i == 0) cout << i << " "; } cout << endl; } return 0; }
408	#include <bits/stdc++.h> using namespace std; int bits[31]; const int P = 210000; map<int, int> pf[31]; vector<int> primes; bool prime[P]; void backdiv(map<int, int>::iterator i, map<int, int> &m, int val, vector<int> &v) { if (i == m.end()) { v.push_back(val); return; } for (int x = 0, val1 = val; x <= i->second; x++, val1 *= i->first) { auto j = i; j++; backdiv(j, m, val1, v); } } int main() { fill(prime + 1, prime + P, true); for (int x = 2; x * x <= P; x++) { if (prime[x]) { for (int y = * x; y < P; y += x) { prime[y] = false; } } } for (int x = 2; x < P; x++) { if (prime[x]) primes.push_back(x); } ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { fill(bits, bits + 31, 0); int n; cin >> n; bool notallzero = false; for (int x = 0, y; x < n; x++) { cin >> y; notallzero |= (y!= 0); int bit = 0; while (y) { bits[bit] += (y & 1); y >>= 1; bit++; } } if (!notallzero) { for (int z = 1; z <= n; z++) { cout << z <<''; continue; } continue; } for (int x = 0; x < 31; x++) { if (bits[x] == 0) continue; pf[x].clear(); int tmp = bits[x]; for (size_t y = 0; y < primes.size() && (primes[y] * primes[y] <= bits[x]); y++) { if ((tmp % primes[y]) == 0) { pf[x][primes[y]]++; tmp
409	#include <bits/stdc++.h> using namespace std; inline void read(int &x) { x = 0; int p = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') p = -p; ch = getchar(); } while (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch - '0'), ch = getchar(); x = x * p; } int h[35], ans[114514], tot; int gcd(int x, int y) { if (x % y == 0) return y; return gcd(y, x % y); } int main() { int t; read(t); while (t--) { memset(h, 0, sizeof(h)); int n; read(n); int tot = 0; for (int i = 1; i <= n; ++i) { int now = 0; int x; read(x); while (x) { if (x & 1) h[now]++; x >>= 1; now++; } } int res = 0; for (int i = 0; i <= 30; ++i) { if (h[i]) res = h[i]; } for (int i = 0; i <= 30; ++i) { if (h[i]) res = gcd(h[i], res); } tot = 0; if (!res) for (int i = 1; i <= n; ++i) printf("%d ", i); else { int q = sqrt(res); for (int i = 1; i <= q; ++i) { if (res % i == 0) { ans[++tot] = i; if (i * i!= n) { ans[++tot] = res / i; } } } sort(ans + 1, ans + tot + 1); for (int i = 1; i <= tot; ++i) printf("%d ", ans[i]); } puts(""); } }
410	#include <bits/stdc++.h> using namespace std; const int N = 200010; int Q, n, a[N], cnt[40]; void solve() { scanf("%d", &n); memset(cnt, 0, sizeof(cnt)); for (int i = 1; i <= n; i++) { scanf("%d", &a[i]); for (int j = 0; j <= 30; j++) cnt[j] += ((a[i] >> j) & 1); } for (int j = 1; j <= n; j++) { bool flag = 1; for (int i = 1; i <= 30; i++) if (cnt[i] % j) flag = 0; if (flag) cout << j << " "; } cout << "\n"; } int main() { scanf("%d", &Q); while (Q--) solve(); return 0; }
411	#include <bits/stdc++.h> using namespace std; void setIO(const string &name = "") { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); if (name.length()) { freopen((name + ".in").c_str(), "r", stdin); freopen((name + ".out").c_str(), "w", stdout); } } template <typename T> void read(vector<T> &a) { for (auto &x : a) cin >> x; } template <typename T> void read(vector<T> &a, long long n) { a.resize(n); for (auto &x : a) cin >> x; } template <class T, class U> ostream &operator<<(ostream &out, const pair<T, U> &v) { out << "("; out << v.first << "," << v.second; return out << ")"; } template <class T> ostream &operator<<(ostream &out, const vector<T> &v) { out << "["; for (auto(i) = 0; (i) < ((long long)(v).size()); (i)++) { if (i) out << ", "; out << v[i]; } return out << "]"; } template <typename T> void print(vector<T> &a) { for (const auto &x : a) cout << x <<''; cout << '\n'; } void MOD(long long &x, long long m = 1000000007) { x %= m; if (x < 0) x += m; } template <typename T> void dbg(const char *name, T &&arg1) { cout << name << " : " << arg1 << '\n'; } template <typename T, typename... U> void dbg(const char *names, T &&arg1, U &&...args) { const char *comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1 << " | "; dbg(comma + 1, args...); } template <class T> void read(T &x) { cin >> x; } template <class T, class... U> void read
412	#include <bits/stdc++.h> using namespace std; const int NR = 2e5 + 5; int a[NR]; int gcd(int x, int y) { return y ==? x : gcd(y, x % y); } int cnt[40]; int main() { int t; scanf("%d", &t); while (t--) { int n; scanf("%d", &n); for (int i = 1; i <= n; ++i) scanf("%d", a + i); memset(cnt, 0, sizeof(cnt)); for (int i = 0; i <= 31; ++i) { for (int j = 1; j <= n; ++j) { if ((1 << i) & a[j]) ++cnt[i]; } } int nw = a[0]; for (int i = 1; i <= 31; ++i) nw = gcd(nw, cnt[i]); for (int i = 1; i <= n; ++i) { if (nw % i == 0) printf("%d ", i); } puts(""); } return 0; }
413	#include <bits/stdc++.h> using namespace std; int gcd(int a, int b) { return b? gcd(b, a % b) : a; } int cnt[30]; int main() { int T; cin >> T; while (T--) { memset(cnt, 0, sizeof(cnt)); int n; cin >> n; for (int i = 1, x; i <= n; i++) { cin >> x; for (int j = 0; j < 30; j++) { cnt[j] += (x & (1 << j)); } } int g = 0; for (int i = 0; i < 30; i++) { if (cnt[i]) { g = gcd(g, cnt[i]); } } for (int k = 1; k <= 30; k++) { if (g % k == 0) { cout << k << " "; } } cout << endl; } return 0; }
414	#include <bits/stdc++.h> using namespace std; long long read() { char ch = getchar(); long long f = 1, x = 0; while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } return f * x; } const long long MAXN = 2e5 + 10; long long n; long long a[MAXN]; long long gcd(long long x, long long y) { return y? gcd(y, x % y) : x; } signed main() { long long t = read(); while (t--) { n = read(); for (long long i = 1; i <= n; i++) { a[i] = read(); } long long g = 0; for (long long i = 30; i; i--) { long long cnt = 0; for (long long j = 1; j <= n; j++) { if ((1 << i) & a[j]) { cnt++; } } if (cnt) { if (!g) { g = cnt; } else { g = gcd(g, cnt); } } } if (!g) { for (long long i = 1; i <= n; i++) { printf("%d ", i); } puts(""); } else { for (long long i = 1; i * i <= g; i++) { if (g % i == 0) { printf("%d ", i); } } for (long long i = sqrt(g); i; i--) { if (g % i == 0) { printf("%d ", g / i); } } puts(""); } } return 0; }
415	#include <bits/stdc++.h> using namespace std; int a[32], bt[32]; int gcd(int x, int y) { return (!y)? x : gcd(y, x % y); } int main() { bt[0] = 1; for (int i = 1; i < 30; i++) bt[i] = bt[i - 1] << 1; int T; cin >> T; while (T--) { int n; memset(a, 0, sizeof a); scanf("%d", &n); for (int i = 1; i <= n; i++) { int x; scanf("%d", &x); for (int j = 0; j < 30; j++) if (bt[j] & x) a[j]++; } int ans = a[0]; for (int i = 0; i < 30; i++) if (a[i]) ans = a[i]; for (int i = 1; i < 30; i++) ans = gcd(ans, a[i]); for (int i = 1; i <= ans; i++) if (ans % i == 0) printf("%d ", i); if (ans == 0) for (int i = 1; i <= n; i++) printf("%d ", i); puts(""); } return 0; }
416	#include <bits/stdc++.h> using namespace std; long long int dfs(int i, int j, vector<vector<long long int>>& mt, vector<vector<bool>>& vis) { int n = mt.size(), m = mt[0].size(); if (i < || i >= mt.size() || j < || j >= mt[0].size()) return 0; vis[i][j] = true; int c = 1; for (int k = max(0, i - 1); k <= min(n - 1, i + 1); k++) { for (int kk = max(0, j - 1); kk <= min(m - 1, j + 1); kk++) { if (vis[k][kk] == false && mt[i][j] == mt[k][kk]) { c = dfs(k, kk, mt, vis) + 1; } } } return c; } void fac(long long int x, vector<long long int>& v) { bitset<32> b(x); for (int i = 0; i < 32; i++) { if (b[i] == 1) v[i]++; } } void fact(long long int k, vector<long long int>& di) { for (long long int i = 1; i <= sqrt(k); i++) { if (k % i == 0) { di.push_back(i); if (i!= k / i) di.push_back(k / i); } } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t = 1; cin >> t; while (t--) { long long int n; cin >> n; vector<long long int> v(32, 0); vector<long long int> in; for (long long int i = 0; i < n; i++) { long long int x; cin >> x; if (x!= 0) in.push_back(x); fac(x, v); } long long int mi = n + 1; for (int i = 0; i < 32; i++) { if (v[i]!= 0) { mi = min(mi, v[i]); } } if (mi == n + 1) { for
417	#include <bits/stdc++.h> using namespace std; void setIO(const string &name = "") { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); if (name.length()) { freopen((name + ".in").c_str(), "r", stdin); freopen((name + ".out").c_str(), "w", stdout); } } template <typename T> void read(vector<T> &a) { for (auto &x : a) cin >> x; } template <typename T> void read(vector<T> &a, long long n) { a.resize(n); for (auto &x : a) cin >> x; } template <class T, class U> ostream &operator<<(ostream &out, const pair<T, U> &v) { out << "("; out << v.first << "," << v.second; return out << ")"; } template <class T> ostream &operator<<(ostream &out, const vector<T> &v) { out << "["; for (auto(i) = 0; (i) < ((long long)(v).size()); (i)++) { if (i) out << ", "; out << v[i]; } return out << "]"; } template <typename T> void print(vector<T> &a) { for (const auto &x : a) cout << x <<''; cout << '\n'; } void MOD(long long &x, long long m = 1000000007) { x %= m; if (x < 0) x += m; } template <typename T> void dbg(const char *name, T &&arg1) { cout << name << " : " << arg1 << '\n'; } template <typename T, typename... U> void dbg(const char *names, T &&arg1, U &&...args) { const char *comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1 << " | "; dbg(comma + 1, args...); } template <class T> void read(T &x) { cin >> x; } template <class T, class... U> void read
418	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 5; vector<pair<int, int> > g[maxn << 2]; int id[maxn << 2]; int le[maxn << 2]; int be[maxn * 4]; void build(int rt, int l, int r) { if (l == r) { id[l] = rt; le[rt] = 1; be[rt] = l; return; } build(rt << 1, l, ((l + r) >> 1)); build(rt << | 1, ((l + r) >> 1) + 1, r); g[rt].push_back(pair<int, int>(rt << 1, 0)); g[rt].push_back(pair<int, int>(rt << | 1, 0)); return; } void add(int rt, int l, int r, int L, int R, int u) { if (L <= l && r <= R) { g[u].push_back(pair<int, int>(rt, 1)); return; } if (L <= ((l + r) >> 1)) add(rt << 1, l, ((l + r) >> 1), L, R, u); if (R > ((l + r) >> 1)) add(rt << | 1, ((l + r) >> 1) + 1, r, L, R, u); return; } int n; int a[maxn], b[maxn]; int dis[maxn << 4], pre[maxn << 4]; int q[maxn * 20], head = 0, tail = 0; int vis[maxn << 4]; const int inf = 0x3f3f3f3f; int main() { scanf("%d", &n); for (int i = 1; i < n + 1; ++i) scanf("%d", &a[i]); for (int i = 1; i < n + 1; ++i) scanf("%d", &b[i]); build(1, 0, n); int tot = 0; for (int i = 0; i <= n; ++i) tot = max(tot, id[i]); for (int i = 1; i <= n; ++i) { int l = i
419	#include <bits/stdc++.h> using namespace std; const int MOD = 1e9 + 7; const int N = 3e5 + 5; int n, a[N], b[N], c[N], t[N]; pair<int, int> par[N]; void solve() { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) cin >> b[i]; queue<int> Q; set<int> S; for (int i = 1; i < n; i++) S.insert(i), t[i] = 1e9; Q.push(n); t[n] = 1; int inx = -1; while (!Q.empty()) { int x = Q.front(); Q.pop(); int y = x - a[x]; if (a[x] >= x) { inx = x; } while (!S.empty()) { auto it = S.lower_bound(y); if (it == S.end() || *it > x) break; if (t[*it + b[*it]] >= t[x] + 1) { t[*it + b[*it]] = min(t[*it + b[*it]], t[x] + 1); par[*it + b[*it]] = make_pair(*it, x); Q.push(*it + b[*it]); } S.erase(it); } } cout << (t[inx]? t[inx] : -1) << '\n'; if (inx!= -1) { vector<int> v; v.push_back(0); while (par[inx].first) { v.push_back(par[inx].first); inx = par[inx].second; } reverse(v.begin(), v.end()); for (auto it : v) cout << it <<''; } } int main() { ios::sync_with_stdio(false), cin.tie(0), cout.tie(0); int test_cases = 1; while (test_cases--) solve(); return 0; }
420	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using pii = pair<int, int>; using pll = pair<ll, ll>; int n, m; int A[1000005]; int B[1000005]; int T[1000005]; int S[1000005]; int inverse(int s, int e) { if (s == e) { T[s] = A[s]; return 0; } int m = (s + e) / 2; ll ans = inverse(s, m) + inverse(m + 1, e); for (int i = s; i <= e; i++) { S[i] = T[i]; } int i = s, j = m + 1, k = s; while (k <= e) { if (j > e || (i <= m && S[i] <= S[j])) T[k++] = S[i++]; else T[k++] = S[j++], ans += m - i + 1; } return ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int T; cin >> T; for (int t = 1; t <= T; t++) { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> A[i]; for (int i = 1; i <= m; i++) cin >> B[i]; sort(B + 1, B + m + 1); priority_queue<int> pq; ll mx = inverse(1, n); for (int i = 1; i <= n; i++) { int x = lower_bound(B + 1, B + m + 1, A[i]) - B - 1; int y = upper_bound(B + 1, B + m + 1, A[i]) - B - 1; pq.push(x); pq.push(y); pq.pop(); mx += x; } while (!pq.empty()) { mx -= pq.top(); pq.pop(); } cout << mx << '\n'; } return 0; }
421	#include <bits/stdc++.h> using namespace std; struct node { int x, y; bool operator<(const node &a) const { if (min(x, y)!= min(a.x, a.y)) return min(x, y) < min(a.x, a.y); return max(x, y) < max(a.x, a.y); } }; node st[500000 + 1]; int n, d, cnt; int main() { cin >> n >> d; for (int i = 1; i <= n; ++i) cin >> st[i].x >> st[i].y; sort(st + 1, st + n + 1); for (int i = 1; i <= n; ++i) if (st[i].x >= d) cnt++, d = max(d, st[i].y); cout << cnt << endl; return 0; }
422	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void solve() { string s, s1; cin >> s >> s1; vector<int> v; for (int i = 0; i < s1.size(); i++) { for (int j = 0; j < s.size(); j++) { if (s1[i] == s[j]) { v.push_back(j); break; } } } int sum = 0;
423	#include <bits/stdc++.h> using namespace std; char a[26]; int num[26]; int main() { int n; scanf("%d", &n); char b[50]; for (int i = 0; i < n; i++) { int time = 0; scanf("%s", &a); scanf("%s", &b); for (int i1 = 0; i1 < 26; i1++) { num[a[i1] - 'a'] = i1; } for (int i2 = 0; i2 < strlen(b) - 1; i2++) { time += abs(num[b[i2 + 1] - 'a'] - num[b[i2] - 'a']); } printf("�����Ϊ%d\n", time); } }
424	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; map<char, int> mp; while (t--) { string x; cin >> x; for (int i = 1; i < 26; i++) { mp[x[i - 1]] = i; } string s; cin >> s; int ans = 0; for (int i = 1; i < s.length(); i++) { ans += abs(mp[s[i]] - mp[s[i - 1]]); } cout << ans << endl; } }
425	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s, d; cin >> s >> d; int j, c = 0, k, i; for (i = 0; i < s.length(); i++) { for (k = 0; k < s.length(); k++) { for (j = 0; j < d.length() - 1; j++) { if (s[i] == d[j] && s[k] == d[j + 1]) c = c + abs(i - k); } } } cout << c; } return 0; }
426	#include <bits/stdc++.h> using namespace std; long long pow_mod(long long nn, long long pp, long long mm) { long long res = 1; while (pp > 0) { if (pp & 1) res = (res * nn) % mm; pp = pp >> 1; nn = (nn * nn) % mm; } return res; } long long _gcd(long long a, long long b) { if (b == 0) return a; return _gcd(b, a % b); } void dhimanda(); int main() { int t = 1; scanf("%d", &t); for (int i = int(1); i <= int(t); i++) { dhimanda(); } return 0; } void dhimanda() { string a, b; cin >> a >> b; std::map<char, int> map; map.clear(); for (int i = 0; i < a.size(); ++i) { map[a[i]]++; } long long ans = 0; for (int i = 0; i < b.size() - 1; ++i) { ans += abs(map[b[i]] - map[b[i + 1]]); } cout << ans << '\n'; }
427	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string order; cin >> order; string s; cin >> s; map<char, int> m; int c = 1; for (auto i : order) { m[i] = c; c++; } int ans = 0; for (int i = 1; i < s.length(); i++) { ans += (m[s[i]] - m[s[i - 1]]); } std::cout << ans << std::endl; } return 0; }
428	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string str1, str2; cin >> str1 >> str2; long long ans = 0, pos1 = 0, pos2 = 0; for (int i = 0; i < str2.length() - 1; i++) { for (int j = 1; j <= str1.length(); j++) { if (str2[i] == str1[j]) { pos1 = j; } if (str2[i + 1] == str1[j]) { pos2 = j; } } ans += abs(pos2 - pos1); } cout << ans << endl; } }
429	#include <bits/stdc++.h> using namespace std; int main() { int q, res; string keyboard, st; cin >> q; while (q--) { cin >> keyboard; cin >> st; int v[100]; res = 0; for (int i = 0; i < st.length(); i++) { for (int j = 0; j < 26; j++) { if (keyboard[j] == st[i]) { v[i] = j; if (i > 0) res = abs(j - v[i - 1]); } } } if (st.length() == 1) cout << "0" << "\n"; else cout << res << "\n"; } }
430	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; for (int i = 0; i < t; i++) { string alf; cin >> alf; string word; cin >> word; if (word.size() == 1) { cout << << endl; continue; } long long result = 0; int temp = 0; for (int j = 1; j < word.size(); j++) { temp = alf.find(word[j]) - alf.find(word[j - 1]); result += abs(temp); temp = 0; } cout << result << endl; } }
431	#include <bits/stdc++.h> using namespace std; const int N = 300005; int n, q, k, o, s[N], v[N], lg[N], a[N], g[N], h[N][22]; long long f[N], ans[N]; vector<pair<int, int>> qr[N]; int find(int l, int r) { int k = lg[r - l + 1]; return min(h[l][k], h[r - (1 << k) + 1][k]); } int main() { scanf("%d%d%d", &n, &q, &k); for (int i = (1); i <= (n); i++) scanf("%d", &a[i]), h[i][0] = a[i]; for (int i = (2); i <= (n); i++) lg[i] = lg[i >> 1] + 1; for (int i = (1); i <= (20); i++) for (int j = (1); j <= (n); j++) if (j + (1 << i) - <= n) h[j][i] = min(h[j][i - 1], h[j + (1 << i - 1)][i - 1]); for (int i = (1); i <= (q); i++) { int l, r; scanf("%d%d", &l, &r); qr[l].push_back({r, i}); } for (int i = (0); i <= (k - 1); i++) { o = 0, s[0] = n - i + k; for (int j = n - i; j >= 1; j -= k) { while (o && v[o] >= a[j]) o--; s[++o] = j, v[o] = a[j], f[o] = f[o - 1] + 1ll * (s[o - 1] - s[o]) / k * a[j]; for (auto [x, se] : qr[j]) { int t = (x / k) * k + (n - i) % k, l = 1, r = o, as = 0; if (t > x) t -= k; while
432	#include <bits/stdc++.h> using ll = long long; int const nmax = 300000; int const inf = 1000000000; int const lgmax = 20; int v[5 + nmax], cost[5 + nmax]; int far[1 + lgmax][5 + nmax]; ll farcost[1 + lgmax][5 + nmax]; int main() { std::ios::sync_with_stdio(0); std::cin.tie(0); int n, q, k; std::cin >> n >> q >> k; for (int i = 1; i <= n; i++) std::cin >> v[i]; std::deque<int> dq; for (int i = n; <= i; i--) { while (0 < dq.size() && v[i] <= v[dq.back()]) dq.pop_back(); dq.push_back(i); while (i + k <= dq.front()) dq.pop_front(); cost[i] = v[dq.front()]; } far[0][n + 1] = n + 1; cost[n + 1] = 0; for (int i = n; <= i; i--) { far[0][i] = i + k; if (n < far[0][i]) far[0][i] = n + 1; while (cost[i] < cost[far[0][i]]) far[0][i] = far[0][far[0][i]]; farcost[0][i] = 1LL * (far[0][i] - i + k - 1) / k * cost[i]; } for (int h = 1; h <= lgmax; h++) for (int i = 1; i <= n + 1; i++) { far[h][i] = far[h - 1][far[h - 1][i]]; farcost[h][i] = farcost[h - 1][i] + farcost[h - 1][far[h - 1][i]]; } for (int i = 1; i <= q; i++) { int x, y; std::cin >> x >> y; ll result = v[x]; for (int h = lgmax; <= h; h--) if (far
433	#include <bits/stdc++.h> using namespace std; using lint = long long; using pi = pair<lint, lint>; const int MAXN = 300005; int n, q, k; lint a[MAXN], val[MAXN]; lint minv[20][MAXN]; int nxt[20][MAXN]; lint dp[MAXN]; int find_first_smaller(int x, int y) { if (x > n) return 1e9; if (minv[19][x] >= y) return 1e9; int ret = 0; for (int i = 18; i >= 0; i--) { if (minv[i][x] >= y) { ret += (1 << i); x += (1 << i) * k; } } return ret; } lint shoot(int s, int x) { if (s > n) return 0; int ffs = find_first_smaller(s, x); int len = (n - s) / k + 1; if (ffs > n) return 1ll * len * x; return dp[ffs] + ((ffs - s) / k) * x; } lint query(int s, int e, int x) { if (s > e) return 0; int len = (e - s) / k + 1; lint after_path = x; int pos = s; for (int i = 0; i < 20; i++) { if ((len >> i) & 1) { after_path = min(after_path, minv[i][pos]); pos += (k << i); } } return shoot(s, x) - shoot(pos, after_path); } int main() { priority_queue<pi, vector<pi>, greater<pi>> pq; scanf("%d %d %d", &n, &q, &k); for (int i = 1; i <= n; i++) { scanf("%lld", &a[i]); pq.emplace(a[i], i); while (((int)(pq).size()) && pq.top().second <= i - k) pq.pop(); val[i] = pq.top().first; minv[0][i] = val[i]; nxt[0][i] = min(
434	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 5; int read() { int s = 0; char c = getchar(), lc = '+'; while (c < '0' || '9' < c) lc = c, c = getchar(); while ('0' <= c && c <= '9') s = s * + c - '0', c = getchar(); return lc == '-'? -s : s; } void write(long long x) { if (x < 0) putchar('-'), x = -x; if (x < 10) putchar(x + '0'); else write(x / 10), putchar(x % + '0'); } void print(long long x, char c = '\n') { write(x); putchar(c); } int a[N], n, Q, k; struct Query { int l, len, id; }; long long ans[N]; vector<int> s[N], g[N]; vector<Query> q[N]; void ysgs(int n) { static int q[N], h = 1, t = 0; for (int i = 0; i < n; i++) { while (h <= t && a[q[t]] >= a[i]) t--; q[++t] = i; if (q[h] <= i - k) h++; s[i % k].push_back(a[q[h]]); g[i % k].push_back(a[i]); } } void solve(vector<int> &a, vector<int> &b, vector<Query> &c) { int top = 0; static int st[N]; static long long sum[N]; int n = st[0] = a.size(); a.push_back(0); vector<vector<pair<int, int>>> q(n); for (auto i : c) q[i.l].push_back(make_pair(i.len, i.id)); for (int i = n - 1; i >= 0; i--) { int pos = lower_bound(st + 1, st + top + 1, b[i], [&](int x, int y) { return a[x] < y; }) - st
435	#include <bits/stdc++.h> using namespace std; const int N = (int)3e5 + 50, LOGN = 19; struct RMQ { int n; int mm[N], st[LOGN][N]; void build(int *x) { mm[0] = -1; for (int i = 1; i <= n; i++) mm[i] = (i & (i - 1)) ==? mm[i - 1] + : mm[i - 1]; for (int i = 0; i < n; i++) { st[0][i] = x[i]; } for (int lg = 1; lg < LOGN; lg++) { for (int j = 0; j + (1 << lg) - < n; j++) { st[lg][j] = min(st[lg - 1][j], st[lg - 1][j + (1 << (lg - 1))]); } } } int rmq(int l, int r) { int k = mm[r - l + 1]; return min(st[k][l], st[k][r - (1 << k) + 1]); } } rmq; struct node { long long v, cnt; long long sumcnt; long long totsum; }; int a[N]; int n, q, k; long long res[N]; vector<node> St[N]; vector<pair<int, int> > qrs[N]; int main() { ios::sync_with_stdio(false); cin.tie(NULL); cin >> n >> q >> k; for (int i = 0; i < (n); ++i) cin >> a[i]; for (int i = 0; i < (q); ++i) { int l, r; cin >> l >> r; l--, r--; qrs[l].push_back({r, i}); } rmq.n = n; rmq.build(a); for (int i = n - 1; i >= 0; i--) { auto &S = St[i % k]; if (!S.empty()) { int mn = rmq.rmq(i, i + k - 1); int cnt = 0; while (!S.empty() && S.back().v >= mn) { node o =
436	#include <bits/stdc++.h> using namespace std; const int N = 300000; int n, cq, m, a[N + 9]; struct question { int l, r, id; question(int L = 0, int R = 0, int Id = 0) : l(L), r(R), id(Id) {} } q[N + 9]; void into() { scanf("%d%d%d", &n, &cq, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); for (int i = 1; i <= cq; ++i) { int l, r; scanf("%d%d", &l, &r); q[i] = question(l, r, i); } } int b[N + 9]; void Get_b() { static int q[N + 9]; int hd = 0, tl = 0; for (int i = 1; i <= n; ++i) { for (; hd <= tl && a[i] <= a[q[tl]]; --tl) ; q[++tl] = i; for (; hd <= tl && q[hd] < i - m; ++hd) ; b[i] = a[q[hd]]; } } vector<int> sta[N + 9], cnt[N + 9]; vector<long long> suf[N + 9]; long long sum[N + 9], ans[N + 9]; void Get_ans() { sort(q + 1, q + cq + 1, [&](const question &a, const question &b) { return a.l > b.l; }); for (int i = n, j = 1; i >= 1; --i) { int o = i % m; for (; j <= cq && q[j].l == i; ++j) { ans[q[j].id] = a[i]; if (sta[o].empty()) continue; if (q[j].r < q[j].l + m) continue; int p = lower_bound(sta[o].begin(), sta[o].end(), q[j].r, greater<int>()) - sta[o].begin(); ans[q[j].
437	#include <bits/stdc++.h> const int maxn = 600005, maxk = 21; int n, m, k, l, r; long long ans; int a[maxn], jump[maxn][maxk], stk[maxn], mn[maxn]; long long val[maxn][maxk]; int main() { scanf("%d%d%d", &n, &m, &k); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); for (int i = 1; i <= n + k; i++) for (int j = 0; j <= 20; j++) jump[i][j] = n + k; l = 1, r = 0; for (int i = n; i >= 1; i--) { while (l <= r && a[stk[r]] >= a[i]) r--; stk[++r] = i; while (l <= r && stk[l] > i + k) l++; mn[i] = a[stk[l]]; } for (int i = n - k; i >= 1; i--) { jump[i][0] = i + k; if (mn[jump[i][0]] >= mn[i]) { int x = jump[i][0]; for (int j = 20; j >= 0; j--) if (mn[jump[x][j]] >= mn[i]) x = jump[x][j]; jump[i][0] = jump[x][0]; } val[i][0] = 1ll * mn[i] * ((jump[i][0] - i) / k); for (int j = 1; j <= 20; j++) jump[i][j] = jump[jump[i][j - 1]][j - 1], val[i][j] = val[i][j - 1] + val[jump[i][j - 1]][j - 1]; } for (int i = 1, l, r; i <= m; i++) { scanf("%d%d", &l, &r); long long ans = a[l]; for (int j = 20; j >= 0; j--) if (jump[l][j] <= r) ans +=
438	#include <bits/stdc++.h> const int N = 300300; const int M = 333; using namespace std; int n; int q; int k; int a[N]; int t[N][20]; int L[N]; int get_min(int l, int r) { int g = L[r - l + 1]; return min(t[l][g], t[r - (1 << g) + 1][g]); } long long res[N]; vector<pair<int, int>> qu[N]; vector<pair<int, int>> c[M]; vector<pair<long long, int>> s[M]; int main() { ios_base::sync_with_stdio(0); cin >> n >> q >> k; for (int i = 1; i <= n; i++) { cin >> a[i]; t[i][0] = a[i]; } for (int i = 2; i < N; i++) { L[i] = L[i / 2] + 1; } for (int i = 1; i < 20; i++) { for (int j = 1; j <= n; j++) { if (j + (1 << i) - > n) { break; } t[j][i] = min(t[j][i - 1], t[j + (1 << i - 1)][i - 1]); } } if (k >= M) { for (int i = 1; i <= q; i++) { int l, r, j; cin >> l >> r; j = l; long long res = 0; while (j <= r) { res += get_min(l, j); j += k; } cout << res << "\n"; } return 0; } for (int i = 1; i <= q; i++) { int l, r; cin >> l >> r; qu[l].push_back({(r - l) / k + 1, i}); } for (int i = 0; i < k; i++) { c[i].push_back({0, 0}); s[i].push_back({0, 0}); } for (int i = n; i >= 1; i--) { int cur = i % k, X; for (int j = 0;
439	#include <bits/stdc++.h> using namespace std; static constexpr int64_t inf = 0x3f3f3f3f3f3f3f3f; static constexpr int Maxn = 3e5 + 5, LOG = 20; int n, q, k, N, Lg2[Maxn]; int64_t a[Maxn], ans[Maxn], St[LOG][Maxn]; inline int64_t ask(int l, int r) { int K = Lg2[r - l + 1]; return min(St[K][l], St[K][r - (1 << K) + 1]); } struct Query { int l, r, id; Query() = default; Query(int l, int r, int id) : l(l), r(r), id(id) {} friend bool operator<(const Query &lhs, const Query &rhs) { return lhs.l!= rhs.l? lhs.l > rhs.l : lhs.r < rhs.r; } }; vector<Query> Q[Maxn]; struct node { int len; int64_t val, sum; node() = default; node(int l, int64_t v, int64_t s) : len(l), val(v), sum(s) {} } stk[Maxn]; int lstk[Maxn]; int top; void modify(int64_t v) { int len, slen; int64_t sum; for (len = 1; top && stk[top].val >= v;) len += stk[top--].len; sum = (top? stk[top].sum : 0) + len * v; slen = (top? lstk[top] : 0) + len; stk[++top] = node(len, v, sum); lstk[top] = slen; } int64_t query(int l) { int length = lstk[top]; l = length - l; int p = upper_bound(lstk + 1, lstk + top + 1, l) - lstk - 1; int64_t ans = (p? stk[p].sum : 0) + stk[p + 1].val * (l - lstk[p]); return stk
440	#include <bits/stdc++.h> using namespace std; static constexpr int64_t inf = 0x3f3f3f3f3f3f3f3f; static constexpr int Maxn = 3e5 + 5, LOG = 20; int n, q, k, N, Lg2[Maxn]; int64_t a[Maxn], ans[Maxn], St[LOG][Maxn]; inline int64_t ask(int l, int r) { int K = Lg2[r - l + 1]; return min(St[K][l], St[K][r - (1 << K) + 1]); } struct Query { int l, r, id; Query() = default; Query(int l, int r, int id) : l(l), r(r), id(id) {} friend bool operator<(const Query &lhs, const Query &rhs) { return lhs.l!= rhs.l? lhs.l > rhs.l : lhs.r < rhs.r; } }; vector<Query> Q[Maxn]; struct node { int len; int64_t val, sum; node() = default; node(int l, int64_t v, int64_t s) : len(l), val(v), sum(s) {} } stk[Maxn]; int lstk[Maxn]; int top; void modify(int64_t v) { int len, slen; int64_t sum; for (len = 1; top && stk[top].val >= v;) len += stk[top--].len; sum = (top? stk[top].sum : 0) + len * v; slen = (top? lstk[top] : 0) + len; stk[++top] = node(len, v, sum); lstk[top] = slen; } int64_t query(int l) { int length = lstk[top]; l = length - l; int p = upper_bound(lstk + 1, lstk + top + 1, l) - lstk - 1; int64_t ans = (p? stk[p].sum : 0) + stk[p + 1].val * (l - lstk[p]); return stk
441	#include <bits/stdc++.h> const long long INF = 1e16; const int M = 1e5 + 5; int n, k, tot; bool vis[M]; int prime[M]; long long phi[M], f[M][18]; inline void Init() { phi[1] = 1; for (int i = 2; i < M; ++i) { if (!vis[i]) prime[++tot] = i, phi[i] = i - 1; for (int j = 1; j <= tot && prime[j] * i < M; ++j) { vis[prime[j] * i] = 1; if (i % prime[j] == 0) { phi[i * prime[j]] = phi[i] * prime[j]; break; } phi[i * prime[j]] = phi[i] * (prime[j] - 1); } } for (int i = 2; i < M; ++i) phi[i] += phi[i - 1]; } inline long long c(int L, int R) { if (L > R) return INF; long long res = 0; for (int l = L, r; l <= R; l = r + 1) { r = R / (R / l); res += 1ll * phi[R / l] * (r - l + 1); } return res; } inline void Solve(int t, int l, int r, int ql, int qr) { if (ql > qr || l > r) return; int mid = ql + qr >> 1, pos = l; long long val = c(std ::min(r, mid) + 1, mid); for (int i = std ::min(r, mid); i >= l; --i) { if (f[mid][t] > f[i][t - 1] + val) f[mid][t] = f[i][t - 1] + val, pos = i; if (val == INF) val = phi[mid / i]; else val += phi[mid / i]; } Solve(t, l, pos, ql, mid - 1); Solve(t, pos, r, mid + 1, qr); } inline int read() { int f = 1, s = 0; char ch
442	#include <bits/stdc++.h> using namespace std; const int MAXN = 100010, MAXM = 1000010; int t, n, k, mu[MAXM], phi[MAXM]; long long sumphi[MAXM], dp[MAXM][30]; void solve(int l, int r, int xl, int xr, int k) { if (l > r) { return; } int mid = (l + r) >> 1, np = 0; long long nw = 0, nv = 1e18; for (int l = min(xr, mid - 1) + 2, r; l <= mid; l = r + 1) { r = mid / (mid / l); nw += sumphi[mid / l] * (r - l + 1); } for (int i = min(xr, mid - 1); i >= xl; i--) { nw += sumphi[mid / (i + 1)]; if (dp[i][k - 1] + nw < nv) { nv = dp[i][k - 1] + nw; np = i; } } assert(xl <= np && np <= xr); dp[mid][k] = nv; solve(l, mid - 1, xl, np, k); solve(mid + 1, r, np, xr, k); return; } int main() { for (int i = 1; i <= MAXN - 10; i++) { mu[i] = 1, phi[i] = i; int cpi = i; for (int j = 2; j * j <= cpi; j++) { if (cpi % j == 0) { int cnt = 0; while (cpi % j == 0) { cpi /= j, cnt++; } if (cnt > 1) { mu[i] = 0; } else { mu[i] = -mu[i]; } phi[i] = phi[i] / j * (j - 1); } } if (cpi > 1) { mu[i] = -mu[i], phi[i] = phi[i] / cpi * (cpi - 1); } sumphi[i] = sumphi[i - 1] + phi[i]; dp[i][1] = 1ll * i * (i + 1) / 2; }
443	#include <bits/stdc++.h> using namespace std; const int mod = 998244353; long long cal[100005]; long long val[100005]; vector<int> prime; long long dp[25][100005]; long long cal2(int l, int r) { if (l > r) return 0; long long tot = 0; long long last = r; for (int i = 1;;) { int Next = (r) / (i + 1); if (Next <= l) { tot += cal[i] * (last - l + 1); break; } tot += cal[i] * (last - Next); last = Next; i = r / Next; } return tot; } void dc(int k, int l, int r, int optl, int optr) { if (l > r) return; int mid = (l + r) / 2; int opt = 0; dp[k][mid] = 1e18; long long now = cal2(optr + 1, mid); for (int i = min(optr, mid); i >= optl; i--) { now += cal[mid / i]; long long val = dp[k - 1][i - 1] + now; if (val < dp[k][mid]) { dp[k][mid] = val; opt = i; } } dc(k, l, mid - 1, optl, opt); dc(k, mid + 1, r, opt, optr); } void solve() { int n, k; scanf("%d %d", &n, &k); if (k >= 20) printf("%d\n", n); else { printf("%lld\n", dp[k][n]); } } int main() { for (int i = 1; i <= 100000; i++) val[i] = i; for (int i = 2; i <= 100000; i++) { if (val[i] == i) { for (int j = i; j <= 100000; j += i) val[j] = val[j] / i * (i - 1); } } cal[1] = 1; for (int i = 2; i <= 100000; i++) cal[i] = cal[i - 1] + val[i]; for (int i = 1
444	#include <bits/stdc++.h> using namespace std; inline long long readint() { long long x = 0; bool f = 0; char c = getchar(); while (!isdigit(c) && c!= '-') c = getchar(); if (c == '-') { f = 1; c = getchar(); } while (isdigit(c)) { x = x * + c - '0'; c = getchar(); } return f? -x : x; } const long long mod = 998244353, inv2 = 499122177; long long ksm(long long a, long long b) { long long ans = 1; while (b) { if (b % == 1) ans = ans * a % mod; a = a * a % mod; b /= 2; } return ans; } const int maxk = 1e7 + 5; long long s[maxk]; int main() { int T = readint(); while (T--) { int n, k, x; n = readint(); k = readint(); x = readint(); if (x) { long long pw1 = 1; for (int i = k; i > 0; i--) { s[i] = (pw1 - + mod) % mod; pw1 = pw1 * % mod; } s[0] = 1; for (int i = 1; i <= k; i++) s[i] = s[i] * s[i - 1] % mod; long long ans = 0, pw2 = ksm(2, n), pw3 = 1; pw1 = 1; for (int i = k - 1; i >= 0; i--) { ans = (ans + pw3 * s[i] % mod * pw1 % mod * (i % ==? : mod - 1) % mod) % mod; pw1 = pw1 * % mod; pw3 = pw3 * pw2 % mod; } printf("%lld\n", ans); } else if (n > k) printf("0\n"); else { long long ans = 1, pw1 = ksm(2, k), pw2 = 1; for (int i = 0; i < n; i++) { ans = (pw1 - pw2 + mod) % mod * ans % mod; pw2
445	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { int n; cin >> n; vector<int> vec(n); int maxi = INT_MIN; for (int i = 0; i < n; i++) { cin >> vec[i]; maxi = max(maxi, abs(vec[i] - (i + 1))); } cout << maxi << '\n'; } return 0; }
446	#include <bits/stdc++.h> using namespace std; int a[100005]; int main() { int T, n; scanf("%d", &T); while (T--) { scanf("%d", &n); int ans = 0; for (int i = 0; i < n; i++) { scanf("%d", &a[i]); if (i && a[i] < a[i - 1]) { ans = 1; } } if (n % == 0) ans = 1; if (ans) printf("YES\n"); else printf("NO\n"); } return 0; }
447	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6; int p[maxn]; void solve() { int n; cin >> n; int fl = 0; for (int i = 1; i <= n; i++) { scanf("%d", &p[i]); if (i > && p[i - 1] > p[i]) fl = 1; } if (n % == && fl == 0) cout << "NO" << endl; else cout << "YES" << endl; } int main() { int __; cin >> __; while (__--) solve(); }
448	#include <bits/stdc++.h> using namespace std; const int kMod = 1000000007; int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> v(n); for (int i = 0; i < n; i++) cin >> v[i]; bool res = false; if (n % 2) { for (int i = 0; i < n - 1; i++) { if (v[i] > v[i + 1]) { res = true; break; } } } else { res = true; } cout << ((res)? "YES\n" : "NO\n"); } }
449	#include <bits/stdc++.h> using namespace std; long long int binpow(long long int a, long long int b, long long int mod) { long long int res = 1; while (b!= 0) { if (b % 2) { res = (res * a) % mod; } a = (a * a) % mod; b = b / 2; } return res % mod; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> v(n); for (int i = 0; i < n; i++) cin >> v[i]; if (n % == 0) cout << "YES" << endl; else { int fl = 1; for (int i = 0; i < n - 1; i++) { if (v[i] > v[i + 1]) { fl = 0; break; } } if (!fl) cout << "YES" << endl; else { cout << "NO" << endl; } } } }
450	#include <bits/stdc++.h> using namespace std; bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) { return (a.second < b.second); } long long modFact(long long n, long long p) { if (n >= p) return 0; long long result = 1; for (long long i = 1; i <= n; i++) result = (result * i) % p; return result; } long long modPower(long long x, long long y, long long p) { long long res = 1; x = x % p; if (x == 0) return 0; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } void printArr(vector<long long> arr) { for (auto &x : arr) cout << x << " "; cout << '\n'; } long long get() { long long temp; cin >> temp; return temp; } void solve() { long long n; cin >> n; long long a[n]; for (auto &x : a) cin >> x; if (n % 2 == 1) { cout << "YES\n"; return; } else { bool isSorted = true; for (long long i = 0; i < n - 1; i++) { if (a[i] >= a[i + 1]) { isSorted = false; break; } } if (!isSorted) cout << "YES\n"; else cout << "NO\n"; } } int main() { ios::sync_with_stdio(false), cin.tie(0); long long t = 0; cin >> t; while (t--) solve(); return 0; }
451	#include <bits/stdc++.h> using namespace std; bool arraySortedOrNot(long long int arr[], long long int n) { if (n == || n == 1) return true; for (int i = 1; i < n; i++) if (arr[i - 1] > arr[i]) return false; return true; } void solve() { long long int n; cin >> n; long long int a[n]; for (long long int i = 0; i < n; i++) { cin >> a[i]; } if (n % == 0) { cout << "YES"; } else { if (arraySortedOrNot(a, n)) { cout << "NO"; } else { cout << "YES"; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { solve(); cout << endl; } return 0; }
452	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> a(n); for (long long &x : a) cin >> x; bool flag = 0; for (int i = 0; i < n - 1; i++) { if (a[i] > a[i + 1]) flag = true; } if (n % == || flag) cout << "YES\n"; else cout << "NO\n"; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; cin >> t; while (t--) solve(); return 0; }
453	#include <bits/stdc++.h> using namespace std; long long a[100010]; int main() { int t; cin >> t; while (t--) { int n; cin >> n; for (int i = 1; i <= n; i++) { cin >> a[i]; } if (n % == 0) cout << "YES" << '\n'; else { int cnt = 0; for (int i = 1; i <= n - 1; i++) { if (a[i] > a[i + 1]) cnt = 1; } if (cnt) cout << "YES" << '\n'; else cout << "NO" << '\n'; } } }
454	#include <bits/stdc++.h> using namespace std; using ll = long long; int main() { cin.sync_with_stdio(false); cin.tie(nullptr); int tc; cin >> tc; while (tc--) { int n; cin >> n; vector<int> nums(n); for (int& x : nums) { cin >> x; } bool ans = n % == 0; for (int i = 0; i < n - 1; ++i) { ans |= nums[i] > nums[i + 1]; } int cnt = 0, cur = 0; for (int x : nums) { if (x > cur) { cur = x; cnt++; } } ans |= cnt % == 0; cout << (ans? "YES" : "NO") << '\n'; } }
455	#include <bits/stdc++.h> using namespace std; string to_upper(string &a) { for (int i = 0; i < (int)a.size(); ++i) if (a[i] >= 'a' && a[i] <= 'z') a[i] -= 'a' - 'A'; return a; } string to_lower(string &a) { for (int i = 0; i < (int)a.size(); ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] += 'a' - 'A'; return a; } int gcd(int a, int b) { if (b == 0) return a; return gcd(b, a % b); } int lcm(int a, int b) { return (a / gcd(a, b)) * b; } void dsc() { int n; cin >> n; int arr[n]; for (int i = 0; i < n; i++) cin >> arr[i]; if (n % == 0) { cout << "YES\n"; return; } int x = 0; for (int i = 1; i < n; i++) { if (arr[i] < arr[i - 1]) x++; } if (x == 0) cout << "NO\n"; else cout << "YES\n"; } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) dsc(); }
456	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; for (int i = 0; i < t; i++) { int n; cin >> n; int last; cin >> last; bool strictly_increasing = true; for (int j = 1; j < n; j++) { int x; cin >> x; if (x > last) { strictly_increasing = false; } last = x; } if (n % == ||!strictly_increasing) { cout << "YES\n"; } else { cout << "NO\n"; } } return 0; }
457	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> arr(n); long long val = 0; bool ok = true; for (long long i = 0; i < n; i++) { long long temp; cin >> temp; if (temp < val) ok = false; val = temp; } if (ok && n % 2) cout << "NO" << endl; else cout << "YES" << endl; } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t = 1; cin >> t; for (long long i = 1; i <= t; i++) { solve(); } return 0; }
458	#include <bits/stdc++.h> using namespace std; void solve() { int n; cin >> n; int ar[n]; for (int i = 0; i < n; i++) cin >> ar[i]; if (n % == 0) cout << "YES" << endl; else { int flag = 0; for (int i = 0; i < n - 1; i++) { if (ar[i] > ar[i + 1]) flag++; } if (flag == 0) cout << "NO" << endl; else cout << "YES" << endl; } } int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) solve(); }
459	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(0); cin.tie(NULL); long long int t; cin >> t; while (t--) { long long int n; cin >> n; long long int arr[n]; for (long long int i = 0; i < n; i++) cin >> arr[i]; if (n % == 0) { cout << "YES" << "\n"; continue; } long long int check = 0; for (long long int i = 1; i < n; i++) { if (arr[i - 1] > arr[i]) { cout << "YES" << "\n"; check++; break; } } if (check) continue; cout << "NO" << "\n"; } return 0; }
460	#include <bits/stdc++.h> const long long int mod = 1e9 + 7; const long long int inf = 1e17; const double pi = 3.1415926536; using namespace std; using namespace std::chrono; long long int biExp(long long int a, long long int b) { if (b == 0) return 1; if (b % == 1) return (a * biExp(a, b - 1)) % mod; else { long long int temp = biExp(a, b / 2); return (temp * temp) % mod; } } long long int ModularInverse(long long a) { return biExp(a, mod - 2); } long long int power(long long int a, long long int b) { if (b == 0) return 1; if (b % == 1) return (a * pow(a, b - 1)); else { long long int temp = pow(a, b / 2); return (temp * temp); } } long long int fac(long long int n) { long long int ans = 1; for (int i = 1; i <= n; i++) { ans = (ans * i) % mod; } return ans; } long long int ncr(long long int n, long long int r) { long long int N = fac(n); long long int R = (fac(n - r) * fac(r)) % mod; return (N * ModularInverse(R)) % mod; } void tc() { long long int n; cin >> n; vector<long long int> vec(n); for (auto &i : vec) cin >> i; if (n % == 0) { cout << "YES" << endl; return; } else { for (int i = 0; i + < n; i++) { if (vec[i] > vec[i + 1]) { cout << "YES" << endl; return; } } } cout << "NO" << endl; } int main() { ios::sync_with_stdio(false); cin.tie(NULL); ; auto start = high_resolution_clock::now(); long long int t = 1; cin >> t; while (t--) { tc(); } auto stop = high_resolution_clock::now(); auto
461	#include <bits/stdc++.h> using namespace std; int main() { int T; cin >> T; while (T--) { int N; cin >> N; bool good = 0; vector<int> a(N); for (int &i : a) cin >> i; for (int i = 0; i + < N; i++) { if (a[i] > a[i + 1]) good = 1; } if (!good and N % 2) cout << "NO\n"; else cout << "YES\n"; } }
462	#include <bits/stdc++.h> using namespace std; void solve() { int n; cin >> n; vector<int> vec(n); vector<int> a; int p = 0, cnt = 0; for (auto& i : vec) { cin >> i; } if (n % == 0) { cout << "YES" << '\n'; return; } p = vec[0]; for (int i = 1; i < n; i++) { if (vec[i] >= vec[i - 1]) { cout << "YES" << '\n'; return; } p = i; } cout << "NO" << '\n'; } int main() { int t; cin >> t; while (t--) solve(); }
463	#include <bits/stdc++.h> using namespace std; const unsigned int M = 1000000007; const unsigned int MOD = 998244353; const int MAXN = 1e5 + 55; const long long int MAXD = 1e14; const long long int INF = 1e18; const long long int NINF = INF * (-1); int gcd(int a, int b) { if (a == 0) return b; return gcd(b % a, a); } long long binpow(long long a, long long b) { long long res = 1; while (b > 0) { if (b & 1) res = ((res) * (a)); a = ((a) * (a)); b >>= 1; } return res; } vector<vector<int>> adj(200055); vector<pair<long long int, pair<long long int, long long int>>> node(200055, {0, {0, 0}}); vector<bool> vis(200055); void testmetal() { long long int n; cin >> n; long long int a[n]; for (long long int i = 0; i < n; i++) { cin >> a[i]; } if (n % 2 == 0) { cout << "YES" << "\n"; return; } for (long long int i = 1; i < n; i++) { if (a[i] <= a[i - 1]) { cout << "YES" << "\n"; return; } } cout << "NO" << "\n"; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t; cin >> t; while (t--) { testmetal(); } return 0; }
464	#include <bits/stdc++.h> using namespace std; void yes() { cout << "YES" << "\n"; return; } void no() { cout << "NO" << "\n"; return; } template <typename T> void p(T a) { cout << a << " "; return; } template <typename T> void pnl(T a) { cout << a << "\n"; return; } const int ten4 = 1e4; const int ten5 = 1e5; const int ten6 = 1e6; const int ten7 = 1e7; const int ten9 = 1e9; const int mod = 1e9 + 7; struct pair_hash { inline std::size_t operator()(const std::pair<int, int>& v) const { return v.first * + v.second; } }; long long bin_to_integer(string strin) { long long r = 1, sum = 0; for (long long i = strin.length() - 1; i >= 0; i--) { if (strin[i] == '1') sum += r; r *= 2; } return sum; } string to_binary(int n) { string strng; while (n > 0) { if (n & 1) strng += '1'; else strng += '0'; n >>= 1; } reverse(strng.begin(), strng.end()); return strng; } int compare(const void* a, const void* b) { const long long* x = (long long*)a; const long long* y = (long long*)b; if (*x > *y) return 1; else if (*x < *y) return -1; return 0; } int power(int a, int n) { int res = 1; while (n) { if (n & 1) res = (res * 1LL * a) % mod; n /= 2; a = (a * 1LL * a) % mod; } return res; } const int Nc = 200001; int F[Nc]; bool Fcomputed = false; int nCr(int n, int r) { if (!Fcomputed) { F[0] = 1, Fcomputed = true; for (int i = 1; i < Nc;
465	#include <bits/stdc++.h> using namespace std; int v[200005]; int main() { int n, i, j, l, t, z, a; ios_base::sync_with_stdio(false); cin.tie(NULL); cin >> t; for (z = 1; z <= t; z++) { cin >> n; int maxim = 0; int cnt = 0; for (i = 1; i <= n; i++) { cin >> v[i]; } for (i = 2; i <= n; i++) { if (v[i] < v[i - 1]) { cnt = 1; } } if (n % == 0) { cout << "YES"; } else { if (cnt == 1) { cout << "YES"; } else { cout << "NO"; } } cout << '\n'; } return 0; }
466	#include <bits/stdc++.h> using namespace std; long long int poww(long long int x, long long int y) { long long int ans = 1; while (y-- > 0) { ans *= x; } return ans; } void sieve() { bool *primes = new bool[100000 + 1]; for (long long int i = 0; i < + 1; i++) { primes[i] = true; } long long int sqr = sqrt(100000); primes[0] = false; primes[1] = false; for (long long int p = 2; p <= sqr; p++) { if (primes[p]) { for (long long int i = p * p; i <= 100000; i += p) { primes[i] = false; } } } vector<int> v; for (long long int i = 2; i <= 100000; i++) { if (primes[i]) { v.push_back(i); } } } int main() { long long int t; cin >> t; while (t-- > 0) { int n; cin >> n; long long int arr[n]; int ch = 0; for (long long int i = 0; i <= n - 1; i++) { cin >> arr[i]; } if (n % == 0) { cout << "YES" << endl; } else { for (long long int i = 0; i <= n - 2; i++) { if (arr[i] > arr[i + 1]) { ch = 1; break; } } if (ch == 1) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } }
467	#include <bits/stdc++.h> const double PI = 3.14159265358979323846; using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long t; cin >> t; while (t--) { long long n; cin >> n; long long a[n]; for (long long i = 0; i < n; i++) cin >> a[i]; if (n % == 0) { cout << "YES" << endl; } else { long long ch = a[0], f = 0, idx1 = -1, idx2 = -1; for (long long i = 0; i + < n; i++) { if (a[i] > a[i + 1]) { f = 1; break; } } if (f == 1) cout << "YES" << endl; else cout << "NO" << endl; } } return 0; }
468	#include <bits/stdc++.h> using namespace std; string solve() { int n; cin >> n; int a[n]; for (int i = 0; i < n; i++) cin >> a[i]; if (n % == 0) return "YES"; for (int i = 0; i < n - 1; i++) if (a[i] > a[i + 1]) return "YES"; return "NO"; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long int t = 1; cin >> t; while (t--) { cout << solve() << "\n"; } return 0; }
469	#include <bits/stdc++.h> const int INF = 0x3f3f3f3f; const int N = (int)1e5 + 5; using namespace std; int t, n; int a[N]; int main() { ios::sync_with_stdio(false); cin.tie(0), cout.tie(0); cin >> t; a[0] = -1; while (t--) { cin >> n; for (int i = (1); i < (n + 1); i++) cin >> a[i]; if (n % == 0) { puts("YES"); continue; } else { bool ans = false; for (int i = (1); i < (n + 1); i++) { if (a[i] <= a[i - 1]) { ans = true; break; } } puts(ans? "YES" : "NO"); } } return 0; }
470	#include <bits/stdc++.h> using namespace std; long long mod = 998244353; vector<long long> fact(1); int gcdExtended(int a, int b, int* x, int* y) { if (a == 0) { *x = 0, *y = 1; return b; } int x1, y1; int gcd = gcdExtended(b % a, a, &x1, &y1); *x = y1 - (b / a) * x1; *y = x1; return gcd; } int modInverse(int a, int m) { int x, y; int g = gcdExtended(a, m, &x, &y); if (g!= 1) return 0; else { int res = (x % m + m) % m; return res; } } long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long power(long long x, long long y) { long long temp; if (y == 0) return 1; temp = power(x, y / 2); if (y % == 0) return temp * temp; else return x * temp * temp; } long long power(long long x, long long y, long long p) { long long res = 1; x = x % p; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } long long modInv(long long n, long long p) { return power(n, p - 2, p); } long long ncr(long long n, long long r) { return (n >= r? (fact[n] * modInv(fact[r], mod)) % mod * modInv(fact[n - r], mod) % mod : 0); } long long add(long long a, long long b) { long long z = a + b; if (z >= mod) z -= mod; return z; } long long mul(long long a, long long b) { return (a * b) % mod; } long long sub(long long a, long long b) { return (a - b + mod)
471	#include <bits/stdc++.h> using namespace std; void solve() { long long int n; cin >> n; vector<long long int> arr(n); for (long long int i = 0; i < n; i++) { cin >> arr[i]; } if (n % == 0) { cout << "YES" << endl; } else { bool flag = false; for (long long int i = 0; i < n - 1; i++) { if (arr[i] > arr[i + 1]) { flag = true; break; } } if (flag == true) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } int main() { int t; cin >> t; for (int i = 1; i <= t; i++) { solve(); } }
472	#include <bits/stdc++.h> using namespace std; const long long M = 1e9 + 7; void solve() { long long n, i; cin >> n; long long a[n]; for (i = 0; i < n; i++) cin >> a[i]; if (n % == 0) { cout << "YES\n"; return; } for (i = 0; i < n - 1; i++) { if (a[i] > a[i + 1]) { cout << "YES\n"; return; } } cout << "NO\n"; } int32_t main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t = 1; cin >> t; while (t--) solve(); }
473	#include <bits/stdc++.h> using namespace std; long long read() { long long ans = 0, f = 1; char c = getchar(); while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); } while (c >= '0' && c <= '9') ans = ans * + c - '0', c = getchar(); return ans * f; } const int maxn = 1e6 + 5; long long T, n, a[maxn], die[maxn], now; bool bj; int main() { T = read(); while (T--) { n = read(); for (register int i = 1; i <= n; i++) a[i] = read(); bj = 1; for (register int i = 1; i <= n; i++) { die[i] = -1; for (register int j = n; j >= 1; j--) { if (a[i] % (j + 1)!= 0) { die[i] = i - j; break; } } if (die[i] == -1) bj = 0; } for (register int i = 1; i <= n; i++) if (die[i] > i - 1) { bj = 0; } if (!bj) puts("NO"); else puts("YES"); } return 0; }
474	#include <bits/stdc++.h> using namespace std; int main() { ; ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) { long long x, y; cin >> x >> y; if (x == y) cout << x << "\n"; else if (x > y) cout << x + y << "\n"; else { long long mod = (y % x) * x; cout << (mod + y) / << "\n"; } } return 0; }
475	#include <bits/stdc++.h> using namespace std; long long x, y, n; inline void solve() { cin >> x >> y; if (y % x == 0) { cout << x << endl; return; } if (x < y) { n = y % x * x; cout << (y + n) / << endl; } else { cout << x + y << endl; } } int T; int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> T; while (T--) solve(); return 0; }
476	#include <bits/stdc++.h> using namespace std; const long long maxl = 2e5 + 7; const long long mod = 998244353; vector<long long> v[2]; long long dp[2][maxl]; signed main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; long long ans = 0; vector<long long> nana(n + 10); for (long long i = 1; i <= n; i++) cin >> nana[i]; for (long long i = n; i >= 1; i--) { long long k = i & 1; v[k].push_back(nana[i]); dp[k][nana[i]] = 1; long long las = nana[i]; for (auto& x : v[k ^ 1]) { long long chuxiancishu = dp[k ^ 1][x]; long long fenkuai = (nana[i] + x - 1) / x; long long newx = nana[i] / fenkuai; ans += chuxiancishu * i % mod * (fenkuai - 1) % mod; dp[k][newx] += chuxiancishu; if (las!= newx) v[k].push_back(newx), las = newx; } for (auto& x : v[k ^ 1]) dp[k ^ 1][x] = 0; v[k ^ 1].clear(); ans %= mod; } cout << ans << '\n'; for (auto& x : v[0]) dp[0][x] = 0; for (auto& x : v[1]) dp[1][x] = 1; v[0].clear(), v[1].clear(); } }
477	#include <bits/stdc++.h> using namespace std; namespace Ruri { const int infi = 1e9; const long long infl = 4e18; } // namespace Ruri using namespace Ruri; namespace Gadgets { inline long long ceil_div(long long a, long long b) { return (a + b - 1) / b; } inline long long pos_mod(long long a, long long b) { return (a % b + b) % b; } } // namespace Gadgets namespace Read { inline int ri() { int x; scanf("%d", &x); return x; } inline long long rl() { long long x; scanf("%lld", &x); return x; } inline double rd() { double x; scanf("%lf", &x); return x; } } // namespace Read namespace DeBug {} using namespace Gadgets; using namespace Read; using namespace DeBug; const int MAX_N = 1e5 + 5; const int mod = 998244353; void Add(int &x, int y) { x += y; if (x >= mod) x -= mod; } void Minus(int &x, int y) { x -= y; x += (x >> 31) & mod; }; void Mul(int &x, int y) { x = 1ll * x * y % mod; } int n, a[MAX_N]; int dp[2][MAX_N]; int main() { int T = ri(); while (T--) { n = ri(); for (int i = 1, bbb = n; i <= bbb; ++i) a[i] = ri(); int ans = 0; int now = 1, pre = 0; dp[pre][a[n]] = 1; for (int i = n, bbb = 1; i >= bbb; --i) { for (int l = 1, r; l <= a[i]; l = r + 1) { r = a[i] / (a[i] / l), dp[now][a[i] / r] = 0; } Add(dp[now][a[i]], 1); if (i == n) { swap(pre, now); continue; } for (int l = 1, r; l <= a[i + 1
478	#include <bits/stdc++.h> using namespace std; int main() { int a; cin >> a; for (int i = 1; i <= a; i++) { string p; int ans1 = 0, ans2 = 0; cin >> p; if (p.size() == 1) { cout << p; } else { for (int l = 0; l <= p.size() - 2; l++) { if (p[l] == 'a' && p[l + 1] == 'b') { ans1++; } else if (p[l] == 'b' && p[l + 1] == 'a') { ans2++; } else { } } int ans = abs(ans1 - ans2); if (ans1 > ans2) { for (int l = 0; l <= p.size() - 2; l++) { if (ans == 0) { break; } if (p[l] == 'a' && p[l + 1] == 'b' || p[l - 1]!= 'b') { p[l] = 'b'; ans--; } else if (p[l] == 'b' && p[l - 1] == 'a' || p[l + 1]!= 'a') { p[l] = 'a'; ans--; } else { } } } else if (ans1 < ans2) { for (int l = 0; l <= p.size() - 2; l++) { if (ans == 0) { break; } if (p[l] == 'b' && p[l + 1] == 'a' || p[l - 1]!= 'a') { p[l] = 'a'; ans--; } else if (p[l] == 'a' && p[l - 1] == 'b' || p[l + 1]!= 'b') { p[l] = 'b'; ans--; } else { } } } else { } cout << p << endl; } } return 0; }
479	#include <bits/stdc++.h> using namespace std; void ha() { printf("YES\n"); } void na() { printf("NO\n"); } long long power(long long a, long long b) { long long c, d; if (b == 1) { return a % 1000000007; } else if (b % == 0) { c = power(a, b / 2); return (c * c) % 1000000007; } else { c = power(a, b / 2); d = (c * c) % 1000000007; d = (d * a) % 1000000007; return d; } } int absolute(int a) { if (a >= 0) { return a; } else { return (a * (-1)); } } long long absolute(long long a) { if (a >= 0) { return a; } else { return (a * (-1)); } } int main() { int t; scanf("%d", &t); while (t--) { string a; cin >> a; int n = a.length(); if (a[0] == a[n - 1]) { a[0] = a[n - 1]; cout << a << endl; } else { cout << a << endl; } } return 0; }
480	#include <bits/stdc++.h> using namespace std; int main() { int T; scanf("%d", &T); while (T--) { long long n, k; scanf("%lld%lld", &n, &k); long long cnt = 1; if (n == 1) { printf("0\n"); continue; } for (int i = 1; i <= 64; i++) { if (cnt >= k) { printf("%lld\n", i - + (n - cnt - 1) / k + 1); break; } cnt *= 2; if (cnt >= n) { printf("%lld\n", i); break; } } } return 0; }
481	#include <bits/stdc++.h> using namespace std; using ii = pair<long long, long long>; long long mod = 1e9 + 7; void solve() { long long n, k; cin >> n >> k; long long hr; for (long long i = 0; i < 64; i++) { if ((1LL << i) >= k) { hr = i; break; } } long long done = (1LL << hr); if (n <= done) { for (long long i = 0; i <= hr; i++) { if ((1LL << i) >= n) { cout << i << "\n"; ; return; } } } else { long long ans = hr; ans += ceil((n - done) / (1.0 * k)); cout << ans << "\n"; ; } } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long _t; cin >> _t; while (_t--) solve(); return 0; }
482	#include <bits/stdc++.h> using namespace std; const long long INF = 1e18; const long long mod = 1e9 + 7; signed main() { std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); ; long long t; cin >> t; while (t--) { long long n, k; cin >> n >> k; if (n == 1) { cout << "0\n"; } else { if (k == 1) { cout << n - << "\n"; } else { long long a = 0; long long cnt = 0; while (pow(2, a) < k) { cnt++; a++; } long long x = pow(2, a); if (n <= x) { long long p = 0; long long q = 0; while (n > 1) { n = n - pow(2, q); q++; p++; } cout << p << "\n"; } else { long long y = n - x; long long z = y % k; if (z == 0) { cout << a + (y / x) << "\n"; } else { cout << a + (y / x) + << "\n"; } } } } } return 0; }
483	#include <bits/stdc++.h> using namespace std; signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; cin >> t; while (t--) { long long n, k; cin >> n >> k; vector<long long> v(n); for (long long i = 0; i < n; i++) { long long x; cin >> x; v[i] = pow(10LL, x); } sort(v.begin(), v.end()); vector<long long> diff; for (long long i = 1; i < n; i++) { diff.push_back(v[i] / v[i - 1] - 1); } long long sum = 0, idx = -1, sum1 = 0; for (long long i = 0; i < (long long)diff.size(); i++) { sum += diff[i]; if (sum >= k) { sum1 = sum - diff[i]; idx = i; break; } } if (idx == -1) { long long rem = (k - sum + 1) * (*prev(v.end())); if ((long long)v.size() == 1) { cout << rem << "\n"; } else { cout << rem + (*prev(v.end())) - << "\n"; } } else { long long rem = (k - sum1 + 1) * v[idx]; cout << rem + v[idx] - << "\n"; } } }
484	#include <bits/stdc++.h> using namespace std; long long int power(long long int a, long long int b) { long long int result; if (b == 0) return 1; if (b %!= 0) { result = a; result = (result * (power(a, b - 1))); } else { result = power(a, b / 2); result = (result * result); } return (long long int)result; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long int t; cin >> t; while (t--) { long long int n, k; cin >> n >> k; long long int sum = 0; long long int prev = 0; vector<long long int> v(n); for (auto &i : v) cin >> i; bool f = 1; for (int i = 0; i < n - 1; i++) { long long int temp = power(10, v[i + 1] - v[i]) - 1; if (temp < k) { sum += temp * (power(10, v[i])); k -= temp; } else { sum += (k + 1) * (power(10, v[i])); f = 0; break; } } if (f) { sum += (k + 1) * (power(10, v[n - 1])); } cout << sum << "\n"; } return 0; }
485	#include <bits/stdc++.h> using namespace std; long long a[15], n, k, t; vector<long long> ans; long long ten[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000}; signed main() { cin >> t; while (t--) { cin >> n >> k; k++; for (long long i = 1; i <= n; i++) cin >> a[i]; ans.clear(); for (long long i = 1; i <= n; i++) if (i < n) { long long d = a[i + 1] - a[i]; if (k < ten[d] - 1) { ans.push_back(k); break; } else { ans.push_back(ten[d] - 1); k -= ten[d] - 1; } } else if (i == n) ans.push_back(k); for (long long i = ans.size() - 1; i >= 0; i--) printf("%lld", ans[i]); putchar('\n'); } }
486	#include <bits/stdc++.h> using namespace std; const int N = 15; int a[N]; long long ksm(long long a, long long b, long long c) { int res = 1; while (b) { if (b & 1) res = (res * a) % c; a = (a * a) % c; b >>= 1; } return res % c; } int read() { int n; cin >> n; return n; } void solve() { int n; long long k; cin >> n >> k; for (int i = 1; i <= n; i++) cin >> a[i]; int pos = 0; vector<long long> v; bool f = 0; for (int i = 1; i <= n; i++) { if (i == && a[i]!= 0) { cout << << '\n'; return; } v.push_back(min(ksm(10, a[i] - pos, 1e18) - 1, k)); if (k + == ksm(10, a[i] - pos, 1e18)) f = true; k = max(0ll, k - ksm(10, a[i] - pos, 1e18) + 1); if (k == 0) break; pos = a[i]; } if (v.size() == 1) { cout << v[0] + << '\n'; return; } if (k!= 0) { v.push_back(k); v.back()++; for (int i = v.size() - 1; i > 0; i--) cout << v[i]; cout << '\n'; return; } if (k == 0) { if (!f) { v.back()++; } else v.push_back(1); } for (int i = v.size() - 1; i > 0; i--) cout << v[i]; cout << '\n'; } signed main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int _; cin >> _; while (_--) { solve(); } return 0; }
487	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 10; int n, k; int a[12]; long long fastpow(long long a, long long b) { long long sum = 1; while (b) { if (b & 1) sum *= a; a *= a; b >>= 1; } return sum; } int main() { int t; cin >> t; while (t--) { cin >> n >> k; long long sum = 0; for (int i = 0; i < n; i++) cin >> a[i]; int flag = 0; for (int i = 0; i < n - 1; i++) { long long temp = fastpow(10, a[i + 1] - a[i]) - 1; if (k - temp < 0) { sum += (k + 1) * fastpow(10, a[i]); flag = 1; } else { sum += temp * fastpow(10, a[i]); k -= temp; } } if (flag == 1) cout << sum << endl; else { sum += (k + 1) * fastpow(10, a[n - 1]); cout << sum << endl; } } }
488	#include <bits/stdc++.h> using namespace std; long long int mod = 1e9 + 7; void yes() { cout << "YES" << endl; } void no() { cout << "NO" << endl; } bool compare(pair<long long int, pair<long long int, long long int> > &a, pair<long long int, pair<long long int, long long int> > &b) { if (a.first == b.first) { return a.second.second <= b.second.second; } return a.first < b.first; } bool isPrime(long long int n) { for (int i = 2; i <= sqrt(n); i++) { if (n % i == 0) { return 0; } } return 1; } long long int solve() { long long int n, k, m; cin >> n >> k; string s, t = "", r; long long int count = 0, prev = 0, cnt = 0, ans = 0, curr = 0; bool turn = 1, win = 0, flag = 1; vector<long long int> v(n, 0); for (int i = 0; i < n; i++) cin >> v[i]; if (v[0]!= 0) { ans = 1; } else if (n == 1) { ans = k + 1; } else { count = k; for (int i = 1; i < n; i++) { cnt = (long long int)pow((long long int)10, v[i]) - (long long int)pow((long long int)10, v[i - 1]); if (count * (long long int)pow((long long int)10, v[i - 1]) <= cnt) { ans += (count + 1) * (long long int)pow((long long int)10, v[i - 1]); count = -1; break; } else { ans += cnt; count -= cnt / (long long int)pow((long long int)10, v[i - 1]); } } ans += (count + 1) * (long long int)pow((long long int)10, v[n - 1]); } cout << ans << endl; return ans; } int main() { ios_base::sync_with
489	#include <bits/stdc++.h> using namespace std; int t, aux; long long int n, k, arr[12]; long long int sig[12], ans; long long int pot(int n) { int aux = 1; for (int i = 1; i <= n; i++) { aux = 10; } return aux; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> t; while (t-- > 0) { cin >> n >> k; ans = 0; for (int i = 1; i <= n; i++) { cin >> aux; arr[i] = pot(aux); } for (int i = 1; i < n; i++) { sig[i] = arr[i + 1] / arr[i]; sig[i]--; } k++; for (int i = 1; i < n && k > 0; i++) { if (sig[i] < k) { k -= sig[i]; ans += arr[i + 1] - arr[i]; } else { ans += k * arr[i]; k = 0; } } if (k > 0) { ans += arr[n] * k; } cout << ans << "\n"; } return 0; }
490	#include <bits/stdc++.h> using namespace std; const int mo = 1e9 + 7; long long int a[100]; long long fastPower(long long base, long long power) { long long result = 1; while (power > 0) { if (power & 1) { result = result * base; } power >>= 1; base = (base * base); } return result; } int main() { int t; cin >> t; while (t--) { unsigned long long int n, k, ans = 0; cin >> n >> k; for (int i = 1; i <= n; i++) { cin >> a[i]; } bool flag = false; for (int i = 1; i <= n; i++) { if (i == 1) { if (a[i]!= 0) { ans = 1; flag = true; break; } } else { if (k < fastPower(10ll, a[i] - a[i - 1])) { ans += (k + 1) * fastPower(10ll, a[i - 1]); flag = true; break; } else { for (int j = a[i - 1]; j < a[i]; j++) { ans += fastPower(10ll, j) * 9; } k = k - fastPower(10ll, a[i] - a[i - 1]) + 1; } } } if (flag) { cout << ans << "\n"; ; } else { ans += (k + 1) * fastPower(10ll, a[n]); cout << ans << "\n"; ; } } return 0; }
491	#include <bits/stdc++.h> using namespace std; int long long power(int long long n) { string s = "1"; for (int i = 0; i < n; i++) { s += "0"; } return stoll(s); } int main() { int t; cin >> t; while (t--) { int long long n, k; cin >> n >> k; k++; int arr[n]; for (int i = 0; i < n; i++) cin >> arr[i]; if (k <= 9) { cout << k << endl; continue; int idx = -1; long long result = 0; for (int i = 1; i < n; i++) { if (k + > power(arr[i]) / power(arr[i - 1])) { k -= (power(arr[i]) / power(arr[i - 1]) - 1); result += ((power(arr[i]) / power(arr[i - 1]) - 1) * power(arr[i - 1])); } else { idx = i; break; } } if (idx == -1) { result += (k * power(arr[n - 1])); } else { result += (k * power(arr[idx - 1])); } cout << result << endl; } return 0; }
492	#include <bits/stdc++.h> using namespace std; const int INF = 0x3f3f3f3f; int main() { int T; cin >> T; while (T--) { int n, m; cin >> n >> m; vector<vector<int>> a(n, vector<int>(m)); for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) scanf("%d", &a[i][j]); vector<int> ord(n); for (int i = 0; i < n; i++) ord[i] = i; sort(ord.begin(), ord.end(), [&a](int x, int y) { return a[x][0] > a[y][0]; }); vector<vector<int>> maxl(n, vector<int>(m, -INF)); vector<vector<int>> minr(n, vector<int>(m, INF)); for (int i = n - 1; i >= 0; i--) for (int j = 0; j < m; j++) { maxl[i][j] = a[ord[i]][j]; if (i < n - 1) maxl[i][j] = max(maxl[i][j], maxl[i + 1][j]); if (j > 0) maxl[i][j] = max(maxl[i][j], maxl[i][j + 1]); } for (int i = n - 1; i >= 0; i--) for (int j = m - 1; j >= 0; j--) { minr[i][j] = a[ord[i]][j]; if (i < n - 1) minr[i][j] = min(minr[i][j], minr[i + 1][j]); if (j < m - 1) minr[i][j] = min(minr[i][j], minr[i][j + 1]); } vector<int> minl(m, INF), maxr(m, -INF); pair<int, int> ans = {-1, -1}; for (int i = 0; i < n - 1; i++) { for (int j = 0;
493	#include <bits/stdc++.h> using namespace std; using li = long long; using ld = long double; using pii = pair<int, int>; const int INF = 1e9 + 13; const li INF64 = 1e18 + 13; const int N = + 13; const int M = 998244353; const ld eps = 1e-6; const int B = 300; const int K = 400; const int LOGN = 20; void solve() { int n, m; cin >> n >> m; vector<vector<int>> a(n, vector<int>(m)); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) cin >> a[i][j]; } vector<pii> ord(n); for (int i = 0; i < n; i++) { ord[i] = {a[i][0], i}; } sort(ord.begin(), ord.end()); vector<vector<int>> b(n); for (int i = 0; i < n; i++) { b[i] = a[ord[i].second]; } vector<vector<int>> upmx(n, vector<int>(m, 0)), upmn(n, vector<int>(m, INF)), dnmx(n, vector<int>(m, 0)), dnmn(n, vector<int>(m, INF)); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { upmx[i][j] = (i ==? b[i][j] : max(b[i][j], upmx[i - 1][j])); upmn[i][j] = (i ==? b[i][j] : min(b[i][j], upmn[i - 1][j])); } } for (int i = n - 1; i >= 0; i--) { for (int j = 0; j < m; j++) { dnmx[i][j] = (i == n -? b[i][j] : max(b[i][j], dnmx[i + 1][j])); dnmx[i][j] = (i
494	#include <bits/stdc++.h> using namespace std; const long long N = 555, mod = 998244353; long long k, T, t, n, m, ans, cnt; long long f[N][N], dp[N][N]; bool vis[N]; priority_queue<long long, vector<long long>, greater<long long> > q; long long ksm(long long a, long long b) { long long res = 1; while (b) { if (b % 2) res = res * a % mod; b >>= 1; a = a * a % mod; } return res % mod; } void init() { f[0][0] = 1; for (long long i = 1; i < N; i++) { f[i][0] = 1; for (long long j = 1; j <= i; j++) f[i][j] = (f[i - 1][j] + f[i - 1][j - 1]) % mod; } } signed main() { ios::sync_with_stdio(false); cin.tie(0), cout.tie(0); init(); cin >> n >> m; for (long long i = 2; i <= n; i++) for (long long j = 1; j <= m; j++) { if (i - >= j) dp[i][j] = ksm(j, i); else { for (long long k = 2; k <= i; k++) (dp[i][j] += dp[k][j - i + 1] * ksm(i - 1, i - k) % mod * f[i][k]) %= mod; dp[i][j] = dp[i][j] + ksm(i - 1, i) % mod; } } cout << dp[n][m] << '\n'; return 0; }
495	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 9; const long long MOD = 1e9 + 7; const int mod = 998244353; inline long long qpow(long long b, long long e, long long m) { long long a = 1; for (; e; e >>= 1, b = b * b % m) if (e & 1) a = a * b % m; return a; } long long exgcd(long long a, long long b, long long &x, long long &y) { if (b == 0) { x = 1, y = 0; return a; } long long d = exgcd(b, a % b, x, y); long long z = x; x = y, y = z - y * (a / b); return d; } long long dp[509][509], C[509][509]; int n, x; void init() { for (int i = 1; i <= 500; i++) { C[i][0] = 1; for (int j = 1; j <= i; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod; } } } int main() { scanf("%d%d", &n, &x); init(); for (int i = 2; i <= n; i++) { for (int j = 1; j <= x; j++) { if (j < i) { dp[i][j] = qpow(j, i, mod) - qpow(j - 1, i, mod); dp[i][j] = (dp[i][j] % mod + mod) % mod; } else { for (int k = 2; k <= i; k++) { dp[i][j] += dp[k][j - i + 1] * C[i][k] % mod * qpow(i - 1, i - k, mod) % mod; dp[i][j] %= mod; } } } } long long ans = 0; for (int i = 1; i <= x; i++) ans += dp[n][i], ans %= mod; printf("%lld\n", ans); }
496	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 9; const long long MOD = 1e9 + 7; const int mod = 998244353; inline long long qpow(long long b, long long e, long long m) { long long a = 1; for (; e; e >>= 1, b = b * b % m) if (e & 1) a = a * b % m; return a; } long long exgcd(long long a, long long b, long long &x, long long &y) { if (b == 0) { x = 1, y = 0; return a; } long long d = exgcd(b, a % b, x, y); long long z = x; x = y, y = z - y * (a / b); return d; } long long dp[509][509], C[509][509]; int n, x; void init() { for (int i = 0; i <= 500; i++) { C[i][0] = 1; for (int j = 1; j <= 500; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod; } } } int main() { scanf("%d%d", &n, &x); init(); for (int i = 2; i <= n; i++) { for (int j = 1; j <= x; j++) { if (j < i) { dp[i][j] = qpow(j, i, mod) - qpow(j - 1, i, mod); dp[i][j] = (dp[i][j] % mod + mod) % mod; } else { for (int k = 2; k <= i; k++) { dp[i][j] += dp[k][j - i + 1] * C[i][k] % mod * qpow(i - 1, i - k, mod) % mod; dp[i][j] %= mod; } } } } long long ans = 0; for (int i = 1; i <= x; i++) ans += dp[n][i], ans %= mod; printf("%lld\n", ans); }
497	#include <bits/stdc++.h> using namespace std; long long mod = 998244353; int p[505][505], f[505][505], c[505][505]; int main() { for (int i = 0; i <= 500; i++) { p[i][0] = 1; for (int j = 1; j <= 500; j++) p[i][j] = 1ll * p[i][j - 1] * i % mod; } for (int i = 0; i <= 500; i++) { c[i][0] = 1; for (int j = 1; j <= 500; j++) c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod; } int n, x; cin >> n >> x; for (int i = 1; i <= x; i++) f[0][i] = 1; for (int i = 2; i <= n; i++) for (int j = 1; j <= x; j++) if (i > j) f[i][j] = p[j][i]; else for (int k = 0; k <= i; k++) f[i][j] = (f[i][j] + 1ll * c[i][k] * p[i - 1][k] % mod * f[i - k][j - i + 1] % mod) % mod; cout << f[n][x]; return 0; }
498	#include <bits/stdc++.h> using namespace std; using LL = long long; const int mod = 998244353; LL dp[507][507], C[507][507], mi[507][507]; int qpow(int a, int k, int p = mod) { int res = % p; while (k) { if (k & 1) res = (LL)res * a % p; k >>= 1; a = (LL)a * a % p; } return res; } void solve() { for (int i = 1; i <= 500; i++) { C[i][0] = C[i][i] = 1; for (int j = 1; j < i; j++) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod; for (int j = 0; j <= 500; j++) mi[i][j] = qpow(i, j); dp[0][i] = 1; } for (int i = 1; i <= 500; i++) { for (int j = 1; j <= 500; j++) { if (j < i) dp[i][j] = mi[j][i]; else { for (int k = 0; k <= i; k++) { dp[i][j] = (dp[i][j] + C[i][k] * dp[i - k][j - i + 1] * mi[i - 1][k]) % mod; } } } } } signed main() { ios::sync_with_stdio(false); solve(); int tt = 1; while (tt--) { int n, x; cin >> n >> x; cout << dp[n][x] << endl; } }
499	#include <bits/stdc++.h> using namespace std; template <typename T> using minpq = priority_queue<T, vector<T>, greater<T>>; const int INF = 1005000000; const long long MOD = 998244353LL; int ni() { int x; cin >> x; return x; } long long nl() { long long x; cin >> x; return x; } double nd() { double x; cin >> x; return x; } string next() { string x; cin >> x; return x; } struct Combo { vector<long long> facs; vector<long long> invfacs; int N; Combo(int N) { this->N = N; facs.assign(N + 1, 0); invfacs.assign(N + 1, 0); facs[0] = 1; for (int i = 1; i <= N; i++) { facs[i] = (facs[i - 1] * i) % MOD; } invfacs[N] = power(facs[N], MOD - 2); for (int i = N - 1; i >= 0; i--) { invfacs[i] = (invfacs[i + 1] * (i + 1)) % MOD; } } long long choose(int n, int k) { if (n < || k < || n < k) return 0LL; long long denInv = (invfacs[k] * invfacs[n - k]) % MOD; long long ans = (facs[n] * denInv) % MOD; return ans; } long long power(long long x, long long y) { long long ans = 1; x %= MOD; while (y > 0) { if (y % == 1) ans = (ans * x) % MOD; y /= 2; x = (x * x) % MOD; } return ans; } }; int main() { ios::sync_with_stdio(false); cin.tie(0); int N = ni(); int X = ni(); const int M = 51; long long dp[M][M]; memset(dp, 0, sizeof dp); for (int j = 0; j < (X + 1); j++) dp[1][j
500	#include <bits/stdc++.h> using namespace std; inline void in(long long& x) { scanf("%lld", &x); } inline void in(int& x) { scanf("%d", &x); } inline void in(double& x) { scanf("%lf", &x); } inline void in(char& x) { x = getchar(); } inline void in(char* x) { scanf("%s", x); } inline void in() {} template <class T, class... U> inline void in(T& a, U&... b) { in(a); in(b...); } inline void out(const long long x) { printf("%lld", x); } inline void out(const int x) { printf("%d", x); } inline void out(const char x) { putchar(x); } inline void out(const char* x) { printf("%s", x); } inline void out() {} template <class T, class... U> inline void out(const T a, const U... b) { out(a); out(b...); } template <class... U> inline void outl(const U... b) { out(b...); putchar('\n'); } const long long INF = 0x3f3f3f3f3f3f3f3f; const long long MOD = 998244353; const long long N = + 10; long long n, x, dp[N][N], c[N][N]; long long qpow(long long a, long long b) { long long ans = 1; while (b > 0) { if (b & 1) (ans *= a) %= MOD; b >>= 1; (a *= a) %= MOD; } return ans; } int solve(long long T) { cin >> n >> x; dp[n][0] = 1; for (long long i = n; i >= 2; --i) { for (long long j = 0; j <= x - 1; ++j) { if (dp[i][j] <= 0) continue; long long nj = min(x, j + i - 1); for (long long k = 0; k <= i; ++k) { (dp[k][nj] += (dp[i][
501	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void solve() { string s, s1; cin >> s >> s1; vector<int> v; for (int i = 0; i < s1.size(); i++) { for (int j = 0; j < s.size(); j++) { if (s1[i] == s[j]) { v.push_back(j); break; } } } int sum = 0;
502	#include <bits/stdc++.h> using namespace std; char a[26]; int num[26]; int main() { int n; scanf("%d", &n); char b[50]; for (int i = 0; i < n; i++) { int time = 0; scanf("%s", &a); scanf("%s", &b); for (int i1 = 0; i1 < 26; i1++) { num[a[i1] - 'a'] = i1; } for (int i2 = 0; i2 < strlen(b) - 1; i2++) { time += abs(num[b[i2 + 1] - 'a'] - num[b[i2] - 'a']); } printf("�����Ϊ%d\n", time); } }
503	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; map<char, int> mp; while (t--) { string x; cin >> x; for (int i = 1; i < 26; i++) { mp[x[i - 1]] = i; } string s; cin >> s; int ans = 0; for (int i = 1; i < s.length(); i++) { ans += abs(mp[s[i]] - mp[s[i - 1]]); } cout << ans << endl; } }
504	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string order; cin >> order; string s; cin >> s; map<char, int> m; int c = 1; for (auto i : order) { m[i] = c; c++; } int ans = 0; for (int i = 1; i < s.length(); i++) { ans += (m[s[i]] - m[s[i - 1]]); } std::cout << ans << std::endl; } return 0; }
505	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string str1, str2; cin >> str1 >> str2; long long ans = 0, pos1 = 0, pos2 = 0; for (int i = 0; i < str2.length() - 1; i++) { for (int j = 1; j <= str1.length(); j++) { if (str2[i] == str1[j]) { pos1 = j; } if (str2[i + 1] == str1[j]) { pos2 = j; } } ans += abs(pos2 - pos1); } cout << ans << endl; } }
506	#include <bits/stdc++.h> using namespace std; int main() { int q, res; string keyboard, st; cin >> q; while (q--) { cin >> keyboard; cin >> st; int v[100]; res = 0; for (int i = 0; i < st.length(); i++) { for (int j = 0; j < 26; j++) { if (keyboard[j] == st[i]) { v[i] = j; if (i > 0) res = abs(j - v[i - 1]); } } } if (st.length() == 1) cout << "0" << "\n"; else cout << res << "\n"; } }
507	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; for (int i = 0; i < t; i++) { string alf; cin >> alf; string word; cin >> word; if (word.size() == 1) { cout << << endl; continue; } long long result = 0; int temp = 0; for (int j = 1; j < word.size(); j++) { temp = alf.find(word[j]) - alf.find(word[j - 1]); result += abs(temp); temp = 0; } cout << result << endl; } }
508	#include <bits/stdc++.h> using namespace std; int main() { long long x0, n, t; cin >> t; while (t--) { cin >> x0 >> n; if (x0 % == 0) { if (n % == 1) { x0 = x0 - - n / * (4); cout << x0 << endl; } else if (n % == 2) cout << x0 + << endl; else if (n % == 3) cout << (x0 + + n / * 4) << endl; else if (n % == 0) cout << x0 << endl; } else if (x0 %!= 0) { if (n % == 1) cout << x0 + + n / * << endl; else if (n % == 2) cout << x0 - << endl; else if (n % == 3) cout << (x0 - + n / * (-4)) << endl; else if (n % == 0) cout << x0 << endl; } } return 0; }
509	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long x, j; cin >> x >> j; long long mod = j % 4; long long mult = j / 4; j -= (mult)*4; if (j == 0) cout << x << endl; else { for (long long i = (mult * 4) + 1; i <= (mult * 4) + mod; i++) { if (x % i == 0) x -= i; else x += i; } cout << x << endl; cout << x << endl; } return 0; }
510	#include <bits/stdc++.h> using namespace std; long long m = 998244353; long long ce(long long n, long long k) { if (n % k == 0) return (n / k); return (n / k + 1); } long long powl(long long a, long long b) { long long ans = 1; while (b!= 0) { if (b & 1) ans = (ans * a) % m; a = (a * a) % m; b = b / 2; } return ans; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { long long x, n, ans, m; cin >> x >> n; if (x % == 0) { if (n % == 1) { m = -n; } else if (n % == 2) { m = 1; } else if (n % == 3) { m = ce(n, 4) * 4; } else { m = 0; } ans = x + m; } else { if (n % == 1) { m = (n - 1) * + 1; } else if (n % == 2) { m = -1; } else if (n % == 3) { m = -(ce(n, 4) * 4); } else { m = 0; } ans = x + m; } cout << ans << "\n"; } }
511	#include <bits/stdc++.h> using namespace std; template <typename T, typename M> istream& operator>>(istream& in, pair<T, M>& pr) { in >> pr.first >> pr.second; return in; } template <typename T, typename M> ostream& operator<<(ostream& out, const pair<T, M>& pr) { out << pr.first <<'' << pr.second; return out; } template <typename T, typename M> pair<T, M> operator+(const pair<T, M>& p1, const pair<T, M>& p2) { return make_pair(p1.first + p2.first, p1.second + p2.second); } bool prostoechislo(unsigned long long k) { for (unsigned long long j = 2; j * j <= k; j++) if (k % j == 0) return 0; return 1; } long long stepen(long long a, long long b) { if (b == 0) return 1; if (b % == 0) return stepen(a, b / 2) * stepen(a, b / 2); else return a * stepen(a, b - 1); } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long x, n; cin >> x >> n; long long n1 = n; long long n2 = n; if (n % == 0) { cout << x << "\n"; continue; } if (n % == 1) { if (x % == 0) cout << x - n << "\n"; else cout << x + n << "\n"; continue; } if (n % == 2) { if (x % == 0) cout << x + << "\n"; else cout << x - 1; } if (n % == 3) { if (x % == 0) cout << x + n + << "\n"; else cout << x - n - << "\n"; } } }
512	#include <bits/stdc++.h> using namespace std; void solve() { long long int x, n, ans; cin >> x >> n; if (x % == 0) { if (n % == 0) { ans = x; } if (n % == 1) { ans = x - - (n / 4) * 4; } if (n % == 2) { ans = x + 1; } if (n % == 3) { ans = x + (ceil(n / 4.00)) * 4; } } else { if (n % == 0) { ans = x; } if (n % == 1) { ans = x + + (n / 4) * 4; } if (n % == 2) { ans = x - 1; } if (n % == 3) { ans = x - (ceil(n / 4)) * 4; } } cout << ans; } int main() { int t = 1; cin >> t; while (t--) { solve(); cout << endl; } return 0; }
513	#include <bits/stdc++.h> using namespace std; const auto LAMBDA_TRUE = [](long long int) { return true; }; const auto LAMBDA_FALSE = [](long long int) { return false; }; long long int _fastXOR(const long long int &_n) { if (_n % == 0) return _n; if (_n % == 1) return 1; if (_n % == 2) return _n + 1; return 0; } long long int _fastSUM(const long long int &_n) { return ((1 + _n) * _n) / 2; } long long int _ceil(const long long int &_v1, const long long int &_v2) { return (_v1 + _v2 - 1) / _v2; } template <class T> pair<T, T> _min_v( const vector<T> &_v, const std::function<bool(const T &)> &_cmpv = LAMBDA_TRUE, const std::function<bool(const T &)> &_cmpi = LAMBDA_TRUE) noexcept { pair<T, T> r; r.first = numeric_limits<long long int>::max(); for (size_t i = 0; i < _v.size(); i++) if (_v[i] < r.first && _cmpv(_v[i]) && _cmpi(i)) { r.first = _v[i]; r.second = i; } return r; } template <class T> pair<T, T> _max_v( const vector<T> &_v, const std::function<bool(const T &)> &_cmpv = LAMBDA_TRUE, const std::function<bool(const T &)> &_cmpi = LAMBDA_TRUE) noexcept { pair<T, T> r; r.first = numeric_limits<long long int>::min(); for (size_t i = 0; i < _v.size(); i++) if (_v[i] > r.first && _cmpv(_v[i]) && _cmpi(i)) { r.first = _v[i]; r
514	#include <bits/stdc++.h> using namespace std; int T; int main() { cin >> T; while (T--) { long long x, y; cin >> x >> y; long long ans = y % 4; long long cnt = 0; if (x % == 0) { if (ans == 0) { cnt = x; } if (ans == 1) { cnt = x - y; } if (ans == 2) { cnt = x + y; } if (ans == 3) { cnt = x + + y; } } else { if (ans == 0) { cnt = x; } if (ans == 1) { cnt = x + y; } if (ans == 2) { cnt = x - y; } if (ans == 3) { cnt = x - y - 1; } } cout << cnt << endl; } }
515	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long pwr(long long a, long long b) { a %= mod; long long res = 1; while (b > 0) { if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1; } return res; } void solve() { long long x, n; cin >> x >> n; if (n == 0) { cout << x << '\n'; return; } if (x % == 0) { if (n % == 0) { cout << << '\n'; return; } if (n % == 1) { cout << x - n << '\n'; return; } if (n % == 2) { cout << x + << '\n'; return; } if (n % == 3) { cout << x + n + << '\n'; return; } } if (n % == 0) { cout << << '\n'; return; } if (n % == 1) { cout << x + n << '\n'; return; } if (n % == 2) { cout << x - << '\n'; return; } if (n % == 3) { cout << x - n - << '\n'; return; } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long t; cin >> t; while (t--) { solve(); } return 0; }
516	#include <bits/stdc++.h> using namespace std; const long long N = 5e5 + 10; void fast() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); } int32_t main() { fast(); long long t, z; cin >> t; for (long long z = 1; z < t + 1; z++) { long long x, n; long long ex; cin >> x >> n; if (abs(x) % 2) ex = x - 1; else ex = x; long long ans; if (abs(x) % 2) { if (n % == 0) ans = 1; else if (n % == 1) ans = n + 1; else if (n % == 2) ans = 6; else ans = -n; } else { if (n % == 0) ans = 0; else if (n % == 1) ans = -n; else if (n % == 2) ans = 1; else ans = n + 1; } ans += ex; cout << ans << "\n"; } }
517	#include <bits/stdc++.h> using namespace std; int main() { int t; scanf("%d", &t); while (t--) { long long x, n, a, ans; scanf("%lld%lld", &x, &n); if (x % == 0) { a = n % 4; ans = (a ==? x - n : a ==? x + : a ==? x + + n : a); } else { a = n % 4; ans = (a ==? x + n : a ==? x - : a ==? x - - n : x); } printf("%lld\n", ans); } }
518	#include <bits/stdc++.h> using namespace std; int main() { long long t; cin >> t; while (t--) { long long x, n; cin >> x >> n; if (n == 0) { cout << x << endl; continue; long long xxx = n - 1; long long t2 = xxx % 4; long long temp = (xxx / 4); long long n1, n2, n3, n4; if (t2 == 0) { n1 = n2 = n3 = n4 = temp; } else if (t2 == 1) { n1 = temp + 1; n2 = n3 = n4 = temp; } else if (t2 == 2) { n1 = n2 = (temp + 1); n3 = n4 = temp; } else if (t2 == 3) { n1 = n2 = n3 = (temp + 1); n4 = temp; } long long s1 = (n1 * (4 * n1)) / 2; long long s2 = (n2 * (2 + * n2)) / 2; long long s3 = (n3 * (4 + * n3)) / 2; long long s4 = (n4 * (6 + * n4)) / 2; if (x % == 0) { x += s1 + s2; x -= (1 + s3 + s4); } else { x += (1 + s3 + s4); x -= (s1 + s2); } cout << x << endl; } }
519	#include <bits/stdc++.h> using namespace std; int main() { long long int t, x, y; cin >> t; while (t--) { cin >> x >> y; if (x % == 0) { if (y % == 0) { cout << y << endl; } else if (y % == 1) { cout << x - y << endl; } else if (y % == 2) { cout << x + << endl; } else if (y % == 3) { cout << (x + 1) + y << endl; } } else { if (y % == 0) { cout << x << endl; } else if (y % == 1) { cout << x + y << endl; } else if (y % == 2) { cout << x - << endl; } else if (y % == 3) { cout << (x - 1) - y << endl; } } } return 0; }
520	#include <bits/stdc++.h> using namespace std; using LL = long long; int main() { int T; for (cin >> T; T; T -= 1) { LL x, n; cin >> x >> n; LL n2 = n / * 4; while (n2 <= n) { if (x % == 0) { x -= n2 + 1; } else x += n2 + 1; n2++; } cout << n2 << endl; } return 0; }
521	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T> void _print(unordered_set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T, class V> void _print(unordered_map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(unordered_set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } template
522	#include <bits/stdc++.h> const int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1}; using namespace std; void solve() { int t; cin >> t; while (t--) { long long x, n, ans = 0, final; cin >> x >> n; final = n % 4; if (final == 0) { cout << << endl; } else if (x % == 0) { if (final == 1) { ans = x - (n); } else if (final == 2) { ans = x + 1; } else if (final == 3) { ans = x + + n; } cout << ans << endl; } else { if (final == 1) { ans = x + (n); } else if (final == 2) { ans = x - 1; } else if (final == 3) { ans = x - - n; } cout << ans << endl; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); solve(); }
523	#include <bits/stdc++.h> using namespace std; int q; long long x, n, tmp; int main() { cin >> q; while (q--) { cin >> x >> n; tmp = n % 4; n -= tmp; if (tmp == 0) { cout << x << "\n"; continue; } if (x % == 0) { x += n + 1; for (int i = 2; i <= tmp; i++) x -= n + i; } else { x -= n + 1; for (int i = 2; i <= tmp; i++) x += n + i; } cout << x << "\n"; } return 0; }
524	#include <bits/stdc++.h> using namespace std; int32_t main() { long long t; cin >> t; while (t--) { long long n, k, sum = 0, c = 0, mn = INT_MIN, m; cin >> n; long long a[n]; for (long long i = 0; i < n; i++) cin >> a[i]; sort(a, a + n); if (n == 2) { cout << max(a[0], a[1] - a[0]) << endl; } else { for (long long i = 1; i < n - 1; i++) { m = a[i + 1] - a[i]; mn = max(m, mn); } mn = max(mn, a[0]); cout << mn << endl; } } }
525	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> a(n); for (auto &i : a) cin >> i; sort((a).begin(), (a).end()); long long vic = 0; long long mn = a[0]; for (long long j = 0; j < n - 1; ++j) { vic -= (a[j] - vic); mn = max(mn, a[j + 1] - vic); } cout << mn << '\n'; } signed main() { ios_base::sync_with_stdio(0); long long n; cin >> n; for (long long i = 0; i < n; ++i) { solve(); } }
526	#include <bits/stdc++.h> using namespace std; int main() { size_t t; cin >> t; while (t--) { long long n; cin >> n; vector<long long> a(n); for (size_t i = 0; i < n; ++i) { cin >> a[i]; } if (a.size() == 1) { cout << a[0] << endl; continue; sort(a.begin(), a.end()); long long s = 0; long long res = 0; size_t i; for (i = 0; i < n - 1; ++i) { if (a[i] + s <= 0) { s -= a[i] + s; continue; } break; } vector<long long> diffs(n - i + 1); diffs[0] = a[i] + s; for (size_t j = i; j < n - 1; ++j) { diffs[j - i + 1] = a[j + 1] - a[j]; } cout << *max_element(diffs.begin(), diffs.end()) << endl; } return 0; }
527	#include <bits/stdc++.h> using namespace std; int main() { long long t; cin >> t; while (t--) { long long n, mx = 1e12; cin >> n; long long a[n + 2]; string s; set<pair<long long, long long>> red, blue; for (long long i = 1; i <= n; i++) { cin >> a[i]; } char ch; for (long long i = 1; i <= n; i++) { cin >> ch; if (ch == 'R') { red.insert({-a[i], i}); } else { blue.insert({a[i], i}); } } red.insert({mx, mx}); red.insert({-mx, mx}); blue.insert({-mx, mx}); blue.insert({mx, mx}); bool flag = true; for (long long i = 1; i <= n; i++) { auto p1 = blue.upper_bound({i, -mx}); long long valu = p1->first; if (valu == i) { blue.erase(blue.find({p1->first, p1->second})); continue; } if (valu!= mx) { blue.erase(blue.find({p1->first, p1->second})); continue; auto p = red.lower_bound({-i, -mx}); long long val = abs(p->first); if (val == i) { red.erase(red.find({p->first, p->second})); continue; } if (val!= mx) { red.erase(red.find({p->first, p->second})); continue; } flag = false; break; } if (flag) cout << "YES" << '\n'; else cout << "NO" << '\n'; } } }
528	#include <bits/stdc++.h> using namespace std; void testcase(); int32_t main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cout << setprecision(15); cout << fixed; long long t; cin >> t; while (t--) testcase(); return 0; } typedef struct element { long long data; char color; } box; void testcase() { long long n; cin >> n; box a[n]; for (long long i = 0; i < n; i++) { cin >> a[i].data; } char color[n]; for (long long i = 0; i < n; i++) { cin >> a[i].color; } box blue[n]; box red[n]; long long redindex = 0; long long blueindex = 0; for (long long i = 0; i < n; i++) { if (a[i].color == 'B') { blue[blueindex] = a[i]; blueindex++; } else if (a[i].color == 'R') { red[redindex] = a[i]; redindex++; } } long long rednumber[n + 2], bluenumber[n + 2]; for (long long i = 0; i < n + 2; i++) { rednumber[i] = 0; bluenumber[i] = 0; } for (long long i = 0; i < blueindex; i++) { if (blue[i].data <= 0) { rednumber[0]++; } else if (blue[i].data > n) { bluenumber[n + 1]++; } else { bluenumber[blue[i].data]++; } } for (long long i = 0; i < redindex; i++) { if (red[i].data <= 0) { rednumber[0]++; } else if (red[i].data > n) { rednumber[n + 1]++; } else { rednumber[red[i].data]++; } } for (long long i = 1; i < n + 2; i++) { bluenumber[i] += bluenumber[i - 1]; } for (long long i = n;
529	#include <bits/stdc++.h> using namespace std; int x[1000005], y[1000005]; int main() { int t, n, m, cntx, cnty, mnx, mny, mxx, mxy, okx, oky; string s; cin >> t; while (t--) { cin >> n >> m; cin >> s; cntx = 1; cnty = 1; mnx = 0; mny = 0; mxx = 0; mxy = 0; okx = 0; oky = 0; if (mxx - mnx + == n) okx = 1; if (mxy - mny + == m) oky = 1; for (int i = 0; i < s.size(); i++) { if (s[i] == 'L') { y[cnty] = y[cnty - 1] - 1; if (oky == && (y[cnty] < mny || y[cnty] > mxy)) break; mny = min(mny, y[cnty]); mxy = max(mxy, y[cnty]); cnty++; } else if (s[i] == 'R') { y[cnty] = y[cnty - 1] + 1; if (oky == && (y[cnty] < mny || y[cnty] > mxy)) break; mxy = max(mxy, y[cnty]); mny = min(mny, y[cnty]); cnty++; } else if (s[i] == 'U') { x[cntx] = x[cntx - 1] - 1; if (okx == && (x[cntx] < mnx || x[cntx] > mxx)) break; mnx = min(mnx, x[cntx]); mxx = max(mxx, x[cntx]); cntx++; } else { x[cntx] = y[cntx - 1] + 1; if (okx == && (x[cntx] < mnx || x[cntx] > mxx)) break; mxx = max(mxx, x[cntx]); mnx = min(mnx, x[cntx]); cntx++; } if (
530	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 7; char s[N]; void solve() { int n, m; cin >> n >> m; scanf("%s", s + 1); int x = 1, y = 1; int dx = 0, dy = 0; int len = strlen(s + 1); int maxx = n, maxny = m; for (register int i = 1; i <= len; ++i) { if (s[i] == 'L') dy--; else if (s[i] == 'R') dy++; else if (s[i] == 'D') dx++; else dx--; if (1 - dx > maxx || n - dx < x || - dy > maxny || m - dy < y) break; x = max(1 - dx, x); y = max(1 - dy, y); maxx = min(maxx, n - dx); maxny = min(maxny, m - dy); } cout << x <<'' << y << '\n'; } signed main() { int T; cin >> T; while (T--) solve(); return 0; }
531	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; const int N = 1e6 + 4; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long test = 1; cin >> test; while (test--) { int n, m; cin >> n >> m; string s; cin >> s; int len = s.size(); int up = 0, down = 0, left = 0, right = 0; int xcor = 0, ycor = 0; int flag = 0; int maxx = 0, minx = 0, miny = 0, maxy = 0; for (int i = 0; i < len; i++) { if (s[i] == 'L') xcor--; else if (s[i] == 'R') xcor++; else if (s[i] == 'U') ycor++; else ycor--; maxx = max(maxx, xcor); minx = min(minx, xcor); maxy = max(maxy, ycor); miny = min(miny, ycor); if (abs(maxx - minx) + > m || abs(maxy - miny) + > n) { int x, y; if (s[i] == 'L') y = m - maxx, x = n + miny; else if (s[i] == 'R') y = m - maxx - 1, x = n + miny; else if (s[i] == 'U') x = n + miny, y = m - maxx; else if (s[i] == 'D') x = n + miny + 1, y = m - maxx; cout << x << " " << y << endl; flag = 1; break; } } if (flag == 0) { cout << n + miny << " " << m - maxx << endl; } } return 0; }
532	#include <bits/stdc++.h> using namespace std; const int N = 2010; int n, m, cnt; int dist[N][N]; bool st[N][N]; char g[N][N]; pair<int, int> p[N * N]; int dfs(int first, int second) { p[++cnt] = {first, second}; if (first < || first > n || second < || second > m || st[first][second]) return dist[first][second]; st[first][second] = true; auto &k = dist[first][second]; if (g[first][second] == 'U') k = dfs(first - 1, second) + 1; if (g[first][second] == 'D') k = dfs(first + 1, second) + 1; if (g[first][second] == 'L') k = dfs(first, second - 1) + 1; if (g[first][second] == 'R') k = dfs(first, second + 1) + 1; return dist[first][second]; } void solve() { cin >> n >> m; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) cin >> g[i][j]; for (int i = 0; i <= n + 5; i++) for (int j = 0; j <= m + 5; j++) st[i][j] = false, dist[i][j] = 0; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { if (!st[i][j]) { cnt = 0; dfs(i, j); pair<int, int> t = p[cnt]; for (int k = 1; k <= cnt; k++) if (t == p[k]) { for (int h = k; h <= cnt; h++) dist[p[h].first][p[h].second] = cnt - k; } } } int first = 0, second = 0, res = 0; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) if (dist[i][j] > res) first = i, second = j, res = dist[i
533	#include <bits/stdc++.h> using namespace std; const int N = 2010; int n, m, cnt; int dist[N][N]; bool st[N][N]; char g[N][N]; pair<int, int> p[N * N]; int dfs(int first, int second) { p[++cnt] = {first, second}; if (first < || first > n || second < || second > m || st[first][second]) return dist[first][second]; st[first][second] = true; auto &k = dist[first][second]; if (g[first][second] == 'U') k = dfs(first - 1, second) + 1; if (g[first][second] == 'D') k = dfs(first + 1, second) + 1; if (g[first][second] == 'L') k = dfs(first, second - 1) + 1; if (g[first][second] == 'R') k = dfs(first, second + 1) + 1; return dist[first][second]; } void solve() { cin >> n >> m; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) cin >> g[i][j]; for (int i = 0; i <= n + 5; i++) for (int j = 0; j <= m + 5; j++) st[i][j] = false, dist[i][j] = 0; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { if (!st[i][j]) { cnt = 0; dfs(i, j); pair<int, int> t = p[cnt]; for (int k = 1; k <= cnt; k++) if (t == p[k]) { for (int h = k; h <= cnt; h++) dist[p[h].first][p[h].second] = cnt - k; } } } int first = 0, second = 0, res = 0; for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) if (dist[i][j] > res) first = i, second = j, res = dist[i
534	#include <bits/stdc++.h> using namespace std; const int N = + 10; const int M = 1000010; const int INF = 0x3f3f3f3f; const int mod = 998244353; pair<int, int> a[N], c[N]; void solve() { int n, m; cin >> n >> m; long long suma = 0, sumb = 0; long long l = 0, r = 0; for (int i = 1; i <= n; i++) { cin >> a[i].first >> a[i].second; int first = min(m, a[i].first), second = min(m, a[i].second); suma += a[i].first, sumb += a[i].second; l += -2 * first + m, r += * second - m; } if (suma + l <= sumb && suma + r >= sumb) { long long cx = sumb - suma - l; vector<pair<int, int> > res; for (int i = 1; i <= n; i++) { int first = min(m, a[i].first), second = min(m, a[i].second); int le = m - second, ri = first; while (le < ri) { int mid = le + ri >> 1; if ((first - mid) * <= cx) ri = mid; else le = mid + 1; } cx -= (first - le) * 2; res.push_back({le, m - le}); } cout << cx << '\n'; for (int i = 0; i < n; i++) cout << res[i].first <<'' << res[i].second << '\n'; } else if (suma + l > sumb) { cout << suma + l - sumb << '\n'; for (int i = 1; i <= n; i++) { int first = min(m, a[i].first); cout << first <<'' << m - first << '\n'; } } else { cout << sumb - suma - r; for (int i = 1; i <= n; i++) { int second = min(m, a[i].second); cout << m - second << '
535	#include <bits/stdc++.h> using namespace std; int T, a[200010], b[200010], l[200010], r[200010]; int main() { cin >> T; while (T--) { int n, m; cin >> n >> m; long long suma = 0, sumb = 0; for (int i = 1; i <= n; i++) { cin >> a[i] >> b[i]; suma += a[i], sumb += b[i]; } long long suml = 0, sumr = 0; for (int i = 1; i <= n; i++) { l[i] = max(0, m - b[i]); r[i] = min(m, a[i]); suml += l[i]; sumr += r[i]; } if (suma - suml <= sumb - ((long long)n * m - suml)) { cout << (sumb - ((long long)n * m - suml)) - (suma - suml) << endl; for (int i = 1; i <= n; i++) { cout << l[i] << " " << m - l[i] << endl; } } else if (suma - sumr >= sumb - ((long long)n * m - sumr)) { cout << (suma - sumr) - (sumb - ((long long)n * m - sumr)) << endl; for (int i = 1; i <= n; i++) { cout << r[i] << " " << m - r[i] << endl; } } else { long long v = (suma - suml) - (sumb - ((long long)n * m - suml)); cout << (v & 1) << endl; for (int i = 1; i <= n; i++) { if (v >= (r[i] - l[i]) * 2) { v -= (r[i] - l[i]) * 2; cout << l[i] << " " << m - l[i] << endl; } else { cout << l[i] + v / << " " << m - (l[i] + v / 2) << endl;
536	#include <bits/stdc++.h> using namespace std; const long long M = 1000000007; const long long U = 998244353; string to_string(char c) { return "'" + string(1, c) + "'"; } string to_string(string s) { return '"' + s + '"'; } string to_string(bool f) { if (f) return "True"; else return "False"; } string to_string(const char *s) { return to_string((string)s); } template <typename A> string to_string(A); template <typename A, typename B> string to_string(pair<A, B> p) { return "(" + to_string(p.first) + ": " + to_string(p.second) + ")"; } template <typename A> string to_string(A v) { bool f = false; string r = "{"; for (auto x : v) { if (f) r += ", "; r += to_string(x); f = true; } return r += "}"; } template <typename A> string to_string(vector<vector<A>> v) { string r; for (auto x : v) r += "\n" + to_string(x); return r; } long long Nerr; template <typename A> string to_string(A *p) { return to_string(vector<A>(p, p + Nerr)); } void err(istream_iterator<string>) { cerr << '\n'; } template <typename T, typename... Args> void err(istream_iterator<string> it, T a, Args... args) { cerr << *it << " = " << to_string(a) << "; "; err(++it, args...); } template <typename T> void kek(T ans) { cout << ans << '\n'; exit(0); } signed main() { ios_base::sync_with_stdio(0); long long TESTS = 1; cin >> TESTS; while (TESTS--) { long long n, m; cin >> n >> m; vector<long long> a(n); vector<long long> b(n); for (long long i = 0; i < n; i++)
537	#include <bits/stdc++.h> using namespace std; const long long N = 100100; long long ans; vector<long long> a(N), b(N), m(N), ans1(N), ans2(N); void cal(vector<long long>& ind) { long long n = (long long)ind.size(); long long l = -1, r = -1, prev = 0; for (long long j = 0; j < n; j++) { long long i = ind[j]; long long lx = max(0LL, a[i] - m[i]); long long rx = max(0LL, a[i]); long long templ = l, tempr = r; if ((l == -1) || (l < lx)) { l = lx; } if ((r == -1) || (rx < r)) { r = rx; } if (l > r) { ans -= (j - prev - 1); long long to = templ; for (long long k = prev; k < j; k++) { i = ind[k]; ans1[i] = a[i] - to; ans2[i] = m[i] - ans1[i]; } prev = j; j--; l = -1, r = -1; } else if (j == n - 1) { ans -= (j - prev + - 1); long long to = l; for (long long k = prev; k <= j; k++) { i = ind[k]; ans1[i] = a[i] - to; ans2[i] = m[i] - ans1[i]; } } } } void solve() { long long n; cin >> n; ans = n; map<long long, vector<long long>> mp; for (long long i = 0; i < n; i++) { cin >> a[i] >> b[i] >> m[i]; mp[a[i] + b[i] - m[i]].push_back(i); } for (auto& p : mp) { sort(p.second.begin(), p.second.end(), [&](const long long& i1, const long long& i2) { if (a[i1]!= b[i1]) { return a[
538	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5; long long n, a[N], b[N], m[N], cur_a[N], cur_b[N], mn[N], mx[N]; int solve(vector<int> &v) { int res = 0; vector<pair<pair<int, int>, int> > seg; for (auto idx : v) { seg.push_back({{mx[idx], mn[idx]}, idx}); } sort(seg.begin(), seg.end()); int mxx = -1; for (auto it : seg) { int l = it.first.second, r = it.first.first, idx = it.second; if (l > mxx) mxx = r, res++; mn[idx] = mxx; } return res; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { cin >> n; long long sum = 0; map<long long, vector<int> > mp; for (int i = 1; i <= n; i++) { cin >> a[i] >> b[i] >> m[i]; long long tmp_m = m[i]; long long tmp = min(tmp_m, a[i]); cur_a[i] = a[i] - tmp; tmp_m -= tmp; tmp = min(tmp_m, b[i]); cur_b[i] = b[i] - tmp; mn[i] = cur_a[i], mx[i] = mn[i] + min({a[i] - cur_a[i], b[i], m[i]}); mp[a[i] + b[i] - m[i]].push_back(i); } long long ans = 0; for (auto it : mp) { ans += solve(it.second); } cout << ans << "\n"; for (int i = 1; i <= n; i++) { long long diff = mn[i] - cur_a[i]; cur_a[i] += diff, cur_b[i] -= diff; c
539	#include <bits/stdc++.h> using namespace std; vector<pair<long long, long long>> vals[2000005]; int32_t main() { ios::sync_with_stdio(0); cin.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; pair<long long, long long> a[n]; pair<long long, long long> op[n]; long long mi[n]; for (long long i = 0; i < n; i++) { cin >> a[i].first >> a[i].second; op[i].first = a[i].first; op[i].second = a[i].second; cin >> mi[i]; } long long rx[n]; long long taken[n]; memset(taken, 0, sizeof(taken)); for (long long i = 0; i < n; i++) { long long ll = max((long long)(0), mi[i] - a[i].second); long long rr = min(a[i].first, mi[i]); taken[i] += ll; rr -= ll; a[i].first -= ll; a[i].second -= (mi[i] - ll); rx[i] = rr; } set<long long> s; for (long long i = 0; i < n; i++) { auto x = a[i]; s.insert(x.first + x.second); vals[x.first + x.second].push_back({x.first, i}); } long long fina = 0; for (auto x : s) { sort(vals[x].begin(), vals[x].end()); auto vv = vals[x]; long long maxa = 0; long long optim_start = 0; long long optim_end = 0; long long z = vals[x].size(); long long r = 0; for (long long i = 0; i < z; i++) { long long l = i; if (i < r) { continue; } r = max(r, i); while (r < z && vv[r].first - (rx[vv[r].second]) <= vv[l].first) { r++; } for (long long i = l; i < r;
540	#include <bits/stdc++.h> using namespace std; struct Yo { int a, b, m, idx; bool operator<(const Yo &other) const { return (a + b - m < other.a + other.b - other.m) || (a + b - m == other.a + other.b - other.m && a < other.a); } }; int n; vector<pair<int, int> > ans; vector<Yo> v; void solve() { cin >> n; ans.clear(); ans.resize(n + 1); v.clear(); for (int i = 0; i < n; i++) { Yo tmp; cin >> tmp.a >> tmp.b >> tmp.m; tmp.idx = i; v.push_back(tmp); } sort(v.begin(), v.end()); int dist = 0, mn = -1, w = 0; for (auto i : v) { if (i.a + i.b - i.m!= w) { dist++; w = i.a + i.b - i.m; if (i.m > i.b) { mn = i.a - (i.m - i.b); ans[i.idx] = {i.m - i.b, i.b}; } else { mn = i.a; ans[i.idx] = {0, i.m}; } continue; } if (i.a - i.m > mn) { dist++; if (i.m > i.b) { mn = i.a - (i.m - i.b); ans[i.idx] = {i.m - i.b, i.b}; } else { mn = i.a; ans[i.idx] = {0, i.m}; } } else { ans[i.idx] = {i.a - mn, i.m - (i.a - mn)}; } } cout << dist << "\n"; for (int i = 0; i < n; i++) cout << ans[i].first << " " << ans[i].second << "\n"; } int main() { int t; cin >> t; while (t--) solve(); return 0; }
541	#include <bits/stdc++.h> using namespace std; namespace Ruri { const int infi = 1e9; const long long infl = 4e18; } // namespace Ruri using namespace Ruri; namespace Gadgets { inline long long ceil_div(long long a, long long b) { return (a + b - 1) / b; } inline long long pos_mod(long long a, long long b) { return (a % b + b) % b; } } // namespace Gadgets namespace Read { inline int ri() { int x; scanf("%d", &x); return x; } inline long long rl() { long long x; scanf("%lld", &x); return x; } inline double rd() { double x; scanf("%lf", &x); return x; } } // namespace Read namespace DeBug {} using namespace Gadgets; using namespace Read; using namespace DeBug; const int MAX_N = 2e5 + 5; int n; int a[MAX_N], b[MAX_N], m[MAX_N], t[MAX_N]; int mna[MAX_N], mxa[MAX_N]; int id[MAX_N]; int eat_a[MAX_N], eat_b[MAX_N]; int main() { t[0] = infi; int T = ri(); while (T--) { n = ri(); for (int i = 1, bbb = n; i <= bbb; ++i) a[i] = ri(), b[i] = ri(), m[i] = ri(), t[i] = a[i] + b[i] - m[i]; for (int i = 1, bbb = n; i <= bbb; ++i) mna[i] = max(0, a[i] - m[i]), mxa[i] = a[i] - max(0, m[i] - b[i]); iota(id + 1, id + + n, 1); sort(id + 1, id + + n, [&](int x, int y) { if (t[x]!= t[y]) return t[x] < t[y]; return mna[x]!= mna[y]? mna[x] > mna
542	#include <bits/stdc++.h> using namespace std; const int inf = 1000000000; long long mod = 1000000007LL; long long mod2 = 998244353LL; int t, n, h; int k; int q; int a[200005], b[200005]; int m[200005]; map<int, vector<pair<int, int>>> gp; vector<int> ans; int main() { cin >> t; for (int cas = 1; cas <= t; ++cas) { scanf("%d", &n); gp.clear(); ans.clear(); for (int i = 1; i <= n; ++i) { ans.push_back(0); scanf("%d%d%d", &a[i], &b[i], &m[i]); gp[a[i] + b[i] - m[i]].push_back(make_pair(a[i], i)); } int tot = 0; for (auto itr : gp) { auto v = itr.second; sort(v.begin(), v.end()); for (int i = 0; i < v.size(); ++i) { if (i == 0) { tot++; int id = v[i].second; if (b[id] < m[id]) { ans[id - 1] = m[id] - b[id]; } } else { int id = v[i].second; int id2 = v[i - 1].second; if (a[id] - a[id2] - ans[id2 - 1] <= m[id]) { ans[id - 1] = a[id] - (a[id2] - ans[id2 - 1]); } else { tot++; if (b[id] < m[id]) { ans[id - 1] = m[id] - b[id]; } } } } } printf("%d\n", tot); for (int i = 1; i <= n; ++i) { printf("%d %d\n", ans[i - 1], m[i] - ans[i - 1]); } } return 0; }
543	#include <bits/stdc++.h> using namespace std; const long long mod = 998244353; long long qs(long long a, long long b) { long long res = 1; while (b) { if (b & 1) { res *= a; res %= mod; } a *= a; a %= mod; b >>= 1; } return res; } int32_t main() { long long t; cin >> t; while (t--) { long long n; cin >> n; for (long long i = 2; i <= n + 2; i++) { cout << i << " "; } cout << endl; } }
544	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long test; cin >> test; while (test--) { long long int n, ans = 1; cin >> n; for (long long int i = 0; i < n; i++) { cout << ans << " "; ans = ans + 1; } cout << "\n"; } return 0; }
545	#include <bits/stdc++.h> using namespace std; long long binpow(long long a, long long b, long long m) { a %= m; long long res = 1; while (b > 0) { if (b & 1) res = res * a % m; a = a * a % m; b >>= 1; } return res; } bool isPowerOfTwo(long long n) { if ((n & (n - 1)) == 0) return true; return false; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); ; long long t; cin >> t; while (t--) { long long n; cin >> n; for (long long i = 0; i < n; i++) { cout << i + << " "; } cout << "\n"; } }
546	#include <bits/stdc++.h> using namespace std; const int INF = 0x3f3f3f3f; long long INFF = 1000000000000000005ll; const int mod = 1000000007; const int dx[4] = {-1, 1, 0, 0}; const int dy[4] = {0, 0, -1, 1}; const int dx2[8] = {-1, -1, 0, 1, 1, 1, 0, -1}; const int dy2[8] = {0, 1, 1, 1, 0, -1, -1, -1}; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(
547	#include <bits/stdc++.h> using namespace std; void solve() { int n; cin >> n; cout << << " "; for (int i = 1; i <= n; i++) { cout << i + << " "; } cout << endl; } int main() { int t; cin >> t; while (t--) { solve(); } return 0; }
548	#include <bits/stdc++.h> using namespace std; const long long N = 2e6 + 5; long long n, k, a[N], res; void solo() { cin >> n; for (int i = 1; i <= n; i++) cout << i + << " "; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t = 1; cin >> t; while (t--) { solo(); cout << endl; } cerr << "\n" << (double)clock() / CLOCKS_PER_SEC * << " ms"; }
549	#include <bits/stdc++.h> using namespace std; using ll = long long; using ull = unsigned long long; const int inf = 1e9 + 10; const ll llinf = 1e18 + 10; const int mod = 1e9 + 7; ll gcd(ll a, ll b) { if (b == 0) { return a; } return gcd(b, a % b); } int main() { std::ios_base::sync_with_stdio(false); int t; cin >> t; while (t--) { int n; cin >> n; for (int i = 0; i < n; ++i) { cout << i + << " "; } cout << "\n"; } }
550	#include <bits/stdc++.h> using namespace std; vector<bool> prime(1000001, true); long long cha; const int INF = 1000000000; vector<vector<int>> g(0); vector<pair<long long, long long>> t(0); pair<int, int> combine(pair<int, int> a, pair<int, int> b) { if (a.first > b.first) return a; if (b.first > a.first) return b; return make_pair(a.first, a.second + b.second); } void build(vector<long long> a, int v, int tl, int tr) { if (tl == tr) t[v] = make_pair(a[tl], 1); else { int tm = (tl + tr) / 2; build(a, v * 2, tl, tm); build(a, v * + 1, tm + 1, tr); t[v] = combine(t[v * 2], t[v * + 1]); } } pair<int, int> get_max(int v, int tl, int tr, int l, int r) { if (l > r) return make_pair(-INF, 0); if (l == tl && r == tr) return t[v]; int tm = (tl + tr) / 2; return combine(get_max(v * 2, tl, tm, l, min(r, tm)), get_max(v * + 1, tm + 1, tr, max(l, tm + 1), r)); } void update(int v, int tl, int tr, int pos, int new_val) { if (tl == tr) t[v] = make_pair(new_val, 1); else { int tm = (tl + tr) / 2; if (pos <= tm) update(v * 2, tl, tm, pos, new_val); else update(v * + 1, tm + 1, tr, pos, new_val); t[v] = combine(t[v * 2], t[v * + 1]); } } void swap(long long a, long long b) { a += b; b = a - b; a -= b; } unsigned long long binpow(long long a, long long n
551	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC optimize("unroll-loops") using namespace std; const long long inf = 1e6; const long long mod = 1e9; void solve() { long long n; cin >> n; vector<long long> a(n); for (long long i = 0; i < n; i++) a[i] = i + 1; for (auto i : a) cout << i << " "; cout << "\n"; } signed main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long tests = 1; cin >> tests; while (tests--) { solve(); } return 0; }
552	#include <bits/stdc++.h> using namespace std; void solve() { int n; cin >> n; cout << << " "; for (int i = 1; i <= n; i++) { cout << i + << " "; } cout << endl; } int main() { int t; cin >> t; while (t--) { solve(); } return 0; }
553	#include <bits/stdc++.h> using namespace std; void solve(); int main() { int t = 1; while (t--) { solve(); cout << endl; } return 0; } void solve() { int n, a, b; cin >> n >> a >> b; if (abs(a - b) <= && a + b + <= n) { if (a <= b) { int i, j, k = min(a, b); if (a < b) { cout << << " " << << " "; i = 3, j = 4; } else { cout << << " "; i = 3, j = 2; } for (; max(i, j) < n && k > 0; i += 2, j += 2, k--) cout << i << " " << j << " "; for (int t = min(i, j); t <= n; t++) cout << t << " "; } else { int i = n - 1, j = n, k = max(a, b); for (; min(i, j) > && k > 0; i -= 2, j -= 2, k--) cout << i << " " << j << " "; for (int t = max(i, j); t > 0; t--) cout << t << " "; } } else { cout << -1; } }
554	#include <bits/stdc++.h> using namespace std; int i, j, m, n, s, t, x, z, y; int main() { cin >> n; while (n--) { cin >> x >> y >> z; if (y + z >= x - || y - z > || y - z < -1) { cout << -1 << endl; continue; } if (y > z) { cout << x - 1; for (i = 1; i <= y; i++) { cout << " " << x - (2 * i - 2); if (i!= y) cout << " " << x - (2 * i + 1); else cout << " " << x - (2 * i); } for (i = x - (2 * y + 1); i >= 1; i--) cout << " " << i; cout << endl; } if (y < z) { cout << 2; for (i = 1; i <= y; i++) { cout << " " << * i - 1; cout << " " << * i + 2; } cout << " " << * y + - 1; for (i = * y + + 1; i <= x; i++) cout << " " << i; } if (y == z) { cout << 1; for (i = 1; i <= y; i++) { cout << " " << * i + 1; cout << " " << * i; } for (i = * i + 2; i <= x; i++) cout << " " << i; } cout << endl; } }
555	#include <bits/stdc++.h> const double PI = 3.1415926535897932384626433; const int KL = 1e6; const long long MOD = 1e9 + 7; using namespace std; int q, x, y, z, n, m, a, b, ans; string t; vector<int> vec; int main() { scanf("%d", &q); while (q--) { scanf("%d", &n); scanf("%d", &a); scanf("%d", &b); if (a + b <= n - && abs(a - b) <= 1) { if (a == b + 1) { int cnt = n - 1; while (a > 0) { printf("%d %d ", cnt, cnt + 1); cnt -= 2; a -= 1; } for (int i = cnt + 1; i >= 1; i--) printf("%d ", cnt); printf("\n"); } else if (a == b) { int cnt = a + b; while (a > 0) { printf("%d %d ", cnt, cnt + 1); cnt -= 2; a--; } printf("1 "); for (int i = b + b + 2; i <= n; i++) printf("%d ", i); printf("\n"); } else { int cnt = 2; while (b > 0) { printf("%d %d ", cnt, cnt - 1); cnt += 2; b--; } for (int i = cnt - 1; i <= n; i++) printf("%d ", i); printf("\n"); } } else printf("-1\n"); } return 0; }
556	#include <bits/stdc++.h> using namespace std; const long long M = 1000000007; const long long MM = 998244353; const long long INF = 9e18; long long expm(long long a, long long b) { long long res = 1; while (b > 0) { if (b & 1) res = (res % M * a % M) % M; a = (a % M * a % M) % M; b >>= 1; } return res; } signed main() { ios::sync_with_stdio(NULL), cin.tie(NULL), cout.tie(NULL); auto start = chrono::high_resolution_clock::now(); long long tt = 1; cin >> tt; for (long long test = 1; test <= tt; test++) { long long n, a, b; cin >> n >> a >> b; long long x = abs(a - b); if (x > || max(a, b) > n / || (a + b) >= n) { cout << -1 << "\n"; continue; } if (a == b) { long long p = 1, q = n; for (long long i = 1; i <= a; i++) { cout << p << " " << q << " "; p++; q--; } while (p <= q) { cout << p << " "; p++; } cout << "\n"; } else if (a > b) { long long p = 1, q = n; for (long long i = 1; i <= a; i++) { cout << p << " " << q << " "; p++; q--; } while (q >= p) { cout << q << " "; q--; } cout << "\n"; } else { long long p = 1, q = n; for (long long i = 1; i <= b; i++) { cout << q << " " << p << " "; p++; q--; } while (p <= q) { cout << p << " "; p++; } cout << "\n"; } } cout << "\n"; auto stop = chrono::high_resolution_clock::now(); auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
557	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 10; int arr[N]; int main(void) { int T; cin >> T; while (T--) { int n, a, b; cin >> n >> a >> b; bool flag = true; for (int i = 1; i <= n; i++) arr[i] = i; int maxv = (n - 2) / + (n & 1); if (a > maxv || b > maxv) flag = false; else if (abs(a - b) > 1) flag = false; else if ((n & 1) && a == maxv && b == maxv) flag = false; else if (a == && b == 0) { for (int i = 1; i <= n; i++) arr[i] = i; } else { if (a == b) { int l = 1, r = n; for (int i = 1; i <= b * + 1; i += 2) arr[i] = r--; for (int i = 2; i <= a * 2; i += 2) arr[i] = l++; for (int i = * b + 2; i <= n; i++) arr[i] = l++; } else if (a == b + 1) { int l = 1, r = n; for (int i = 1; i <= a * 2; i += 2) arr[i] = l++; for (int i = 2; i <= a * 2; i += 2) arr[i] = r--; for (int i = * a + 1; i <= n; i++) arr[i] = r--; } else { int l = 1, r = n; for (int i = 1; i <= b * 2; i += 2) arr[i] = r--; for (int i = 2; i <= b * 2; i += 2) arr[i] = l++; for (int i = * b + 1; i <= n; i++) arr[i] = l++; } } if (flag) { for (int i = 1; i <= n; i++) cout << arr[i] << " "; cout << endl; } else cout << "-1"
558	#include <bits/stdc++.h> using namespace std; long long int gcd(long long int a, long long int b) { return b? gcd(b, a % b) : a; } long long int expo(long long int a, long long int b, long long int mod) { long long int res = 1; while (b > 0) { if (b & 1) res = (res * a) % mod; a = (a * a) % mod; b = b >> 1; } return res; } long long int mminvprime(long long int a, long long int b) { return expo(a, b - 2, b); } long long int mod_add(long long int a, long long int b, long long int m) { a = a % m; b = b % m; return (((a + b) % m) + m) % m; } long long int mod_mul(long long int a, long long int b, long long int m) { a = a % m; b = b % m; return (((a * b) % m) + m) % m; } long long int mod_sub(long long int a, long long int b, long long int m) { a = a % m; b = b % m; return (((a - b) % m) + m) % m; } long long int mod_div(long long int a, long long int b, long long int m) { a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m; } vector<long long int> sieve(int n) { int* arr = new int[n + 1](); vector<long long int> vect; for (int i = 2; i <= n; i++) if (arr[i] == 0) { vect.push_back(i); for (int j = * i; j <= n; j += i) arr[j] = 1; } return vect; } void solve() { long long int n; cin >> n; long long int a; cin >> a; long long int b; cin >> b; vector<long long int> v; if (abs(a - b)
559	#include <bits/stdc++.h> using namespace std; void solve() { long long n, a, b; cin >> n >> a >> b; if (abs(a - b) > 1) { cout << "-1\n"; return; } if (a > b) { if (2 * a + > n) { cout << "-1\n"; return; } cout << "1 "; for (long long i = a + 2; i <= n - a; i++) cout << i << " "; for (long long i = 2; i <= a + 1; i++) { cout << n - i + << " " << i << " "; } cout << "\n"; } else if (b > a) { if (2 * b + > n) { cout << "-1\n"; return; } cout << n << " "; for (long long i = n - b - 1; i > b; i--) { cout << i << " "; } for (long long i = 1; i <= b; i++) { cout << i << " " << n - i << " "; } cout << "\n"; } else { if (2 * a + > n) { cout << "-1\n"; return; } if (n == 1) { cout << "1\n"; return; } cout << "1 "; for (long long i = a + 2; i < n - a; i++) cout << i << " "; cout << n << " "; for (long long i = 2; i <= a + 1; i++) { cout << i << " " << n - i + << " "; } cout << "\n"; } } signed main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); long long testcases = 1; cin >> testcases; while (testcases--) solve(); return 0; }
560	#include <bits/stdc++.h> using namespace std; template <typename Arg1> void __f(const char* name, Arg1&& arg1) { std::cerr << name << " : " << arg1 << '\n'; } template <typename Arg1, typename... Args> void __f(const char* names, Arg1&& arg1, Args&&... args) { const char* comma = strchr(names + 1, ','); std::cerr.write(names, comma - names) << " : " << arg1 << " | "; __f(comma + 1, args...); } template <typename T, typename U> static inline void amin(T& x, U y) { if (y < x) x = y; } template <typename T, typename U> static inline void amax(T& x, U y) { if (x < y) x = y; } mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); struct custom_hash { static uint64_t splitmix64(uint64_t x) { x += 0x9e3779b97f4a7c15; x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9; x = (x ^ (x >> 27)) * 0x94d049bb133111eb; return x ^ (x >> 31); } size_t operator()(uint64_t x) const { static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count(); return splitmix64(x + FIXED_RANDOM); } }; long long max(long long a, long long b) { return (a > b)? a : b; } long long min(long long a, long long b) { return (a < b)? a : b; } long long solve() { long long n; cin >> n; vector<pair<long long, long long> > v(n); for (long long i = 0; i < n; i++) cin >> v[i].first; for (long long i = 0; i < n; i++) cin >> v[i].second
561	#include <bits/stdc++.h> using namespace std; const int N = 100100; struct pp { pair<int, int> p; int id; } w[N]; int cmp(pp a, pp b) { return a.p.second < b.p.second; } set<int, greater<int> > los; set<int, greater<int> > L; int ans[N]; void solve() { los.clear(); int n; cin >> n; for (int i = 1; i <= n; i++) { scanf("%d", &w[i].p.first); w[i].id = i; } for (int i = 1; i <= n; i++) { scanf("%d", &w[i].p.second); } sort(w + 1, w + + n, cmp); int win = w[n].p.first; ans[w[n].id] = 1; for (int i = 1; i <= n - 1; i++) { L.insert(w[i].p.second); } for (int i = n - 1; i >= 1; i--) { if (w[i].p.first > win || *L.begin() > win) { win = min(win, w[i].p.first); ans[w[i].id] = 1; while (!los.empty()) { int x = *los.begin(); if (w[i].p.first < x) { win = min(win, x); los.erase(los.begin()); } else break; } } else { los.insert(w[i].p.first); ans[w[i].id] = 0; } L.erase(w[i].p.second); } for (int i = 1; i <= n; i++) { cout << ans[i]; } cout << '\n'; } int main() { int t; cin >> t; while (t--) { solve(); } return 0; }
562	#include <bits/stdc++.h> using namespace std; vector<vector<long long>> g, g_rev; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr); long long t; cin >> t; for (long long q = 0; q < t; q++) { long long n; cin >> n; vector<long long> a(n), b(n); map<long long, long long> ma, mb; for (long long i = 0; i < n; i++) { cin >> a[i]; ma[a[i]] = i; } for (long long i = 0; i < n; i++) { cin >> b[i]; mb[b[i]] = i; } set<long long> winners; vector<long long> a_add, b_add; a_add.push_back(prev(ma.end())->second); winners.insert(prev(ma.end())->second); ma.erase(prev(ma.end())); long long cnt = 1; while (cnt > 0) { cnt = 0; for (auto &e : a_add) { while (mb.lower_bound(b[e])!= mb.end()) { b_add.push_back(mb.lower_bound(b[e])->second); winners.insert(mb.lower_bound(b[e])->second); cnt++; mb.erase(mb.lower_bound(b[e])); } } a_add.clear(); for (auto &e : b_add) { while (ma.lower_bound(a[e])!= ma.end()) { a_add.push_back(ma.lower_bound(a[e])->second); winners.insert(mb.lower_bound(a[e])->second); cnt++; ma.erase(ma.lower_bound(a[e])); } } b_add.clear(); } for (long long i = 0; i < n; i++) { if (winners.count(i)) { cout << 1; } else { cout << 0; } } cout << '\n'; } return 0; }
563	#include <bits/stdc++.h> using namespace std; const int max_n = 200111, inf = 1000111222, mod = 998244353; int f[max_n]; int rf[max_n]; int powm(int a, int b) { if (b == 0) { return 1; } if (b % == 0) { return powm((1LL * a * a) % mod, b / 2); } else { return (1LL * a * powm(a, b - 1)) % mod; } } void precalc() { f[0] = 1; for (int i = 1; i < max_n; ++i) { f[i] = (1LL * f[i - 1] * i) % mod; } rf[max_n - 1] = powm(f[max_n - 1], mod - 2); for (int i = max_n - 2; i >= 0; --i) { rf[i] = (1LL * rf[i + 1] * (i + 1)) % mod; } } int C(int n, int k) { if (k > n) return 0; return ((1LL * f[n] * rf[n - k] % mod) * rf[k]) % mod; } int A(int n, int k) { if (k > n) return 0; return (1LL * f[n] * rf[n - k]) % mod; } string s[max_n]; int n; long long dp[max_n][4]; bool can01(string s) { if (s[0] == '1') return 0; if (s[1] == '0') return 0; return 1; } bool can10(string s) { if (s[0] == '0') return 0; if (s[1] == '1') return 0; return 1; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cin >> n; precalc(); int c1 = 0, c0 = 0, cq = 0; bool have00 = 0; bool have11 = 0; for (int i = 0; i < n; ++i) { cin >> s[i];
564	#include <bits/stdc++.h> using namespace std; long long int gcd(long long int a, long long int b) { return (b == 0LL? a : gcd(b, a % b)); } long double dist(long double x, long double arayikhalatyan, long double x2, long double y2) { return sqrt((x - x2) * (x - x2) + (arayikhalatyan - y2) * (arayikhalatyan - y2)); } long long int S(long long int a) { return (a * (a + 1LL)) / 2; } mt19937 rnd(363542); char vow[] = {'a', 'e', 'i', 'o', 'u'}; int dx[] = {0, -1, 0, 1, -1, -1, 1, 1, 0}; int dy[] = {-1, 0, 1, 0, -1, 1, -1, 1, 0}; const int N = 1e5 + 20; const long long int mod = 998244353; const long double pi = acos(-1); const int T = 200; long long int bp(long long int a, long long int b = mod - 2LL) { long long int ret = 1; while (b) { if (b & 1) ret *= a, ret %= mod; a *= a; a %= mod; b >>= 1; } return ret; } ostream& operator<<(ostream& c, pair<int, int> a) { c << a.first << " " << a.second; return c; } template <class T> void maxi(T& a, T b) { a = max(a, b); } template <class T> void mini(T& a, T b) { a = min(a, b); } int n; int r0, r1, l0, l1; string s[N]; long long int f[N], ans; long long int c(int n, int k) { long long int ret = f[n] * bp(f[k]); ret %= mod; ret *= bp(f[n - k]); ret %= mod; return ret; } long long int ss() { int sm = 0,
565	#include <bits/stdc++.h> using namespace std; char d[100001][3]; inline long long qpow(long long base, long long expo) { long long ret = 1; for (; expo; (base *= base) %= 998244353, expo >>= 1) if (expo & 1) (ret *= base) %= 998244353; return ret; } long long fac[100001], invfac[100001]; inline long long C(int n, int m) { return fac[n] * invfac[m] % * invfac[n - m] % 998244353; } int main() { int n; scanf("%d", &n); int b0 = 0, b1 = 0, w0 = 0, w1 = 0; fac[0] = invfac[0] = 1; for (int i = 1; i <= n; i++) { scanf("%s", d[i]); b0 += d[i][0] == 'B'; b1 += d[i][1] == 'B'; w0 += d[i][0] == 'W'; w1 += d[i][1] == 'W'; fac[i] = fac[i - 1] * i % 998244353; } invfac[n] = qpow(fac[n], - 2); for (int i = n - 1; i; i--) invfac[i] = invfac[i + 1] * (i + 1) % 998244353; int f0 = n - b0 - w0, f1 = n - b1 - w1; long long ans = 0; for (int i = 0; i <= f0; i++) { int c1 = b0 + i - b1; if (c1 >= && c1 <= f1) ans = (ans + C(f0, i) * C(f1, c1)) % 998244353; } bool flag = 0; int set = 0, bw = 0, wb = 0; for (int i = 1; i <= n; i++) { if ((d[i][0] == 'B' && d[i][1] == 'B') || (d[i][0
566	#include <bits/stdc++.h> #pragma GCC optimize("O3,unroll-loops") #pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt") using namespace std; const long long infll = (long long)1e18 + 228; const int inf = 1e9 + 228; const int mod = 998244353; const int MOD = 1e9 + 7; using mem = vector<pair<int, int>>; int solve(mem a, mem b, mem c) { sort((a).begin(), (a).end()); sort((b).begin(), (b).end()); sort((c).begin(), (c).end()); int n = a.size(); int L = 0, R = a.size() + 1; while (R - L > 1) { bool ok = 0; int M = (L + R) / 2; int p1 = M - 1; int p2 = inf; for (int i = 0; i < n; ++i) { if (b[i].first > a[p1].first) { p2 = i; break; } } if (n - p2 >= M) { int p3 = inf; p2 += M - 1; for (int i = 0; i < n; ++i) { if (c[i].first > a[p1].first && c[i].first > b[p2].first) { p3 = i; break; } } ok |= (n - p3 >= M); } vector<int> yb, yc; for (int i = 0; i < n; ++i) { if (b[i].first > a[p1].first) { yb.emplace_back(b[i].second); } if (c[i].first > a[p2].first) { yc.emplace_back(c[i].second); } } if (yb.size() >= M) { nth_element(yb.begin(), yb.begin() + M, yb.end()); int ct = 0; for (auto x : yc) { if (x > yb[M - 1]) { ++ct; } } ok |= (ct >= M); } if (ok
567	#include <bits/stdc++.h> using namespace std; const int max_n = 100000; struct nd { int x, y, c; } a[max_n]; int x[max_n], y[max_n], c[max_n], tmp[max_n], n, ans = 0; priority_queue<int> q1; priority_queue<int, vector<int>, greater<int> > q2; void lsh(int *x) { for (int i = 0; i < n; i++) tmp[i] = x[i]; sort(tmp, tmp + n); int nn = unique(tmp, tmp + n) - tmp; for (int i = 0; i < n; i++) { x[i] = lower_bound(tmp, tmp + nn, x[i]) - tmp; } } int solve(int *p, int ca) { while (!q1.empty()) q1.pop(); while (!q2.empty()) q2.pop(); for (int i = 0, j = 0; i < n; i = j) { while (j < n && a[j].x == a[i].x) { if (a[j].c == p[0]) { ca--; while (q1.size() > ca) q1.pop(); while (q2.size() > ca) q2.pop(); } else if (a[j].c == p[1]) { q1.push(a[j].y); while (q1.size() > ca) q1.pop(); } else { q2.push(a[j].y); while (q2.size() > ca) q2.pop(); } j++; } if (ca && q1.size() == ca && q2.size() == ca && q1.top() <= q2.top()) return ca; } return 0; } inline void chmax(int &a, int b) { if (a < b) a = b; } void bigsolve(int *x, int *y, int ty = 1) { int p[3] = {0, 1, 2}, cc[3] = {0, 0, 0}; for (int i = 0; i < n; i++) a[i].x = x
568	#include <bits/stdc++.h> using namespace std; const int MAXN = (int)1e5 + 5; struct Point { int x, y, c, idx; Point() { x = y = c = idx = 0; } void rotate() { swap(x, y); x = -x; } } P[MAXN], Q[MAXN]; bool operator<(Point a, Point b) { return make_pair(a.x, a.y) < make_pair(b.x, b.y); } bool byY(Point a, Point b) { return make_pair(a.y, a.x) < make_pair(b.y, b.x); } int perm[3]; int n; bool check(int k) { iota(perm, perm + 3, 1); do { int p = 0, cnt = 0; while (p < n && (cnt < k || P[p].x == P[p + 1].x)) { p++; cnt += (P[p].c == perm[0]); } int q = p; cnt = 0; while (q < n && (cnt < k || P[q].x == P[q + 1].x)) { q++; cnt += (P[q].c == perm[1]); } cnt = 0; for (int i = q + 1; i <= n; i++) { cnt += (P[i].c == perm[2]); } if (cnt >= k) { return 1; } vector<Point> T; for (int i = 1; i <= n; i++) { if (Q[i].idx > p) { T.push_back(Q[i]); } } q = 0; cnt = 0; while (q + < (int)(T).size() && (cnt < k || T[q].y == T[q + 1].y)) { q++; cnt += (T[q].c == perm[1]); } cnt = 0; for (int i = q + 1; i < (int)(T).size(); i++) { cnt += (T[i].c == perm[2]); } if (cnt >= k) { return 1; } } while (next_permutation(perm, perm + 3)); return 0; } int main() { ios::
569	#include <bits/stdc++.h> using namespace std; using cd = complex<double>; mt19937 rnd(chrono::system_clock::now().time_since_epoch().count()); const long long N = 2e18; struct ppp { long long x, y; }; long long c[4], n; vector<ppp> h[5], s[5]; long long get(long long lx, long long rx, long long ly, long long ry, long long k) { long long l = N, r = -N, num = 0; for (auto i : h[c[2]]) { if (i.x >= lx && i.x <= rx && i.y >= ly && i.y <= ry) { num++; if (num == k) { l = i.x; break; } } } num = 0; for (auto i : h[c[3]]) { if (i.x > l && i.x <= rx && i.y >= ly && i.y <= ry) { num++; if (num == k) { r = i.x; break; } } } if (r > l) return 1; l = N, r = -N, num = 0; for (auto i : s[c[2]]) { if (i.x >= lx && i.x <= rx && i.y >= ly && i.y <= ry) { num++; if (num == k) { l = i.y; break; } } } num = 0; for (auto i : s[c[3]]) { if (i.x >= lx && i.x <= rx && i.y > l && i.y <= ry) { num++; if (num == k) { r = i.x; break; } } } if (r > l) return 1; return 0; } long long check(long long x) { c[1] = 1; c[2] = 2; c[3] = 3; do { long long l = h[c[1]][x - 1].x; if (get(l + 1, N, -N, N, x)) return 1; long long r = h[c[1]][n / - x].x; if (get(-N, r - 1
570	#include <bits/stdc++.h> using namespace std; template <typename T> void show(vector<T> x) { for (auto e : x) { cout << e << " "; } cout << endl; } template <typename T1> void showPair(vector<pair<T1, T1>> x) { for (auto e : x) { cout << e.first << " " << e.second << endl; } } template <typename T2> void showSet(set<T2> x) { for (auto e : x) { cout << e << " "; } cout << endl; } template <typename T3> void showMultiSet(multiset<T3> x) { for (auto e : x) { cout << e << " "; } cout << endl; } template <typename T4> void showSetPair(set<T4> x) { for (auto e : x) { cout << "{" << e.first << " " << e.second << "}, "; } cout << endl; } template <typename T5> void showSinglePair(pair<T5, T5> P) { cout << P.first << " " << P.second << "\n"; } vector<long long> dx = {1, -1}; bool isValid(long long i, long long n) { return (i >= && i < n); } long long seal(long long a, long long b) { if (a < && b < 0) { return (a + b - 1) / b; } if (a < || b < 0) { return (a / b); } return (a + b - 1) / b; } const long long mod = 998244353; void dfs(long long u, vector<vector<long long>>& gr, vector<bool>& vis, vector<long long>& d) { for (auto v : gr[u]) { if (!vis[v]) { d.push_back(v); vis[v] = 1; dfs(v, gr, vis, d); } } } void solve() { long long x[2], p[2]; cin >> x[0] >> p[0]; cin >> x[1] >> p[
571	#include <bits/stdc++.h> using namespace std; int main() { std::ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) { string s1, s2; long long n1, n2, num1 = 0, num2 = 0; cin >> s1; cin >> n1; cin >> s2; cin >> n2; if (s1.size() < s2.size()) for (int i = 0;; i < n1) { s1 += '0'; n1--; if (s1.size() == s2.size()) break; } else if (s1.size() > s2.size()) for (int i = 0;; i < n2) { s2 += '0'; n2--; if (s1.size() == s2.size()) break; } if (n1 > n2) cout << '>' << endl; else if (n1 < n2) cout << '<' << endl; else { for (int i = 0; i < s1.size(); i++) { num1 *= 10; num1 += s1[0] - 48; num2 *= 10; num2 += s2[0] - 48; if (num1 > num2) { cout << '>' << endl; break; } else if (num1 < num2) { cout << '<' << endl; break; } else if (i == s1.size() - 1) cout << '=' << endl; } } } return 0; }
572	#include <bits/stdc++.h> using namespace std; const int N = 10; int main() { int T; int x1, p1, x2, p2; cin >> T; string res; while (T--) { cin >> x1 >> p1 >> x2 >> p2; if (p2 - p1 >= 6) { res += '<'; continue; } if (p1 - p2 >= 6) { res += '>'; continue; } char s1[N] = "\0", s2[N] = "\0"; int t1 = x1, t2 = x2; int cnt1 = 0, cnt2 = 0; while (t1) { cnt1++; t1 /= 10; } while (t2) { cnt2++; t2 /= 10; } int idx1 = 0, idx2 = 0; for (int i = cnt1 - 1; i >= 0; i--) { int tt = (x1 / pow(10, i)); tt %= 10; s1[idx1++] = tt + '0'; } for (int i = cnt2 - 1; i >= 0; i--) { int tt = x2 / pow(10, i); tt %= 10; s2[idx2++] = tt + '0'; } if (idx1 + p1 < idx2 + p2) { res += '<'; continue; } if (idx1 + p1 > idx2 + p2) { res += '>'; continue; } if (cnt1 < cnt2) { cnt1 = cnt2; for (int i = idx1; i < idx2; i++) s1[i] = '0'; } if (cnt1 > cnt2) for (int i = idx2; i < idx1; i++) s2[i] = '0'; for (int i = 0; i < cnt1; i++) { if (s1[i] < s2[i]) { res += '<'; break; } if (s1[i] > s2[i]) { res += '>'; break; } if (i == cnt1 - 1) res += '='; } } for (int i = 0; i < res.size(); i++) cout << res[i] << endl; return 0; }
573	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { int x1, p1; cin >> x1 >> p1; int x2, p2; cin >> x2 >> p2; double temp1 = log10(x1 / x2) + p1 - p2; if (temp1 < 0) { cout << '<' << '\n'; } else if (temp1 > 0) { cout << '>' << '\n'; } else { cout << '=' << '\n'; } } }
574	#include <bits/stdc++.h> using namespace std; void solution() { long long int n, m, a, b, c, d, p, q, cnt = 0, ct = 0, sum = 0, ans = 0; cin >> n >> a; cin >> m >> b; p = n; q = m; string s1, s2; s1 = to_string(p); s2 = to_string(q); long long int sz1, sz2; sz1 = s1.size(); sz2 = s2.size(); long long int second = sz1, sss = sz2; sz1 += a; sz2 += b; if (sz1 > sz2) cout << "> " << endl; else if (sz1 < sz2) cout << "<" << endl; else { if (second > sss) { for (long long int i = 0; i < second - sss; i++) s1 += '0'; } else { for (long long int i = 0; i < sss - second; i++) s2 += '0'; } for (long long int i = 0; i < s1.size(); i++) { if (s1[i] > s2[i]) { cout << ">" << endl; return; } else if (s2[i] > s1[i]) { cout << "<" << endl; return; } } cout << "=" << endl; } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) solution(); return 0; }
575	#include <bits/stdc++.h> using namespace std; int dx[] = {+1, -1, +0, +0}; int dy[] = {+0, +0, +1, -1}; int main() { int test; cin >> test; while (test--) { long long int n, m, a, b, cnt = 0; string s1, s2, res; cin >> s1 >> n >> s2 >> m; if (s1.size() + n > s2.size() + m) cout << ">"; else if (s1.size() + n < s2.size() + m) cout << "<"; else { int ok = 0; a = min(s1.size(), s2.size()); for (int i = 0; i < a; i++) { if (s1[i] > s2[i]) { cout << ">"; ok = 1; break; } else if (s1[i] < s2[i]) { cout << "<"; ok = 1; break; } } if (ok == 0) { int x = min(s1.size(), s2.size()); if (s1.size() < s2.size()) { for (int i = x; i < s2.size(); i++) { if (s2[i]!= '0') { cout << "<"; ok = 1; break; } } } if (s1.size() > s2.size()) { for (int i = x; i < s1.size(); i++) { if (s1[i]!= '0') { cout << ">"; ok = 1; break; } } } if (ok == 0) cout << "="; } } cout << endl; } return 0; }
576	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; int a[n], minn = 99999; for (int i = 0; i < n; i++) { cin >> a[i]; if (minn > a[i]) { minn = a[i]; } } int req = n / 2, i = 0; while (i < n && req > 0) { if (a[i]!= minn) { cout << a[i] << " " << minn << endl; req--; } i++; } } return 0; }
577	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; for (int j = 0; j < t; j++) { int n, mn, c = 0; cin >> n; int arr[n]; for (int i = 0; i < n; i++) { cin >> arr[i]; if (i == 0) { mn = arr[i]; } else { mn = min(mn, arr[i]); } } pair<int, int> p; p.second = mn; for (int i = 1; i < n; i++) { p.first = arr[i]; if (p.first == p.second) { continue; } else if (c!= n / 2) { c++; cout << p.first << " " << p.second << endl; } } } return 0; }
578	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; cin >> t; while (t--) { long long n; cin >> n; vector<long long> v; int op = n; while (op--) { long long num; cin >> num; v.push_back(num); } sort(v.begin(), v.end()); for (int i = 1; i <= n / 2; i++) { cout << v[0] << " " << v[i] << endl; } } return 0; }
579	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; long long arr[n]; for (int i = 0; i < n; i++) { cin >> arr[i]; } sort(arr, arr + n); long long c = floor(n / 2); for (int i = 1; i <= c; i++) { cout << arr[0] << " " << arr[i] << endl; } } int main() { ios::sync_with_stdio(0); cin.tie(0); long long t; cin >> t; while (t--) { solve(); } }
580	#include <bits/stdc++.h> using namespace std; void solve() { long long int n; cin >> n; vector<long long int> a(n); for (long long int i = 0; i < n; i++) cin >> a[i]; sort(a.begin(), a.end()); for (long long int z = 0; z < n / 2; z++) { cout << a[z + 1] <<'' << a[z] << '\n'; } return; } signed main() { ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); long long int t; cin >> t; while (t--) { solve(); } return 0; }
581	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 9; int n, a[N]; bool tong[10 * N]; void work() { scanf("%d", &n); for (int i = 1; i <= n; i++) { scanf("%d", &a[i]); tong[a[i]] = 1; } sort(a + 1, a + + n); int m = unique(a + 1, a + + n) - a; int t = min(n / 2, m); for (int i = 2; i <= t + 1; i++) { printf("%d %d\n", a[1], a[i]); } for (int i = 2; i <= m && t < n / 2; i++) { for (int j = i + 1; j <= m && t < n / 2; j++) { if (tong[a[j] % a[i]]) continue; printf("%d %d\n", a[j], a[i]); t++; } } } int main() { int T; cin >> T; while (T--) work(); }
582	#include <bits/stdc++.h> using namespace std; const long long N = 2e5 + 10, INF = 1e18 + 10; long long a[N], n, h; void solve() { cin >> n; long long pos = 0, mn = INF; for (int i = 1; i <= n; i++) { cin >> a[i]; if (mn > a[i]) { mn = min(mn, a[i]); pos = i; } } int cnt = 0, j = 1; while (cnt < (n / 2)) { if (j!= pos) { cout << a[pos] << " " << a[j] << endl; cnt++; } j++; } } int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); int T = 1; cin >> T; while (T--) { solve(); } }
583	#include <bits/stdc++.h> using namespace std; using ll = long long; const int N = 1e6 + 1; ll t, n, m, k, a, b, c, f, ans; ll d[N], fa[N], x[N]; vector<ll> g[N]; string S; int main() { ios::sync_with_stdio(0), cin.tie(0); cin >> t; while (t--) { cin >> n; for (ll i = 1; i <= n; i++) cin >> x[i]; sort(x + 1, x + n + 1); for (ll i = 2; i <= n + >> 1; i++) cout << x[i] <<'' << x[1] << '\n'; } }
584	#include <bits/stdc++.h> using namespace std; template <class a, class b> ostream& operator<<(ostream& os, const pair<a, b>& p) { os << "(" << p.first << "," << p.second << ")"; return os; } template <class T> ostream& operator<<(ostream& os, const vector<T>& v) { os << "["; if (!v.size()) os << "]"; else for (int i = 0; i < v.size(); ++i) os << v[i] << ",]"[i == v.size() - 1]; return os; } template <class T> ostream& operator<<(ostream& os, const set<T>& s) { os << "{"; if (!s.size()) os << "}"; else for (auto x : s) os << x << ",}"[x == *s.rbegin()]; return os; } void printr(ostream& os) { os << '\n'; } template <class T, class... Args> void printr(ostream& os, const T& t, const Args&... args) { os << t; if (sizeof...(args)) os << " "; printr(os, args...); } template <class T> void read(T& x) { cin >> x; } template <class T, class... Args> void read(T& t, Args&... args) { read(t), read(args...); } template <class T> void readarray(T* A, int n) { for (__typeof(0) i = (0), _end = (n), _step = - * ((0) > (n)); i!= _end; i += _step) read(A[i]); } void dbgr(ostream& os) { os << endl; } template <class T, class... Args> void dbgr(ostream& os, const T& t, const Args&... args) { os << t; if (sizeof...(args)) os << ", "; dbgr(os, args...); } template <class T> T min(const vector<T>& v) { return *min_element(v.begin(), v.end()); } template <class T> T max(const vector<
585	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t, n, i, x, y, m, p, q, sum, ans, cnt, mx, mn, j, k; cin >> t; while (t--) { sum = 0; cnt = 0; ans = 0; mx = INT_MIN; mn = 1e18; cin >> n; vector<long long int> a(n); for (i = 0; i < n; i++) cin >> a[i]; sort(a.begin(), a.end()); i = 0; j = n - 1; while (i <= n / 2) { cout << a[i] << " " << a[j] << "\n"; i++; j--; } } }
586	#include <bits/stdc++.h> using namespace std; int main() { long long tt; cin >> tt; while (tt--) { long long n, temp; cin >> n; vector<int> v; for (int i = 0; i < n; ++i) { cin >> temp; v.push_back(temp); } sort(v.begin(), v.end()); n /= 2; int j = 1; while (n--) { cout << v[0] << " " << v[j] << "\n"; j += 1; } } }
587	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> v; for (int i = 0; i < n; i++) { int k; cin >> k; v.push_back(k); } sort(v.begin(), v.end()); int temp = n / 2; int i = 0, j = 1; while (j <= temp) { cout << v[i] << " " << v[j] << endl; j++; } } }
588	#include <bits/stdc++.h> using namespace std; long long const INF = 1e16; long long power(long long a, long long b) { long long result = 1; while (b) { if (b % 2) result = (result * a) % 1000000007; a = (a * a) % 1000000007; b /= 2; } return result; } void solve() { int n; cin >> n; vector<int> a(n); for (long long i = 0; i < n; i++) cin >> a[i]; sort((a).begin(), (a).end()); int r = n / 2; for (int i = 1; i <= r; i++) { cout << a[i] << " " << a[r] << "\n"; } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int T = 1; cin >> T; for (int t = 1; t <= T; t++) { solve(); } return 0; }
589	#include <bits/stdc++.h> using namespace std; template <typename T> void printvec(vector<T>& vec) { for (int i = 0; i < vec.size(); i++) cout << vec[i] << " "; cout << '\n'; } int main() { std::ios::sync_with_stdio(false); int i = 0, j = 0; int ttt = 0; cin >> ttt; while (ttt--) { int n; cin >> n; vector<int> a(n); for (int i = 0; i < a.size(); i++) { cin >> a[i]; }; sort(a.begin(), a.end()); int m = n / 2; for (i = 1; i <= m; i++) { cout << a[0] << " " << a[i] << '\n'; } } return 0; }
590	#include <bits/stdc++.h> using namespace std; const long long N = 2000010; long long n, h, T, x; long long q[110]; bool check(long long x) { long long cnt = 0; for (long long i = 1; i < n; i++) { long long a = q[i], b = q[i + 1]; a = min(a + x, b); cnt += a - q[i]; } cnt += x; return cnt >= h; } void solve() { cin >> n >> h; for (long long i = 1; i <= n; i++) cin >> q[i]; long long l = 1, r = 0x3f3f3f3f; while (l < r) { long long mid = l + r >> 1; if (check(mid)) r = mid; else l = mid + 1; } cout << l << endl; } signed main() { cin >> T; while (T--) solve(); return 0; }
591	#include <bits/stdc++.h> using namespace std; long long T = 1, n, k, mx, mn, i, j, x, sum, MOD = 1e9 + 7; long long up(long long x, long long y) { if (x % y == 0) return x / y; return x / y + 1; } long long fastestPower(long long x, long long y) { if (y == 0) return 1; if (y & 1) return x * fastestPower(x, y - 1); long long z = fastestPower(x, y / 2); return z * z; } long long a[200]; long long health; bool check(long long k) { long long me = health; for (i = 0; i < n; i++) { if (i == n - 1) me -= k; else { long long temp = a[i] + k - 1; if (temp < a[i + 1]) me -= k; else { me -= a[i + 1] - a[i]; } } } return (me <= 0); } long long bs() { long long b = 0, e = 1e18, ans = -1; while (b < e) { long long mid = (b + e) / 2; if (check(mid)) { ans = mid; e = mid - 1; } else b = mid + 1; } if (check(ans - 1)) --ans; return ans; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> T; while (T--) { cin >> n >> health; for (i = 0; i < n; i++) cin >> a[i]; a[n] = + +1e9; cout << bs() << "\n"; } return 0; }
592	#include <bits/stdc++.h> using namespace std; void debug() { cout << endl; } template <typename T, typename... Args> void debug(T a, Args... args) { cout << a << " "; debug(args...); } const int N = 2e5 + 15; const long long mod = 1e9 + 7; const double E = 1e-7; long long A[N]; int dg(long long a) { int ans = 0; while (a) { a /= 10; ans++; } return ans; } int n, h; bool f(long long mid) { long long ans = 0; for (int i = 1; i < n; i++) { long long dis = abs(A[i] - A[i - 1]); long long end = A[i - 1] + mid; dis = min(dis, end - A[i - 1]); ans += dis; } ans += mid; return ans >= h; } void solve() { cin >> n >> h; for (int i = 0; i < n; i++) cin >> A[i]; long long a = -1, b = 2e18, mid; while (b - a > 1) { mid = (a + b) >> 1; if (f(mid)) b = mid; else a = mid; } cout << b << '\n'; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t = 1; cin >> t; for (int i = 1; i <= t; i++) { solve(); } return 0; }
593	#include <bits/stdc++.h> using namespace std; using ll = long long; using pii = pair<int, int>; using pll = pair<ll, ll>; mt19937 rng((int)chrono::steady_clock::now().time_since_epoch().count()); const int MOD = 998244353; const int MAXN = 5e5 + 5; const ll INF = 2e18; void add(ll &a, ll b) { a += b; a %= MOD; if (a < 0) a += MOD; } ll dp[MAXN][2]; int main() { ios::sync_with_stdio(false); cin.tie(0); int t; cin >> t; while (t--) { int n; cin >> n; for (int i = 0; i <= n; i++) dp[i][0] = dp[i][1] = 0; vector<int> v(n); for (int &x : v) cin >> x; ll ans = 0; for (int i = 0; i < n; i++) { if (v[i] == 0) { add(ans, dp[1][0] + 1); add(ans, dp[1][1]); add(dp[1][0], dp[1][0] + 1); add(dp[1][1], dp[1][1]); } else if (v[i] == 1) { add(ans, dp[0][1] + 1); add(ans, dp[1][0]); add(ans, dp[2][1]); add(ans, dp[2][0]); add(dp[2][0], dp[2][0]); add(dp[2][1], dp[2][1]); add(dp[0][1], dp[0][1] + 1); add(dp[2][0], dp[1][0]); } else { add(ans, dp[v[i] - 1][1]); add(ans, dp[v[i]][0]); add(ans, dp[v[i] - 1][0]); add(ans, dp[v[i] + 1][1]); add(ans, dp[v[i] + 1][0]); add(dp[v[
594	#include <bits/stdc++.h> using namespace std; const int inf = 0x7f7f7f7f; const long long linf = 1e18; const int maxn = 5e5 + 9; const int maxm = 1e5 + 9; const double PI = 3.1415926; const double eps = 1e-5; const int base = 131; const int N = 1e6; const long long mod = 998244353; namespace IO { long long read() { long long a = 1, b = 0; char c = getchar(); while (c > '9' || c < '0') { if (c == '-') a = -1; c = getchar(); } while (c >= '0' && c <= '9') { b = (b << 3) + (b << 1) + c - '0'; c = getchar(); } return a * b; } void print(long long x) { if (x < 0) putchar('-'), x = -x; if (x > 9) print(x / 10); putchar(x % + '0'); } } // namespace IO using namespace IO; int n; long long dp[maxn][2]; int main() { int cse = read(); while (cse--) { dp[0][0] = 1; n = read(); for (int i = 1; i <= n; ++i) { int x = read() + 1; dp[x][0] += dp[x - 1][0] + dp[x][0]; dp[x][1] += dp[x][1]; if (x > 1) dp[x][1] += dp[x - 2][0]; dp[x + 2][1] += dp[x + 2][1]; dp[x][0] %= mod; dp[x][1] %= mod; dp[x + 2][1] %= mod; } long long ans = 0; for (int i = 1; i <= n + 1; ++i) { ans = (ans + dp[i][0] + dp[i][1]) % mod; } print(ans); putchar('\n'); for (int i = 0; i <= n + 1; ++i) dp[i][0] = dp[
595	#include <bits/stdc++.h> using namespace std; const int INF = 0x3f3f3f3f; const int maxn = 1e6 + 10; int sta_x = 0, sta_y = 0; int n, m; struct note { int x; int y; } sta; vector<char> mm[maxn]; int pmove[5][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; void bfs() { sta.x = sta_x, sta.y = sta_y; queue<note> alls; alls.push(sta); while (!alls.empty()) { note temp; temp = alls.front(); alls.pop(); for (int i = 0; i < 4; i++) { int dx = temp.x + pmove[i][0]; int dy = temp.y + pmove[i][1]; int cnt = 0; if (dx >= && dx < n && dy >= && dy < m && mm[dx][dy] == '.') { for (int j = 0; j < 4; j++) { int ddx = dx + pmove[j][0]; int ddy = dy + pmove[j][1]; if (ddx >= && ddx < n && ddy >= && ddy < m && mm[ddx][ddy]!= '#') cnt++; } if (cnt <= 2) { mm[dx][dy] = '+'; note res; res.x = dx, res.y = dy; alls.push(res); } } } } } int main() { int T; scanf("%d", &T); while (T--) { scanf("%d %d", &n, &m); for (int i = 0; i < n; i++) { char str[maxn]; scanf("%s", str); for (int j = 0; j < m; j++) { if (str[j] == 'L') sta_x = i, sta_y = j; mm[i].push_back(str[j]); } } bfs(); for (int i = 0; i < n; i++) { for (int j = 0; j < m;
596	#include <bits/stdc++.h> using namespace std; const long long MOD = 998244353; int main() { ios_base::sync_with_stdio(false); cin.tie(0), cout.tie(0); int t; cin >> t; while (t--) { int n, m; cin >> n >> m; vector<vector<char>> a(n, vector<char>(m)); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { cin >> a[i][j]; } } queue<pair<int, int>> q; vector<vector<int>> bad_deg(n, vector<int>(m)); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { if (a[i][j] == '#' || a[i][j] == 'L') { continue; } int good_deg = 0; if (j < m - 1) { if (a[i][j + 1] == '.') { bad_deg[i][j]++; } if (a[i][j + 1] == 'L') { good_deg++; } } if (j > 0) { if (a[i][j - 1] == '.') { bad_deg[i][j]++; } if (a[i][j - 1] == 'L') { good_deg++; } } if (i < n - 1) { if (a[i + 1][j] == '.') { bad_deg[i][j]++; } if (a[i + 1][j] == 'L') { good_deg++; } } if (i > 0) { if (a[i - 1][j] == '.') { bad_deg[i][j]++; } if (a[i - 1][j] == 'L') { good_deg++; } } if (bad_deg[i][j] == && good_deg == 1) { q.push({i, j}); } } } vector<vector<bool>> used(n, vector<bool>(m)); while (!q.empty()) { int i = q.front().
597	#include <bits/stdc++.h> using namespace std; const int maxn = 1e6 + 10; int n, m, lx, ly, val[maxn]; int dx[4] = {0, 0, 1, -1}, dy[4] = {1, -1, 0, 0}; vector<string> a; bool inside(int x, int y) { return x >= && x < n && y >= && y < m; } void dfs(int u) { int i = u / m, j = u % m, w = 0, can = 0; for (int d = 0; d < (int)(4); ++d) { int x = i + dx[d], y = j + dy[d]; if (!inside(x, y) || a[x][y] == '#') continue; int v = x * m + y; w++; can += val[v]; } val[u] = (can && w - can <= 1) || (i == lx && j == ly); if (!val[u]) return; for (int d = 0; d < (int)(4); ++d) { int x = i + dx[d], y = j + dy[d]; if (!inside(x, y) || a[x][y] == '#') continue; int v = x * m + y; if (!val[v]) dfs(v); } } int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); int tt; cin >> tt; while (tt--) { cin >> n >> m; a.resize(n); for (int i = 0; i < (int)(n); ++i) { cin >> a[i]; for (int j = 0; j < (int)(m); ++j) { if (a[i][j] == 'L') lx = i, ly = j; val[i * n + j] = 0; } } dfs(lx * m + ly); for (int i = 0; i < (int)(n); ++i) { for (int j = 0; j < (int)(m); ++j) { if (a[i][j] == 'L' ||!val[i *
598	#include <bits/stdc++.h> using namespace std; int n, m; const int max_n = 1e6 + 1; string G[max_n]; int sx, sy; pair<int, int> mov[4] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; int possible_route(int x, int y) { int cnt = 0; for (int i = 0; i < 4; i++) { int xn = x + mov[i].first, yn = y + mov[i].second; if (0 <= xn && xn < n && <= yn && yn < m && G[xn][yn]!= '#') cnt++; } return cnt; } void dfs(int x, int y) { for (int i = 0; i < 4; i++) { int xn = x + mov[i].first, yn = y + mov[i].second; if (xn < || xn >= n || yn < || yn >= m) continue; if (G[xn][yn] == '.' && possible_route(xn, yn) <= 2) { G[xn][yn] = '+'; dfs(xn, yn); } } } void solve() { cin >> n >> m; for (int i = 0; i < n; i++) { cin >> G[i]; int j = G[i].find('L'); if (j!= -1) sx = i, sy = j; } dfs(sx, sy); for (int i = 0; i < n; i++) cout << G[i] << "\n"; } int main() { ios_base::sync_with_stdio(false); cin.tie(0), cout.tie(0); int t; cin >> t; while (t--) solve(); }
599	#include <bits/stdc++.h> using namespace std; const int M = 998244353, G = 3, N = << 20; int Pw(int x, int y = M - 2) { return y? ((y & 1)? (long long)Pw((long long)x * x % M, y / 2) * x % M : Pw((long long)x * x % M, y / 2) % M) : 1; } int rt[N], mg[N], fac[N], Lm = 1; int rev[N], a[N], iv; void dft(int n) { for (int i = (0); i <= (n - 1); ++i) rev[i] = (rev[i >> 1] >> 1) | ((i & 1) * (n >> 1)), ((i < rev[i]) && (a[i] ^= a[rev[i]] ^= a[i] ^= a[rev[i]])); for (int i = 2; i <= n; i <<= 1) for (int j = 0, l = (i >> 1); j < n; j += i) for (int k = 0, pa, pb, *w = rt + l; k < l; k++, w++) pa = a[j + k], pb = (long long)a[j + k + l] * *w % M, a[j + k] = (pa + pb) % M, a[j + k + l] = (pa + M - pb) % M; for (int i = (0); i <= (n - 1); ++i) a[i] = (long long)a[i] * iv % M; } int n, deg[N], cnt[N], ns, x, y, all; int main() { cin >> n, fac[0] = deg[1] = 1; for (int i = (1); i <= (n); ++i) fac[i] = (long long)fac[i - 1] * i % M; for (int i = (1); i <= (n - 1); ++i) cin >> x >> y, deg[x] += 1, deg[y] += 1; for (int i = (1);
600	#include <bits/stdc++.h> using namespace std; void solve() { int n; long long s = 0; cin >> n; for (int i = 0; i < n; i++) { int a; cin >> a; s += a; } if (s % n == 0) cout << "1\n"; else cout << "0\n"; } int main() { int t = 1; cin >> t; while (t--) solve(); return 0; }
601	#include <bits/stdc++.h> using namespace std; int t; void solve() { int n; cin >> n; long long A[n + 1]; long long ans = 0; for (int i = 1; i <= n; i++) { cin >> A[i]; ans += A[i]; } if (ans % == 0) cout << 1; else cout << 1; } int main() { ios_base::sync_with_stdio(NULL); cin.tie(nullptr); cout.tie(nullptr); cin >> t; while (t--) { solve(); cout << "\n"; } }
602	#include <bits/stdc++.h> using lli = long long int; using li = long int; using namespace std; const lli MOD{998244353}; const lli INF{(false? (INT_MAX - 1) / : (lli)1e18 + 5)}; const lli N{200005}; int main() { cout << setprecision(15); cin.tie(nullptr)->sync_with_stdio(false); li T{1}; cin >> T; while (T--) { lli n{}; cin >> n; vector<lli> arr(n); lli sum{}; for (auto &i : arr) cin >> i, sum += i; if (sum & 1) cout << << '\n'; else cout << << '\n'; } return 0; }
603	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; int k, s = 0; for (int i = 0; i < n; i++) { cin >> k; s += k; } if (s % n == 0) cout << << endl; else cout << << endl; } }
604	#include <bits/stdc++.h> using namespace std; template <class T, class V> T power(T t, V v) { T second = 1; while (v--) second *= t; return second; } void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << " "; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { int n = v.size(); cerr << "[ "; for (T i : v) { _print(i); n--; cerr << (n? ", " : " "); } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { int n = v.size(); cerr << "{ "; for (auto p : v) { cerr << "["; _print(p.first); cerr << "]="; _print(p.second); n--; cerr << (n? ", " : " "); } cerr << "}"; }
605	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t, cnt = 1; cin >> t; while (t--) { long long n; cin >> n; string a, b; cin >> a >> b; long long ans1 = (1LL << 62), ans2 = (1LL << 62), changehobena = 0, changehobe = 0, changehobena1 = 0, changehobe1 = 0; for (int i = 0; i < n; i++) { if (a[i] == b[i]) { changehobena++; if (a[i] == '1') changehobena1++; } else { changehobe++; if (a[i] == '1') changehobe1++; } } if ((changehobena & 1) && ((changehobena + 1) / 2) <= changehobena1) ans1 = changehobena; if ((changehobe & ^ 1) && ((changehobe + 1) / 2) <= changehobe1) ans2 = changehobe; long long ans = min(ans1, ans2); if (ans == (1LL << 62)) cout << -1 << '\n'; else cout << ans << '\n'; } return 0; }
606	#include <bits/stdc++.h> using namespace std; long long solve(long long n, string str1, string str2) { long long t1 = 0, t2 = 0; for (long long i = 0; i < n; i++) { if (str1[i]!= str2[i]) { if (str1[i] == '1') t1++; else t2++; } } if (t1!= t2) return -1; else return * t1; } int main() { long long t; cin >> t; while (t--) { long long n; string str1, str2; cin >> n; cin >> str1 >> str2; long long a1 = solve(n, str1, str2); long long ind = -1; for (long long i = 0; i < n; i++) { if (str1[i] == '1' && str2[i] == '1') { ind = i; break; } } long long a2 = -1; string temp = str1; if (ind!= -1) { for (long long i = 0; i < n; i++) { if (str1[i] == '1' && i!= ind) str1[i] = '0'; else if (str1[i] == '0') str1[i] = '1'; } a2 = solve(n, str1, str2); } long long a3 = -1; str1 = temp; long long ind2 = -1; for (long long i = 0; i < n; i++) { if (str1[i] == '1' && str2[i] == '0') { ind2 = i; break; } } if (ind2!= -1) { for (long long i = 0; i < n; i++) { if (str1[i] == '1' && i!= ind) str1[i] = '0'; else if (str1[i] == '0') str1[i] = '1'; } a3 = solve(n, str1, str2); } if (a1 == -1 && a2 == -1 && a3 == -1) { cout << "-1" << endl; } else { if
607	#include <bits/stdc++.h> using namespace std; using ll = long long; using vll = vector<ll>; const ll S = 2e5 + 10; vector<ll> g[S]; vector<ll> c; ll dfs(ll u, ll p) { ll ret = u; for (ll it : g[u]) { if (it!= p) { ll x = dfs(it, u); if (c[x] > c[ret]) ret = x; } } c[ret]++; return ret; } ll f(ll x) { return x / * (x - x / 2); } signed main() { ios::sync_with_stdio(false); cin.tie(0); ll n, k; cin >> n >> k; c.assign(n, 0); for (ll i = 0; i < n - 1; i++) { ll u, v; cin >> u >> v; u--; v--; g[u].push_back(v); g[v].push_back(u); } dfs(0, 0); sort(c.begin(), c.end(), greater<ll>()); c.erase(lower_bound(c.begin(), c.end(), 0, greater<ll>()), c.end()); ll ans = 0; ll cs = c.size(); if (k >= cs) { if (cs > n - cs) ans = cs * (n - cs); else if (k >= n - k) ans = k * (n - k); else ans = f(n); } else { ll w = 0; for (ll i = 0; i < k; i++) { w += c[i] - 1; } ll b = n - w - k; if (b > k) { b -= k; if (w >= b) ans = -w * b; else ans = -f(w + b); } else { ans = (k - b) * w; } } cout << ans << '\n'; return 0; }
608	#include <bits/stdc++.h> using namespace std; const int nax = * (int)1e5 + 10; const int INF = (int)1e9 + 47; vector<int> g[nax]; int n, k; int lvl[nax], tin[nax], tout[nax]; int cnt = 0; int timer = 0; int ver[nax]; int seen[nax]; int par[nax]; int vr[nax]; vector<pair<int, int>> vec; void dfs(int v, int p = -1) { if (p!= -1) lvl[v] = lvl[p] + 1; vec.push_back({lvl[v], v}); par[v] = p; if (g[v].size() == && p!= -1) cnt++; if (p!= -1) lvl[v] = lvl[p] + 1; for (auto to : g[v]) { if (to == p) continue; dfs(to, v); } } long long f(int red, int blue) { int w = n - red - blue; return w * 1ll * (red - blue); } int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> n >> k; for (int i = 0; i < n - 1; i++) { int a, b; cin >> a >> b; --a, --b; g[a].push_back(b); g[b].push_back(a); } dfs(0); sort(vec.begin(), vec.end(), greater<pair<int, int>>()); vector<int> vv; for (int i = 0; i < n; i++) { int cur = vec[i].second; int cc = 0; while (cur!= -1 &&!seen[cur]) { cc++; seen[cur] = 1; cur = par[cur]; } vv.push_back(cc); } sort(vv.begin(), vv.end(), greater<int>()); int blue = n; long long best_ans = -(int)1e18; for (int i = 0; i < min(k, cnt); i++) { blue -= vv[
609	#include <bits/stdc++.h> using namespace std; constexpr long long INF = 1e14; int n, k; vector<int> L[200005]; int uz[200005]; int tata[200005]; vector<pair<int, int>> frunze; void DFS(int x, int d = 0) { uz[x] = 1; for (int i : L[x]) if (!uz[i]) { tata[i] = x; DFS(i, d + 1); } if (L[x].size() == && x!= 1) frunze.push_back({d, x}); } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i < n; i++) { int x, y; cin >> x >> y; L[x].push_back(y); L[y].push_back(x); } DFS(1); if (k >= frunze.size()) { long long maxim = 0; for (int i = frunze.size(); i <= n; i++) maxim = max(maxim, 1ll * (n - i) * i); cout << maxim << '\n'; } else { sort(frunze.begin(), frunze.end(), greater<pair<int, int>>()); vector<int> moves; for (auto fr : frunze) { int scor = 0; int aux = fr.second; while (aux && uz[aux]) { uz[aux] = 0; scor++; aux = tata[aux]; } moves.push_back(scor); } sort(moves.begin(), moves.end(), greater<int>()); int nr = 0; for (int i = 0; i < k; i++) nr += moves[i]; long long minim = INF; for (int i = 0; i <= n - nr; i++) minim = min(minim, 1ll * (n - k - i) * (k - i)); cout << minim << '\n'; } return 0; }
610	#include <bits/stdc++.h> using namespace std; const long long P = 1e9 + 7; const int N = 2005; const long long INF = (1ll << 62) - 1; const double pi = acos(-1); mt19937 rng(time(0)); int T, n; int f[N][N * 2], g[N][N * 2]; char s[N], t[N]; void revbit(char s[]) { for (int i = 2; i <= n; i += 2) if (s[i]!= '?') s[i] = '0' + '1' - s[i]; } void calc(int f[][N * 2], char s[], char t[]) { f[0][n + 1] = 1; for (int i = (1); i <= (n); ++i) for (int j = (n + - i); j <= (n + + i); ++j) { f[i][j] = ((s[i]!= '1' && t[i]!= '1')? f[i - 1][j] : 0) % P; (f[i][j] += (s[i]!= '0' && t[i]!= '0')? f[i - 1][j] : 0) %= P; (f[i][j] += (s[i]!= '0' && t[i]!= '1')? f[i - 1][j - 1] : 0) %= P; (f[i][j] += (s[i]!= '1' && t[i]!= '0')? f[i - 1][j + 1] : 0) %= P; } } int main() { ios::sync_with_stdio(false), cin.tie(0), cout.tie(0); cin >> T; while (T--) { cin >> n >> (s + 1) >> (t + 1); revbit(s), revbit(t); calc(f, s, t); reverse(s + 1, s + n + 1), reverse(t + 1, t + n + 1); calc(g, s, t); int ans = 0; for (int i = (1); i <= (n -
611	#include <bits/stdc++.h> using namespace std; const int inf = 1e9 + 7; const long long INF = 1e18; const int mod = 1e9 + 7; inline int add(int x, int y) { return x + y < mod? x + y : x + y - mod; } inline int sub(int x, int y) { return x < y? x + mod - y : x - y; } inline int mul(int x, int y) { return (int)((long long)x * y % mod); } inline int pw(int x, int y) { int r = 1; while (y > 0) { if (y % == 1) r = mul(r, x); x = mul(x, x); y /= 2; } return r; } inline int inv(int x) { return pw(x, mod - 2); } inline int divi(int x, int y) { return mul(x, inv(y)); } int dp[2010][4010]; int ct[2010][4010]; int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr); int tcc; cin >> tcc; while (tcc-- > 0) { int n; cin >> n; string s, t; cin >> s; cin >> t; vector<int> v1(n), v2(n); for (int i = 0; i < n; i++) { if (s[i] == '?') v1[i] = -1; else v1[i] = s[i] == '0'? : 1; } for (int i = 0; i < n; i++) { if (t[i] == '?') v2[i] = -1; else v2[i] = t[i] == '0'? : 1; } const int mid = 2005; dp[0][mid] = 0; ct[0][mid] = 1; for (int i = 0; i < n; i++) { int cr = i; int nx = i + 1; int a = v1[i], b = v2[i]; for (int j = -n; j <= n; j++) { for (int x =
612	#include <bits/stdc++.h> using namespace std; const int maxn = 4020; const int maxm = 4020; const int N = 2002; const int mod = 1e9 + 7; int n; char s[maxn], t[maxn]; int pre[maxn][maxn], suf[maxn][maxn]; int id(char x, int y) { return (x == y + '0' || x == '?'); } int main() { int T; scanf("%d", &T); while (T--) { scanf("%d", &n); scanf("%s", s + 1); scanf("%s", t + 1); for (int i = 0; i <= n + 1; i++) { for (int j = 0; j <= * N + 5; j++) { pre[i][j] = suf[i][j] = 0; } } pre[0][N] = 1; for (int i = 1; i <= n; i++) { for (int j = -n; j <= n; j++) { for (int x = 0; x < 2; x++) { for (int y = 0; y < 2; y++) { if (id(s[i], x ^ (i & 1)) && id(t[i], y ^ (i & 1))) { (pre[i][j + x - y + N] += pre[i - 1][j + N]) %= mod; } } } } } suf[n + 1][N] = 1; for (int i = n; i >= 1; i--) { for (int j = -n; j <= n; j++) { for (int x = 0; x < 2; x++) { for (int y = 0; y < 2; y++) { if (id(s[i], x ^ (i & 1)) && id(t[i], y ^ (i & 1))) { (suf[i][j + x - y + N] += suf[i + 1][j + N]) %= mod; } } } } } int ans = 0; for (int i = 1; i <= n; i++) { for (int j = -n; j <= n; j++) { int tmp = 1; tmp = tmp
613	#include <bits/stdc++.h> using namespace std; constexpr int MaxN = + 5, Mod = 1000000007; inline void SimpleMod(int &wei) { (wei >= Mod) && (wei -= Mod); } int F[2][MaxN << 1], G[2][MaxN << 1]; char a[MaxN], b[MaxN]; int main() { ios::sync_with_stdio(false), cin.tie(nullptr); int T; cin >> T; int n; while (T--) { cin >> n >> (a + 1) >> (b + 1); for (register int i = (1); i <= (n); ++i) { if ((i & 1) || (a[i] == '?')) continue; a[i] = ((a[i] == '0')? '1' : '0'); } for (register int i = (1); i <= (n); ++i) { if ((i & 1) || (b[i] == '?')) continue; b[i] = ((b[i] == '0')? '1' : '0'); } bool Cur = false, Last = true; for (register int i = (0); i <= (n << 1); ++i) F[Cur][i] = G[Cur][i] = 0; G[Cur][n] = 1; for (register int i = (1); i <= (n); ++i) { swap(Cur, Last); for (register int j = (0); j <= (n << 1); ++j) F[Cur][j] = G[Cur][j] = 0; for (register int j = (0); j <= (n << 1); ++j) { if (!(F[Last][j] || G[Last][j])) continue; for (register char A = '0'; A <= '1'; ++A) { if (!((a[i] == '?') || (a[i] == A))) continue; for (register char B = '0'; B <= '1'; ++B) { if (!((b[i] == '?') || (b[i] == B))) continue; const int Delta = ((A == '1') - (B == '1')); SimpleMod(G[Cur][
614	#include <bits/stdc++.h> using namespace std; using ll = long long; template <class T> void read(T &x) { char ch; x = 0; int f = 1; while (isspace(ch = getchar_unlocked())) ; if (ch == '-') ch = getchar_unlocked(), f = -1; do x = x * + (ch - '0'); while (isdigit(ch = getchar_unlocked())); x *= f; } template <class T, class... A> void read(T &x, A &...args) { read(x); read(args...); } const int N = 2005; const int M = 1000000007; char s[N], t[N]; int way[N][N * 2], sum[N][N * 2]; void inc(int &x, int y) { if ((x += y) >= M) x -= M; } int main() { int T; read(T); while (T--) { int n; read(n); memset(way, 0, (n + 1) * sizeof(way[0])); memset(sum, 0, (n + 1) * sizeof(sum[0])); scanf("%s%s", s, t); for (int i = 1; i < n; i += 2) { if (s[i]!= '?') s[i] ^= 1; if (t[i]!= '?') t[i] ^= 1; } way[0][N] = 1; for (int i = 0; i < n; ++i) { vector<int> cs, ct; if (s[i] == '0') cs = {0}; else if (s[i] == '1') cs = {1}; else cs = {0, 1}; if (t[i] == '0') ct = {0}; else if (t[i] == '1') ct = {-1}; else ct = {0, -1}; for (int x : cs) for (int y : ct) for (int j = N - i; j <= N + i; ++j) { inc(way[i + 1][j + x + y], way[i][j]); sum[i + 1][j + x + y]
615	#include <bits/stdc++.h> using namespace std; const int maxn = 2050, mod = (int)1e9 + 7; int T; int n; char s[maxn], t[maxn]; int ans; int pre[maxn][maxn * 2], suf[maxn][maxn * 2]; char flip(char c) { return c == '?'? '?' : (c == '1'? '0' : '1'); } void Mod(int &x) { x %= mod; } void Add(int &x, int y) { x += y; Mod(x); } void trans_pre(int i, int j, int ss, int tt) { int jj = j - (ss - tt); if (jj > 0) Add(pre[i][j], pre[i - 1][jj]); } void trans_suf(int i, int j, int ss, int tt) { int jj = j - (ss - tt); if (jj > 0) Add(suf[i][j], suf[i + 1][jj]); } int main() { scanf("%d", &T); while (T--) { ans = 0; scanf("%d%s%s", &n, s + 1, t + 1); for (int i = 2; i <= n; i += 2) { s[i] = flip(s[i]); t[i] = flip(t[i]); } for (int j = 0; j <= * n; j++) pre[0][j] = 0; pre[0][n] = 1; for (int i = 1; i <= n; i++) for (int j = 0; j <= * n; j++) { pre[i][j] = 0; if (s[i] == '?' && t[i] == '?') { trans_pre(i, j, 0, 0); trans_pre(i, j, 0, 1); trans_pre(i, j, 1, 0); trans_pre(i, j, 1, 1); } else if (s[i] == '?') { trans_pre(i, j, 0, t[i] - '0'); trans_pre(i, j, 1, t[i] - '0');
616	#include <bits/stdc++.h> using namespace std; const long long MOD = 1000000007; int N; char A[2020]; char B[2020]; long long D[2020][4040]; long long E[2020][4040]; int main() { int tc; scanf("%d", &tc); while (tc--) { scanf("%d", &N); scanf("%s", A + 1); scanf("%s", B + 1); for (int i = 0; i <= N; i++) for (int j = 0; j <= N + N; j++) D[i][j] = E[i][j] = 0; D[0][N] = 1; for (int i = 1; i <= N; i++) { for (int j = 0; j <= N + N; j++) { for (int k = 0; k < 2; k++) { if (A[i]!= '?' && A[i]!= k + '0') continue; for (int l = 0; l < 2; l++) { if (B[i]!= '?' && B[i]!= l + '0') continue; int tj = (i &? j + l - k : j - l + k); if (tj < || tj > N + N) continue; D[i][tj] = (D[i][tj] + D[i - 1][j]) % MOD; } } } } E[N + 1][N] = 1; for (int i = N; i >= 1; i--) { for (int j = 0; j <= N + N; j++) { for (int k = 0; k < 2; k++) { if (A[i]!= '?' && A[i]!= k + '0') continue; for (int l = 0; l < 2; l++) { if (B[i]!= '?' && B[i]!= l + '0') continue; int tj = (~i &? j + l - k : j - l + k); if (tj < || tj > N + N) continue; E[i][tj] = (E[i][tj] + E[i + 1][j]) % MOD; } } } } long long ans =
617	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int t; cin >> t; while (t--) { string s; cin >> s; string t; cin >> t; sort(s.begin(), s.end()); bool rg = false; if (t[0] == 'a' && t[1] == 'b' && t[2] == 'c') { rg = true; } if (s.size() < 3) { rg = false; } else { bool c1 = false, c2 = false, c3 = false; for (int i = 0; i < s.size(); i++) { if (s[i] == 'a') { c1 = true; } if (s[i] == 'b') { c2 = true; } if (s[i] == 'c') { c3 = true; } } if (!c1 ||!c2 ||!c3) { rg = false; } } if (!rg) { cout << s << endl; } else { long long p1 = 0; bool p2c = true; for (int i = 0; i < s.size(); i++) { if (s[i] == 'b' && p2c) { p1 = i; p2c = false; } if (s[i] == 'c') { swap(s[i], s[p1]); break; } } cout << s << endl; } } return 0; }
618	#include <bits/stdc++.h> const long long INF = 1e18; const int32_t M = 1e9 + 7; using namespace std; long long nextprime(long long x) { x++; long long n = x; long long c = 0, c1 = 0; while (true) { long long x1 = (long long)(sqrt(n)); c1 = 0; for (long long i = 2; i < x1 + 1; i++) { if (n % i == 0) { c1++; break; } } if (c1 == 0) { break; } else n++; } return n; } long long binpow(long long a, long long b) { a %= M; long long res = 1; while (b > 0) { if (b & 1) res = res * a % M; a = a * a % M; b >>= 1; } return res; } void Solve() { string s, t; cin >> s >> t; sort(s.begin(), s.end()); vector<char> cha(26); for (auto x : s) { cha[x - 'a']++; } if (t!= "abc" ||!cha[0] ||!cha[1] ||!cha[2]) { cout << s << endl; return; } else { while (cha[0]--) cout << 'a'; while (cha[2]--) cout << 'c'; while (cha[1]--) cout << 'b'; for (long long i = 3; i < 26; i++) while (cha[i]--) { cout << char('a' - i); } cout << endl; return; } } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long tcase; cin >> tcase; while (tcase--) { Solve(); } }
619	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void init() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); } long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } void solve() { long long n; cin >> n; if (n % == 0) cout << <<
620	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { int n, a, b, c, i, v; cin >> n; if (n % == 0) { n--; cout << n / + << " " << n / << " " << "1\n"; } else { n--; if ((n / 4) % == 0) { cout << n / + << " " << n / - << " " << "1\n"; } else { cout << n / + << " " << n / - << " " << "1\n"; } } } }
621	#include <bits/stdc++.h> using namespace std; void fun() { long long a, s, d, i, j, k; cin >> a; vector<long long> vec; set<pair<long long, long long> > se; set<pair<long long, long long> >::iterator ii; se.insert({1000000000000, 1000000000000}); for (i = 0; i < a; i++) { cin >> s; se.insert({s, i}); } long long otv = 0; for (i = a; i >= 1; i--) { ii = se.lower_bound({i, 0}); long long a1, a2; a1 = (*ii).first; a2 = (*ii).second; if (a1 == i) { se.erase(*ii); } else { ii = se.upper_bound({i * + 1, 0}); a1 = (*ii).first; a2 = (*ii).second; if (a1 == 1000000000000) { cout << -1 << endl; return; } se.erase(*ii); otv++; } } cout << otv << endl; } int main() { long long a, i; cin >> a; for (i = 0; i < a; i++) fun(); }
622	#include <bits/stdc++.h> using namespace std; inline void intxt() {} inline void read(int &x) { int f = 1; x = 0; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } x *= f; } inline void read(long long &x) { long long f = 1; x = 0; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = x * + ch - '0'; ch = getchar(); } x *= f; } const long long mod = 998244353; const int N = 4e5 + 5; const int M = 1e6 + 5; int n, m, k; int a[N]; multiset<int> cup; int main() { intxt(); int casen; scanf("%d", &casen); for (int LP = 1; LP <= casen; ++LP) { cin >> n; cup.clear(); for (int i = 1; i <= n; i++) { cin >> a[i]; cup.insert(a[i]); } int ans = 0; for (int i = n; i >= 1; i--) { if (cup.count(i) >= 1) { auto x = cup.lower_bound(i); cup.erase(*x); } else { auto x = cup.upper_bound(i * 2); if (x == cup.end()) { ans = -1; break; } cup.erase(*x); ans++; } } cout << ans << endl; } return 0; }
623	#include <bits/stdc++.h> using LL = long long; int query(int a, int b, int c) { std::cout << "? " << a <<'' << b <<'' << c << std::endl; int x; std::cin >> x; return x; } void solve() { int n; std::cin >> n; std::vector<int> type(n + 1, -1); n /= 3; std::vector<int> ans(n); for (int i = 0; i < n; ++i) ans[i] = query(i * + 1, i * + 2, i * + 3); int g = std::find(ans.begin(), ans.end(), 1) - ans.begin(); int b = std::find(ans.begin(), ans.end(), 0) - ans.begin(); std::vector<int> a{g * + 1, g * + 2, g * + 3, b * + 1, b * + 2, b * + 3}; int id = 0; if (query(a[1], a[2], a[3])) { if (query(a[2], a[3], a[4])) { id = 2; } else { id = 1; } } int x = a[id], y = a[id + 3]; type[x] = 1; type[y] = 0; type[a[id + 1]] = query(x, y, a[id + 1]); type[a[id + 2]] =!type[a[id + 1]]; for (auto t : a) { if (type[t] == -1) { type[t] = query(x, y, t); } } for (int i = 0; i < n; ++i) if (i!= g && i!= b) { if (ans[i]) { if (query(y, * i + 1, * i + 2)) { type[3 * i + 1] = type[3 * i + 2] = 1; type[3 * i + 3] = query(x, y, * i + 3); } else { type[3 * i + 3] = 1; type[3 * i + 1] = query(x, y, * i + 1); type[
624	#include <bits/stdc++.h> using namespace std; const int N = 1e4 + 10; int read() { int x; scanf("%d", &x); return x; } int query[N], peo[N], lp; int ask(int x, int y, int z) { printf("? %d %d %d\n", x, y, z); fflush(stdout); int p = read(); return p; } int main() { int one, zero, cheat, honest, t, n, i, j; t = read(); while (t--) { lp = 0; n = read(); for (i = 1; i <= n; i += 3) { query[i] = ask(i, i + 1, i + 2); if (query[i] == 1) one = i; else zero = i; } int tmp1 = ask(one + 1, one + 2, zero); int tmp2 = ask(one + 2, zero, zero + 1); if (query[one]!= tmp1) { if (tmp1 == 1) cheat = one, honest = zero; else honest = zero, cheat = one; } else if (tmp1!= tmp2) { if (tmp2 == 1) cheat = one + 1, honest = zero + 1; else honest = one + 1, cheat = zero + 1; } else if (tmp2!= query[zero]) { if (query[zero] == 1) cheat = one + 2, honest = zero + 2; else honest = one + 2, cheat = zero + 2; } for (i = 1; i <= n; i += 3) { if ((i <= cheat && cheat <= i + 2) || (i <= honest && honest <= i + 2)) { for (j = i; j <= i + 2; j++) if (j == cheat || j == honest) continue; else { tmp1 = ask(j, honest, cheat); if (!tmp1) peo[++lp] = j; } continue; } if (query[i] == 0) { tmp1 = ask(i, i + 1, honest); if (tmp1 == 0) { peo[++lp] = i, peo
625	#include <bits/stdc++.h> using namespace std; const long long N = 1e4 + 10; long long a[N]; long long ans[N]; long long ind1, ind0; long long find1, find0; long long query(long long x, long long y, long long z) { cout << "? " << x << " " << y << " " << z << endl; long long tmp; cin >> tmp; return tmp; } void solve() { long long n; cin >> n; ind1 = ind0 = -1; find0 = find1 = -1; for (long long i = 1; i <= n; ++i) ans[i] = a[i] = -1; for (long long i = 1; i <= n - 2; i += 3) { a[i] = query(i, i + 1, i + 2); } for (long long i = 1; i <= n - 5; i += 3) { if (a[i]!= a[i + 3]) { a[i + 1] = query(i + 1, i + 2, i + 3); a[i + 2] = query(i + 2, i + 3, i + 4); for (long long j = i; j <= i + 2; ++j) { if (a[j]!= a[j + 1]) { if (a[j] == 0) { ind1 = j + 3; ind0 = j; ans[j + 3] = 1; ans[j] = 0; } else { ind0 = j + 3; ind1 = j; ans[j + 3] = 0; ans[j] = 1; } } } break; } } for (long long i = 1; i + <= n; i += 3) { if (ind0 <= i + && ind0 >= i) continue; if (ind1 <= i + && ind1 >= i) continue; if (a[i] == 0) { long long ab1 = query(i, i + 1, ind1); if (ab1 == 1) { ans[i + 2] = 0; long long bc1 = query(i + 1, i + 2, ind1); if (bc1 == 1) { ans[i + 1] = 1;
626	#include <bits/stdc++.h> using namespace std; long long query(long long a, long long b, long long c) { cout << "? " << a << " " << b << " " << c << endl; long long r; cin >> r; return r; } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long t; cin >> t; while (t--) { long long n; cin >> n; long long a[n + 1], role[n + 1]; for (long long i = 1; i <= n; i++) role[i] = -1; for (long long i = 1; i + <= n; i += 3) a[i] = query(i, i + 1, i + 2); long long imp, crew; for (long long i = 1; i + <= n; i += 3) { if (a[i]!= a[i + 3]) { a[i + 1] = query(i + 1, i + 2, i + 3), a[i + 2] = query(i + 2, i + 3, i + 4); for (long long j = i; j < (i + 3); j++) { if (a[j]!= a[j + 1]) { if (a[j] == 0) { imp = j; crew = j + 3; role[j] = 0; role[j + 3] = 1; } else { imp = j + 3; crew = j; role[j] = 1; role[j + 3] = 0; } } } } break; } for (long long i = 1; i + <= n; i += 3) { if (i == imp || (i + 1) == imp || (i + 2) == imp || i == crew || (i + 1) == crew || (i + 2) == crew) { for (long long j = i; j < (i + 3); j++) { if (role[j] == -1) { role[j] = query(j, crew, imp); } } } else { if (a[i] == 0) { if (query(i, i + 1,
627	#include <bits/stdc++.h> using namespace std; const long long I1 = 1e9; const long long I2 = 1e18; const int32_t M1 = 1e9 + 7; const int32_t M2 = 998244353; template <typename T, typename T1> T maxn(T &a, T1 b) { if (b > a) a = b; return a; } template <typename T, typename T1> T minn(T &a, T1 b) { if (b < a) a = b; return a; } mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); map<int, set<int> > adj; int mx = 0; pair<int, int> ind = {-1, -1}; map<int, int> mp; pair<int, int> dfs(int src, int p) { int mx1 = -1, mx2 = -1, ind1 = -1, ind2 = -1; for (auto u : adj[src]) { if (u!= p) { pair<int, int> x = dfs(u, src); x.first++; if (x.first > mx1) { mx2 = mx1, ind2 = ind1; mx1 = x.first, ind1 = x.second; } else if (x.first > mx2) { mx2 = x.first, ind2 = x.second; } } } if (mx1 > -1 && mx2 > -1 && mx1 + mx2 > mx) { mx = mx1 + mx2; ind = {ind1, ind2}; } if (mp.count(src)) { if (mx1 > mx) { mx = mx1; ind = {ind1, src}; } if (mx1 == -1) { mx1 = 0, ind1 = src; } } return {mx1, ind1}; } void solve() { int n; cin >> n; vector<int> a(n); for (int i = 0; i < n; i++) { cin >> a[i]; mp[a[i]] = i + 1; } for (auto u : a) { for (int i =
628	#include <bits/stdc++.h> using namespace std; int main() { int arr[8]; int test; cin >> test; int i; for (i = 0; i < test; i++) { for (int j = 0; j < 7; j++) { cin >> arr[j]; } cout << arr[0] << " " << arr[1] << " " << arr[7] - arr[0] - arr[1] << "\n"; } return 0; }
629	#include <bits/stdc++.h> using namespace std; int main() { long long t; cin >> t; while (t--) { vector<long long> v(7); for (auto &i : v) cin >> i; long long a = v[0]; long long b = v[1]; long long c = v[5] - v[2]; cout << a <<'' << b <<'' << c << '\n'; } return 0; }
630	#include <bits/stdc++.h> using namespace std; int a[7]; int main() { int n; cin >> n; while (n--) { for (int i = 0; i <= 7; i++) { cin >> a[i]; } if ((a[6] - a[0]) - a[1] == a[2]) { cout << a[0] <<'' << a[1] <<'' << a[2] << '\n'; continue; } if ((a[6] - a[0]) - a[1] == a[3]) { cout << a[0] <<'' << a[1] <<'' << a[2] << '\n'; continue; } } }
631	#include <bits/stdc++.h> using namespace std; int main() { long long b[6]; int n; cin >> n; long long a1, a2, a3; for (int i = 0; i < n; i++) { for (int j = 0; j < 7; j++) { cin >> b[j]; } a1 = b[0]; a2 = b[1]; if (b[2] == b[1] + b[0]) a3 = b[3]; else a3 = b[2]; cout << a3 << " " << a2 << " " << a1; if (i!= n - 1) cout << "\n"; } return 0; }
632	#include <bits/stdc++.h> using namespace std; long long int mod = 1e9 + 7; char str[3025]; long long int dp[3025][3025]; int t; int main() { cin >> t; while (t--) { int arr[100]; for (int i = 1; i <= 7; i++) { cin >> arr[i]; } cout << arr[1] << " " << arr[2] << " " << (arr[7] - arr[1] - arr[0]) << "\n"; } }
633	#include <bits/stdc++.h> using namespace std; long long int mod = 1e9 + 7; char str[3025]; long long int dp[3025][3025]; int t; int main() { cin >> t; while (t--) { int arr[100]; for (int i = 1; i <= 7; i++) { cin >> arr[i]; } cout << arr[1] << " " << arr[2] << " " << (arr[7] - arr[1] - arr[0]) << "\n"; } }
634	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; const long double pi = * acos(0.0); const int mod = 1e9 + 7; const int maxn = 2e5 + 5; void solve() { int n = 7; int a[n]; for (int i = 0; i < n; i++) cin >> a[i]; cout << a[0] <<'' << a[1] <<''; int c = a[2]; if (a[0] + a[1] + a[2] == a[7]) { cout << a[2] << '\n'; } else { cout << a[3] << '\n'; } return; } int main() { ios::sync_with_stdio(false); cin.tie(0); int t = 1; cin >> t; while (t--) { solve(); } return 0; }
635	#include <bits/stdc++.h> using namespace std; const int N = 7; int t, n; string s[N]; signed main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> t; while (t--) { string ans; cin >> n; n -= 2; for (int i = 0; i < n; ++i) { cin >> s[i]; } ans += s[0][0]; bool sech = 0; for (int i = 0; i < n - 1; ++i) { if (s[i][1]!= s[i + 1][0]) { for (int j = 0; j < n; ++j) { if (i + == j) { ans += s[j]; continue; } ans += s[j][1]; } sech = 1; break; } } if (!sech) { for (int i = 0; i < n; ++i) { ans += s[i][1]; } ans += "aa"; } cout << ans; cout << "\n"; } return 0; }
636	#include <bits/stdc++.h> int main() { int t; scanf("%d", &t); while (t--) { int n, i, j = 0; scanf("%d ", &n); char s[2 * n + n], q[2 * n + n]; gets(s); for (i = 0; s[i]!= '\0'; i++) { if (s[i]!='') { q[j++] = s[i]; } } q[i] = '\0'; int f = 0; printf("%c", q[0]); for (i = 2; i < strlen(q) - 1; i = i + 2) { if (q[i]!= q[i - 1]) { printf("%c%c", q[i - 1], q[i]); f = 1; } else { printf("%c", q[i]); } } if (f == 1) printf("%c\n", q[strlen(q) - 1]); if (f == 0) { printf("%ca\n", q[strlen(q) - 2]); } } return 0; }
637	#include <bits/stdc++.h> int main() { int t; scanf("%d", &t); while (t--) { int n, i, j = 0; scanf("%d ", &n); char s[2 * n + n], q[2 * n + n]; gets(s); for (i = 0; s[i]!= '\0'; i++) { if (s[i]!='') { q[j++] = s[i]; } } q[i] = '\0'; int f = 0; printf("%c", q[0]); for (i = 2; i < strlen(q) - 1; i = i + 2) { if (q[i]!= q[i - 1]) { printf("%c%c", q[i - 1], q[i]); f = 1; } else { printf("%c", q[i]); } } if (f == 1) printf("%c\n", q[strlen(q) - 1]); if (f == 0) { printf("%ca\n", q[strlen(q) - 1]); } } return 0; }
638	#include <bits/stdc++.h> using namespace std; long long __gcd(long long a, long long b) { int r; while (b > 0) { r = a % b; a = b; b = r; } return a; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; long long a[101]; for (int i = 0; i < n; i++) cin >> a[i]; long long x = 0, y = 0; for (int i = 0; i < n; i++) { if (i % == 0) x = __gcd(x, a[i]); else y = __gcd(y, a[i]); } int sum1 = 1, sum2 = 1; for (int i = 0; i < n; i++) { if (i % == && a[i] % y == 0) sum1 = 0; if (i % == && a[i] % x == 0) sum2 = 0; } if (sum2) cout << x << endl; else if (sum1) cout << y << endl; else cout << << endl; } }
639	#include <bits/stdc++.h> using namespace std; long long __gcd(long long a, long long b) { int r; while (b > 0) { r = a % b; a = b; b = r; } return a; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; long long a[100]; for (int i = 0; i < n; i++) cin >> a[i]; long long x = 0, y = 0; for (int i = 0; i < n; i++) { if (i % == 0) x = __gcd(x, a[i]); else y = __gcd(y, a[i]); } int sum1 = 1, sum2 = 1; for (int i = 0; i < n; i++) { if (i % == && a[i] % y == 0) sum1 = 0; if (i % == && a[i] % x == 0) sum2 = 0; } if (sum2) cout << x << endl; else if (sum1) cout << y << endl; else cout << << endl; } }
640	#include <bits/stdc++.h> using namespace std; mt19937 rnd(time(0)); template <class T> long long upmax(T &a, T b) { return (b > a)? a = b, : 0; } template <class T> long long upmin(T &a, T b) { return (b < a)? a = b, : 0; } long long gcd(long long a, long long b) { if (a == 0) return b; return gcd(b % a, a); } void solve() { int n; cin >> n; vector<long long> arr(n); for (auto &i : arr) cin >> i; long long g[2]; memset(g, -1, sizeof(g)); for (int i = 0; i < n; i++) { if (g[i % 2] == -1) g[i % 2] = arr[i]; else g[i % 2] = gcd(g[i % 2], arr[i]); } auto ok = [&](int d) { int color = -1; for (int i = 0; i < n; i++) { if (arr[i] % d == 0) { if (color == 0) { return 0; } color = 0; } else { if (color == 1) { return 0; } color = 1; } } return 1; }; if (ok(g[0])) { cout << g[0] << '\n'; } else if (ok(g[1])) { cout << g[1] << '\n'; } else { cout << << '\n'; } } signed main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t = 1; cin >> t; while (t-- > 0) { solve(); } return 0; }
641	#include <bits/stdc++.h> using namespace std; long long int gcd(long long int a, long long int b) { if (a == 0) return b; return gcd(b % a, a); } int main() { int t; cin >> t; while (t--) { int n; cin >> n; long long int a[n]; for (int i = 0; i < n; i++) cin >> a[i]; int arr[2]; long long int x = 0, y = 0; for (int i = 0; i < n; i += 2) { x = gcd(x, a[i]); } arr[0] = x; for (int i = 1; i < n; i += 2) { y = gcd(y, a[i]); } arr[1] = y; int count; bool isans = false; for (int i = 0; i < 2; i++) { int flag = 0; if (a[0] % arr[i] == 0) count = 0; else count = 1; for (int j = 1; j < n; j++) { if (count == && a[j] % arr[i]!= 0) { count = 1; } else if (count == && a[j] % arr[i] == 0) { count = 0; } else { flag = 1; break; } } if (flag == 0) { cout << arr[i] << endl; isans = true; break; } } if (isans == false) cout << << endl; } }
642	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); long long int t; cin >> t; for (long long int k = 1; k <= t; k++) { int n, w; cin >> n >> k; long long int arr[n]; for (int i = 0; i < n; i++) cin >> arr[i]; sort(arr, arr + n); long long sum = 0; for (int i = n - 1; i >= n - w; i--) { sum += arr[i - w] / arr[i]; } for (int i = n - * w - 1; i >= 0; i--) sum += arr[i]; cout << sum << endl; } }
643	#include <bits/stdc++.h> using namespace std; long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long lcm(long long a, long long b) { return (a / gcd(a, b) * b); } bool sorta(const pair<int, int> &a, const pair<int, int> &b) { return (a.second < b.second); } bool sortd(const pair<int, int> &a, const pair<int, int> &b) { return (a.second > b.second); } void printarr(long long arr[], long long n) { for (int i = 0; i < n; i++) cout << arr[i] <<''; cout <<''; } void printvec(vector<long long> arr, long long n) { for (int i = 0; i < n; i++) cout << arr[i] <<''; cout <<''; } long long binaryToDecimal(string n) { string num = n; long long dec_value = 0; int base = 1; int len = num.length(); for (int i = len - 1; i >= 0; i--) { if (num[i] == '1') dec_value += base; base = base * 2; } return dec_value; } bool isPrime(long long n) { if (n <= 1) return false; if (n <= 3) return true; if (n % == || n % == 0) return false; for (int i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return false; return true; } bool isPowerOfTwo(int n) { if (n == 0) return false; return (ceil(log2(n)) == floor(log2(n))); } bool isPerfectSquare(long long x) { if (x >= 0) { long long sr = sqrt(x); return (sr * sr == x); } return false; } long long moduloMultiplication(long long a, long long b, long long mod) { long long res = 0; a %= mod; while (b
644	#include <bits/stdc++.h> using namespace std; long long MAX = 1e9 + 7; void fast() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); } int gcd(int a, int b) { if (a == 0) return b; if (b == 0) return a; if (a == b) return a; if (a > b) return gcd(a - b, b); return gcd(a, b - a); } long long powM(long long x, long long y, long long m) { long long ans = 1, r = 1; x = x % m; while (r > && r <= y) { if (r & y) { ans = ans * x; ans = ans % m; } r = r << 1; x = x * x; x = x % m; } ans = ans % m; return ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; for (long long T = 0; T < t; T++) { long long n; cin >> n; long long b[n]; for (long long i = 0; i < n; i++) cin >> b[i]; long long a[n]; long long sum = 0; for (long long i = 0; i < n; i++) { sum += b[i]; } bool imp = 0; if ((sum) % (n * (n + 1) / 2) == 0) sum = (2 * sum) / (n * (n + 1)); else { imp = 1; break; } if (!imp) { for (long long i = 0; i < n; i++) { if ((b[(i - + n) % n] - b[i % n] + sum) % n == 0) a[i] = (b[(i - + n) % n] - b[i % n] + sum) / n; else { imp = 1; break; } if (a[i] < || a[i] > 1000000000) { imp = 1; break; } } } if (imp) { cout << "NO"
645	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; const long long N = 2e3 + 100; const long long MOD = 1e9 + 7; const long long inf = 2e9; const long double eps = 1e-12; const long double EPS = 1e-10; long long rx[] = {1, -1, 0, 0}; long long ry[] = {0, 0, 1, -1}; int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; vector<long long> a(n); long long sum = 0; for (long long i = 0; i < n; ++i) { cin >> a[i]; sum += a[i]; } long long k = n * (n + 1) / 2; if (sum % k) { cout << "NO" << '\n'; continue; } long long s = sum / k; vector<long long> v(n); bool ok = 1; for (long long i = 0; i < n && ok; ++i) { long long j = i - 1; if (j < 0) j = n - 1; long long x = a[i] - a[j] - s; x = -x; if (x % n || x / n == 0) ok = 0; else v[i] = x / n; } if (!ok) { cout << "NO" << '\n'; continue; } cout << "YES\n"; for (auto to : v) cout << to <<''; cout << '\n'; } return 0; }
646	#include <bits/stdc++.h> using namespace std; using ll = long long; const long long int mod = 1e9 + 7; const long long int modd = 998244353; void __print(int x) { cerr << x; } void __print(long x) { cerr << x; } void __print(long long x) { cerr << x; } void __print(unsigned x) { cerr << x; } void __print(unsigned long x) { cerr << x; } void __print(unsigned long long x) { cerr << x; } void __print(float x) { cerr << x; } void __print(double x) { cerr << x; } void __print(long double x) { cerr << x; } void __print(char x) { cerr << '\'' << x << '\''; } void __print(const char* x) { cerr << '\"' << x << '\"'; } void __print(const string& x) { cerr << '\"' << x << '\"'; } void __print(bool x) { cerr << (x? "true" : "false"); } template <typename T, typename V> void __print(const pair<T, V>& x) { cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}'; } template <typename T> void __print(const T& x) { int f = 0; cerr << '{'; for (auto& i : x) cerr << (f++? "," : ""), __print(i); cerr << "}"; } void _print() { cerr << "]\n"; } template <typename T, typename... V> void _print(T t, V... v) { __print(t); if (sizeof...(v)) cerr << ", "; _print(v...); } template <typename T> void print(vector<T> v) { for (T i : v) cout << i << " "; cout << '\n'; } template <typename T> void print(vector<vector<T>>& v) { for (vector<T>& vv : v) { for (T& i : vv) cout << i << " "; cout << '\n'; } } template <typename T> void read(vector
647	#include <bits/stdc++.h> using namespace std; using i64 = long long; void Solve() { int n; cin >> n; vector<int> b(n); for (int i = 0; i < n; i++) { cin >> b[i]; } i64 sum = accumulate(b.begin(), b.end(), 0ll); if (sum % (n * (n + 1) / 2)!= 0) { cout << "NO\n"; return; } i64 c = sum / (n * (n + 1) / 2); vector<int> a(n); for (int i = 0; i < n; i++) { i64 x = c - b[i] + b[(i - + n) % n]; if (x == || x % n!= 0) { cout << "NO\n"; return; } a[i] = x / n; } cout << "YES\n"; for (int i = 0; i < n; i++) { cout << a[i] <<''; } cout << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int t; cin >> t; while (t--) { Solve(); } }
648	#include <bits/stdc++.h> using namespace std; using i64 = long long; void Solve() { i64 n; cin >> n; vector<int> b(n); for (int i = 0; i < n; i++) { cin >> b[i]; } i64 sum = accumulate(b.begin(), b.end(), 0ll); if (sum % (n * (n + 1) / 2)!= 0) { cout << "NO\n"; return; } i64 c = sum / (n * (n + 1) / 2); vector<int> a(n); for (int i = 0; i < n; i++) { i64 x = c - b[i] + b[(i - + n) % n]; if (x == || x % n!= 0) { cout << "NO\n"; return; } a[i] = x / n; } cout << "YES\n"; for (int i = 0; i < n; i++) { cout << a[i] <<''; } cout << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int t; cin >> t; while (t--) { Solve(); } }
649	#include <bits/stdc++.h> using namespace std; using i64 = long long; void Solve() { i64 n; cin >> n; vector<int> b(n); for (int i = 0; i < n; i++) { cin >> b[i]; } i64 sum = accumulate(b.begin(), b.end(), 0ll); if (sum % (n * (n + 1) / 2)!= 0) { cout << "NO\n"; return; } i64 c = sum / (n * (n + 1) / 2); vector<i64> a(n); for (int i = 0; i < n; i++) { i64 x = c - b[i] + b[(i - + n) % n]; if (x == || x % n!= 0) { cout << "NO\n"; return; } a[i] = x / n; } cout << "YES\n"; for (int i = 0; i < n; i++) { cout << a[i] <<''; } cout << '\n'; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); int t; cin >> t; while (t--) { Solve(); } }
650	#include <bits/stdc++.h> using namespace std; long long int a[500005], b[500005], c[500005], d[500005]; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t, i, j, k, n, m, w, y, z, x, l, r, k1, k2; cin >> t; while (t--) { cin >> n; x = 0; for (i = 1; i <= n; i++) cin >> b[i], x += b[i]; y = (n * (n + 1)) / 2; if (x % y!= 0) { cout << "NO" << endl; continue; } x /= y; z = 0; for (i = 1; i <= n; i++) { y = x + b[((i + n - 2) % n) + 1] - b[i]; if (y == || (y % n!= 0)) { z = 1; break; } a[i] = y / n; } if (z) cout << "NO" << endl; else { cout << "YES" << endl; for (i = 1; i <= n; i++) cout << a[i] << " "; cout << endl; } } }
651	#include <bits/stdc++.h> using namespace std; long long int fastpow(long long int a, long long int p) { long long int res = 1; while (p) { if (p % == 0) { a = a * 1ll * a % 1000000007; p /= 2; } else { res = res * 1ll * a % 1000000007; p--; } } return res; } long long int fact(long long int n) { long long int res = 1; for (long long int i = 1; i <= n; i++) { res = res * 1ll * i % 1000000007; } return res; } long long int comb(long long int n, long long int k) { return fact(n) * 1ll * fastpow(fact(k), - 2) % * 1ll * fastpow(fact(n - k), - 2) % 1000000007; } long long int to_integer(string& aa) { long long int res = 0; for (auto x : aa) res = (res * 10) + (x - '0'); return res; } bool prime(long long int n) { if (n <= 1) return false; if (n <= 3) return true; if (n % == || n % == 0) return false; for (long long int i = 5; i * i <= n; i = i + 6) if (n % i == || n % (i + 2) == 0) return false; return true; } void sieve(long long int n, vector<long long int>& prime) { for (long long int p = 2; p * p <= n; p++) { if (prime[p] == 1) { for (long long int i = p * p; i <= n; i += p) prime[i] = 0; } } } bool check(string s, string a) { long long int j = 0; for (long long int i = 0; i < s.size(); i++) { if (s[i] == a[j]) { j++; } if (j == a.size()) return true; } return false; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t; cin >> t;
652	#include <bits/stdc++.h> using namespace std; const int N = 5e4 + 10; long long a[N], b[N]; int main() { int t; cin >> t; while (t--) { long long n; cin >> n; long long cnt = 0; for (int i = 1; i <= n; i++) cin >> a[i], cnt += a[i]; if (cnt % ((n * n + n) / 2)!= 0) { cout << "NO" << endl; continue; } cnt /= (n * n + n) / 2; bool flag = 1; for (int i = n; i <= * n - 1; i++) if ((a[(i - 1) % n + 1] - a[i % n + 1] + cnt) % n == && (a[(i - 1) % n + 1] - a[i % n + 1] + cnt)!= 0) b[i - n + 1] = (a[(i - 1) % n + 1] - a[i % n + 1] + cnt) / n; else flag = 0; if (flag) { cout << "YES" << endl; for (int i = 1; i <= n; i++) cout << b[i] << " "; cout << endl; } else cout << "NO" << endl; } return 0; }
653	#include <bits/stdc++.h> using namespace std; void solve() { int n; cin >> n; vector<int> b(n), a(n); long long int sa, sb = 0, t_n = (long long int)n * (n + 1) / 2, x; for (int i = 0; i < n; i++) { cin >> b[i]; sb += b[i]; } if (sb % t_n!= 0) { cout << "NO\n"; return; } sa = sb / n; for (int i = n - 1; i >= 0; i--) { x = b[i] - b[(i + 1) % n] + sa; if (x % n!= || x <= 0) { cout << "NO\n"; return; } a[(i + 1) % n] = x / n; } cout << "YES\n"; for (int i = 0; i < n; i++) { cout << a[i] << " "; } cout << "\n"; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; while (t--) { solve(); } return 0; }
654	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> ls(n); for (int i = 0; i < n; i++) cin >> ls[i]; long long sum = 0; for (int i = 0; i < n; i++) sum += ls[i]; if (sum % (n * (n + 1) / 2)!= 0) { cout << "NO" << '\n'; return; } long long s = sum / (n * (n + 1) / 2); vector<long long> ans(n); for (int i = 0; i < n; i++) { long long k = ls[i] - s; long long j = ((i - + n) % n); long long y = ls[j] - k; if (y == or y % n) { cout << "NO" << '\n'; return; } ans[i] = y / n; } cout << "YES" << '\n'; for (auto i : ans) cout << i << " "; cout << '\n'; } int main() { std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); ; int T; cin >> T; while (T--) { solve(); } return 0; }
655	#include <bits/stdc++.h> using namespace std; template <typename A, typename B> ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; } template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream &operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; } void dbg_out() { cout << endl; } template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cout <<'' << H; dbg_out(T...); } int32_t main() { ios::sync_with_stdio(false); cin.tie(0); long long tt; cin >> tt; while (tt--) { long long n; cin >> n; vector<long long> a(n); for (long long i = 0; i < n; i++) cin >> a[i]; long long sum = accumulate((a).begin(), (a).end(), 0ll); long long tot = (n * (n + 1)) / 2; if (sum % tot || sum / tot < n) { cout << "NO\n"; continue; } sum /= tot; vector<long long> ans(n); long long bad = 0; for (long long i = 0; i < n; i++) { long long diff = a[(i + 1) % n] - a[i]; if ((sum - diff) % n) bad = 1; ans[(i + 1) % n] = (sum - diff) / n; }; long long s = 0; for (auto x : ans) bad |= (x == 0), s += x; if (bad || sum!= s) cout << "NO\n"; else { cout << "YES\n"; for (auto x : ans) cout << x << " "; cout << "\n"; } } }
656	#include <bits/stdc++.h> using namespace std; long long int MOD = 1000000007; long long int gcd(long long int a, long long int b) { return b? gcd(b, a % b) : a; } unsigned long long power(unsigned long long x, long long int y, long long int p) { unsigned long long res = 1; x = x % p; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } unsigned long long modInverse(unsigned long long n, long long int p) { return power(n, p - 2, p); } unsigned long long nCrModPFermat(unsigned long long n, long long int r, long long int p) { if (n < r) return 0; if (r == 0) return 1; unsigned long long fac[n + 1]; fac[0] = 1; for (long long int i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % p; return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; } long long int find_set(long long int i, vector<long long int> &parent) { if (parent[i] == -1) { return i; } else { parent[i] = find_set(parent[i], parent); return parent[i]; } } void union_set(long long int i, long long int j, vector<long long int> &parent, vector<long long int> &rank) { long long int s1 = find_set(i, parent); long long int s2 = find_set(j, parent); if (s1!= s2) { if (rank[s1] > rank[s2]) { parent[s2] = s1; rank[s1] += rank[s2]; } else { parent[s1] = s2; rank[s2] += rank[s1]; } } else { return; } } void solve() { long long int n, i, j; cin >> n; long long int
657	#include <bits/stdc++.h> using namespace std; long long x, y; int vx[70]; int vy[70]; int countX, countY; bool tryy(long long xx, long long yy) { if (yy == xx) return true; countX = 0; countY = 0; if (xx == 0) { countX = 1; vx[0] = 0; } while (xx!= 0) { vx[countX] = xx % 2; xx = xx / 2; countX++; } if (yy == 0) { countY = 1; vy[0] = 0; } while (yy!= 0) { vy[countY] = yy % 2; yy = yy / 2; countY++; } if (countX >= countY) return false; for (int i = 0; i <= countY - countX; i++) { bool ok = true; for (int j = 0; j < i; j++) if (vy[j]!= 1) ok = false; if (!ok) continue; bool found = true; for (int j = 0; j < countX; j++) { if (vy[i + j]!= vx[j]) found = false; if (vx[0] == && vy[0] == 0) found = false; } if (!found) { found = true; for (int j = 0; j < countX; j++) { if (vy[i + j]!= vx[countX - j - 1]) found = false; if (vx[0] == && vy[countY - 1] == 0) found = false; } } if (!found) continue; for (int j = i + countX; j < countY; j++) if (vy[j]!= 1) ok = false; if (ok) return true; } return false; } void solve() { scanf("%lld %lld", &x, &y); countX = 0; countY = 0; if (y == x) { printf("YES\n"); return; } if (x == 0) { while (y!= 0) { if (y % == 0) { printf("NO\n"); return; } y = y / 2; } printf("YES\n"); } if (tryy(x, y)) { printf("
658	#include <bits/stdc++.h> using namespace std; using ll = unsigned long long; using pll = pair<ll, ll>; using str = string; using vll = vector<ll>; using pll = pair<ll, ll>; using ld = long double; const ld PI = acos(-1); mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b); } str Y = "YES"; str N = "NO"; map<str, bool> used; void solve() { ll x, y; cin >> x >> y; str sx = "", sy = ""; while (x) { ll ot = x % 2; sx += char('0' + ot); x /= 2; } reverse(((sx).begin()), ((sx).end())); while (y) { ll ot = y % 2; sy += char('0' + ot); y /= 2; } reverse(((sy).begin()), ((sy).end())); used[sx] = true; queue<str> q; q.push(sx); while (!q.empty()) { str nit = q.front(); q.pop(); str pl = nit + '1'; reverse(((pl).begin()), ((pl).end())); while (pl.front() == '0') { pl.erase(pl.begin()); } if ((ll)pl.size() <= (ll)sy.size() &&!used[pl]) { used[pl] = true; q.push(pl); } str mn = nit; reverse(((nit).begin()), ((nit).end())); while (mn.front() == '0') { mn.erase(mn.begin()); } if ((ll)mn.size() <= (ll)sy.size() &&!used[mn]) { used[mn] = true; q.push(mn); } } if (used[sy]) { cout << Y; return; } cout << N; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); ll t; t = 1; for (ll i = 0; i
659	#include <bits/stdc++.h> using namespace std; using ll = long long; const int maxn = 2e5 + 5; int n, m, q; int a[maxn], b[maxn]; int val[2 * maxn], p[2 * maxn]; multiset<pair<int, bool>> S[2 * maxn]; set<pair<int, ll>> ans; int ata(int nd) { if (p[nd] == nd) return nd; return p[nd] = ata(p[nd]); } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> n >> m >> q; vector<pair<int, bool>> v; for (int i = 1; i <= n; i++) { cin >> a[i]; v.push_back({a[i], 0}); } for (int i = 1; i <= m; i++) { cin >> b[i]; v.push_back({b[i], 1}); } sort(v.begin(), v.end()); map<int, vector<int>> seg; ll now = 0; for (int i = 0; i < (int)v.size(); i++) { if (v[i].second == 0) val[i] = v[i].first, now += v[i].first; else val[i] = 1e9; S[i].insert({v[i].first, (v[i].second == 0)}); p[i] = i; } ans.insert({0, now}); for (int i = 1; i < (int)v.size(); i++) seg[v[i].first - v[i - 1].first].push_back(i); for (auto i : seg) { for (auto j : i.second) { int a = ata(j - 1); int b = ata(j); int go = a, lit = b; if ((int)S[b].size() > (int)S[a].size()) go = b, lit = a; auto cep = S[a].lower_bound({val[a], 1}); auto sag = S[b].lower_bound({val[b], 1}); vector<pair<int, int
660	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; const long long N = 4e5 + 100; const long long MOD = 1e9 + 7; const long long inf = 2e9; const long double eps = 1e-12; const long double EPS = 1e-10; long long rx[] = {1, -1, 0, 0}; long long ry[] = {0, 0, 1, -1}; long long ind[N], sz[N], mx[N], pref[N], cur = 0; long long f(long long v) { if (sz[v] == 0) return 0; long long r = mx[v]; long long res = pref[r]; if (r - sz[v]) res -= pref[r - sz[v]]; return res; } long long fnd(long long x) { if (x == ind[x]) return x; return ind[x] = fnd(ind[x]); } void unt(long long x, long long y) { x = fnd(x); y = fnd(y); if (x == y) return; cur -= f(x); cur -= f(y); sz[x] += sz[y]; mx[x] = max(mx[x], mx[y]); ind[y] = x; cur += f(x); } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long n, m, q; cin >> n >> m >> q; vector<pair<long long, long long>> v; for (long long i = 0; i < n; ++i) { long long x; cin >> x; v.push_back({x, 1}); cur += x; } for (long long i = 0; i < m; ++i) { long long x; cin >> x; v.push_back({x, 0}); } sort(v.begin(), v.end()); pref[0] = v[0].first; for (long long i = 0; i < n + m; ++i) { pref[i] = pref[i - 1] + v[i].first; } map<long long
661	#include <bits/stdc++.h> const int N = 400005; using namespace std; int n, m, k, fa[N], cnt[N]; long long res, ans[N], sum[N]; pair<int, int> a[N], b[N], q[N]; int find(int first) { return first == fa[first]? first : fa[first] = find(fa[first]); } void merge(int first, int second) { first = find(first); second = find(second); res -= sum[first] - sum[first - cnt[first]]; res -= sum[second] - sum[second - cnt[second]]; cnt[second] += cnt[first]; fa[first] = second; res += sum[second] - sum[second - cnt[second]]; } int main() { scanf("%d%d%d", &n, &m, &k); for (int i = 1; i <= n; ++i) scanf("%d", &a[i].first), res += a[i].first, a[i].second = 1; for (int i = n + 1; i <= n + m; ++i) scanf("%d", &a[i].first), a[i].second = 0; sort(a + 1, a + n + m + 1); for (int i = 1; i <= n + m; ++i) { fa[i] = i; sum[i] = sum[i - 1] + a[i].first; cnt[i] = a[i].second; b[i] = make_pair(a[i].first - a[i - 1].first, i - 1); } for (int i = 1; i <= k; ++i) scanf("%d", &q[i].first), q[i].second = i; sort(q + 1, q + k + 1); sort(b + 1, b + n + m + 1); int nw = 0; for (int i = 1; i <= k; ++i) { while (nw < n + m + && b[nw + 1].first <= q[i].first) { ++nw; merge(b[nw].second, b[nw].second + 1); }
662	#include <bits/stdc++.h> using namespace std; mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); mt19937 rnf(2106); const int N = 400005; int n, m, qq; pair<int, bool> a[N]; pair<int, int> b[N]; int pr[N]; int p[N]; int l[N], r[N]; int q[N]; int first(int x) { if (x == p[x]) return x; return p[x] = first(p[x]); } void kpc(int x, int y) { x = first(x); y = first(y); l[y] = min(l[y], l[x]); r[y] = max(r[y], r[x]); q[y] += q[x]; p[x] = y; } long long yans[N]; void solv() { cin >> n >> m >> qq; for (int i = 1; i <= n; ++i) { cin >> a[i].first; a[i].second = true; } for (int i = n + 1; i <= n + m; ++i) { cin >> a[i].first; a[i].second = false; } n += m; sort(a + 1, a + n + 1); for (int i = 1; i <= qq; ++i) { cin >> b[i].first; b[i].second = i; } vector<pair<int, int> > v; for (int i = 1; i < n; ++i) { v.push_back(make_pair(a[i + 1].first - a[i].first, i)); } sort((v).begin(), (v).end()); sort(b + 1, b + qq + 1); long long ans = 0; for (int i = 1; i <= n; ++i) ans += a[i].first * a[i].second; for (int i = 1; i <= n; ++i) pr[i] = pr[i - 1] + a[i].first; for (int i = 1; i <= n; ++i) { p[i] =
663	#include <bits/stdc++.h> using namespace std; int main() { int t, s, d; cin >> t; while (t--) { int count = 0; string a; cin >> a; s = a.size(); d = s / 2; if (s % == 1) { cout << "no" << endl; } else { for (int i = 0; i < d; i++) { if (a[i]!= a[i + d]) { count = 1; break; } } if (count == 1) cout << "no" << endl; else cout << "yes" << endl; } } }
664	#include <bits/stdc++.h> int consider(char *s) { int len = strlen(s); if (len %!= 0) return 0; int i = 0, j = len / 2; while (j < len) { if (s[i]!= s[j]) return 0; i++; j++; } return 1; } void solution() { int T; scanf("%s", &T); for (int t = 0; t < T; t++) { char s[1000]; scanf("%s", s); if (consider(s)) printf("YES\n"); else printf("NO\n"); } } int main() { solution(); return 0; }
665	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; int t; string s; int main() { ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL); cin >> t; for (int c = 1; c <= t; ++c) { int flag = 0; cin >> s; if (s.length() %!= 0) { cout << "NO" << endl; } else { for (int i = 0; i < (s.length() / 2) - 1; ++i) { if (s[i]!= s[(s.length() / 2) + i]) { flag = 1; } } if (flag == 0) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } return 0; }
666	#include <bits/stdc++.h> int main(void) { int t, len, i, flag; char c[102]; scanf("%d", &t); while (t--) { flag = 0; scanf("%s", c); len = strlen(c); if (len % == 0) { flag = 1; for (i = 0; i < (len / 2) && flag; i++) if (c[i]!= c[i + len / 2]) flag = 0; } if (flag) printf("YES\n"); else printf("NO"); } return 0; }
667	#include <bits/stdc++.h> using namespace std; template <typename A, typename B> ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; } template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream &operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; } void dbg_out() { cerr << endl; } template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr <<'' << H; dbg_out(T...); } const int MAX_N = 1e5 + 5; const long long MOD = 1e9 + 7; const long long INF = 1e9; const long double EPS = 1e-9; void solve() { string str; cin >> str; int len = ((int)str.size()); if (len & 1) cout << "NO" << endl; else { for (int i = 0; i < len / 2; ++i) { if (str[i]!= str[i + len / 2]) { cout << "NO" << endl; break; } } cout << "YES" << endl; } } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int tc = 1; cin >> tc; for (int t = 1; t <= tc; t++) { solve(); } }
668	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.size(); string test1 = ""; string test2 = ""; for (int j = 0; j < n / 2; j++) { test1 += s[j]; } for (int k = n / 2; k < n; k++) { test2 += s[k]; } if (n %!= 0) cout << "NO" << endl; else { if (test1 == test2) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } return 0; }
669	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.size(); string test1 = ""; string test2 = ""; for (int j = 0; j < n / 2; j++) { test1 += s[j]; } for (int k = n / 2; k < n; k++) { test2 += s[k]; } if (n %!= 0) cout << "NO" << endl; else { if (test1 == test2) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } return 0; }
670	#include <bits/stdc++.h> using namespace std; int main() { int n, j, i; string str, str1, str2; cin >> n; for (i = 0; i < n; i++) { cin >> str; if (str.length() % == 0) { j = str.length() / 2; str1 = str.substr(0, j); str2 = str.substr(0, j); if (str1 == str2) { cout << "YES" << endl; } else cout << "NO" << endl; } else { cout << "NO" << endl; } } return 0; }
671	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.size(); string test1 = ""; string test2 = ""; for (int j = 0; j < n / 2; j++) { test1 += s[j]; } for (int k = n / 2; k < n; k++) { test2 += s[k]; } if (n %!= 0) cout << "NO" << endl; else { if (test1 == test2) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } return 0; }
672	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.size(); string test1 = ""; string test2 = ""; for (int j = 0; j < n / 2; j++) { test1 += s[j]; } for (int k = n / 2; k < n; k++) { test2 += s[k]; } if (n %!= 0) cout << "NO" << endl; else { if (test1 == test2) { cout << "YES" << endl; } else { cout << "NO" << endl; } } } return 0; }
673	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int flag = 0; int l = s.length(); for (int i = 0; i < l / 2; i++) { if (s[i]!= s[i + l / 2]) { flag = 1; break; } } if (flag == || l % == 1) cout << "NO" << endl; else cout << "YES" << endl; } return 0; }
674	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { string s; cin >> s; int n = s.length() / - 1; int k = s.length() - 1; int t = 0; while (n > && k > s.length() / 2) { if (s[n]!= s[k]) { t = 1; break; } n--; k--; } if (t || s.length() % 2) cout << "NO" << endl; else cout << "YES" << endl; } return 0; }
675	#include <bits/stdc++.h> using namespace std; long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long power(long long x, unsigned long long y) { long long res = 1; while (y > 0) { if (y & 1) res = res * x; y = y >> 1; x = x * x; } return res; } long long one(long long x, long long y) { long long s = (x + 1) / power(2, y); if (s % == 0) { return s / * power(2, y); } else { return (s / * power(2, y)) + ((x + 1) % power(2, y)); } } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n; cin >> n; set<long long> s; long long x = sqrt(n); for (long long i = 0; i <= x; i++) { if (i * i <= n) { s.insert(i * i); } if (i * i * i <= n) { s.insert(i * i * i); } } cout << s.size() << endl; } }
676	#include <bits/stdc++.h> using namespace std; long long mod = 1e9 + 7; void solve() { long long a, s, tempa, temp2; cin >> a >> s; if (a == s) { cout << "0"; return; } tempa = a; temp2 = s; vector<int> num1, sum; while (tempa > 0) { num1.push_back(tempa % 10); tempa = tempa / 10; } while (temp2 > 0) { sum.push_back(temp2 % 10); temp2 = temp2 / 10; } int c = num1.size(); if (num1.size() < sum.size()) { for (int i = 0; i < sum.size() - num1.size(); i++) num1.push_back(0); } vector<long long> ans; int k = 0; for (int i = 0; i < c; i++) { if (k >= sum.size()) { cout << "-1"; return; } if (num1[i] <= sum[k]) { ans.push_back(sum[k] - num1[i]); k++; } else { if (k + >= sum.size()) { cout << "-1"; return; } int x = (sum[k + 1] * + sum[k]); if (x - num1[i] > 9) { cout << "-1"; return; } ans.push_back(x - num1[i]); k += 2; } } if (k < sum.size()) { for (int i = c; i < sum.size(); i++) { ans.push_back(sum[i]); } } reverse(ans.begin(), ans.end()); int itr = 0; for (int i = 0; i < ans.size(); i++) { if (ans[i]!= 0) { itr = i; break; } } for (int i = 0; i < ans.size(); i++) { if (ans[i] < 0) { cout << "-1"; return; } } long long num = 0; for (int i = itr; i < ans.size(); i++) { num = num * + ans[i]; } if (num > s) { cout
677	#include <bits/stdc++.h> using namespace std; vector<long long int> v; vector<long long int> ss; vector<long long int> aa; int main() { long long int t; cin >> t; while (t > 0) { v.clear(); ss.clear(); aa.clear(); string a, s; cin >> a >> s; for (long long int i = a.length() - 1; i >= 0; i--) { aa.push_back(a[i] - '0'); } for (long long int i = s.length() - 1; i >= 0; i--) { ss.push_back(s[i] - '0'); } long long int flg = 0; long long int i = 0, j = 0; while (i < aa.size()) { if (j >= ss.size()) { flg = 1; break; } if (ss[j] < aa[i]) { if (j + >= ss.size()) { flg = 1; break; } long long int q = (ss[j + 1] * 10) + ss[j]; long long int num = q - aa[i]; if (num > and num >= 0) { flg = 1; break; } else { v.push_back(num); } j = j + 2; } else { v.push_back(ss[j] - aa[i]); j++; } i++; } if (flg) { cout << "-1" << endl; } else { long long int ans = 0; if (j < ss.size()) { for (long long int i = j; i < ss.size(); i++) { v.push_back(ss[i]); } } long long int i = v.size() - 1; while (v[i] == 0) { i--; } long long int c = 0; for (long long int j = i; j >= 0; j--) { cout << v[j]; c++; } if (c == 0) { cout << 0; } cout << endl; } t--; } }
678	#include <bits/stdc++.h> using namespace std; vector<long long int> v; vector<long long int> ss; vector<long long int> aa; int main() { long long int t; cin >> t; while (t > 0) { v.clear(); ss.clear(); aa.clear(); string a, s; cin >> a >> s; for (long long int i = a.length() - 1; i >= 0; i--) { aa.push_back(a[i] - '0'); } for (long long int i = s.length() - 1; i >= 0; i--) { ss.push_back(s[i] - '0'); } long long int flg = 0; long long int i = 0, j = 0; while (i < aa.size()) { if (j >= ss.size()) { flg = 1; break; } if (ss[j] < aa[i]) { if (j + >= ss.size()) { flg = 1; break; } long long int q = (ss[j + 1] * 10) + ss[j]; long long int num = q - aa[i]; if (num > and num < 0) { flg = 1; break; } else { v.push_back(num); } j = j + 2; } else { v.push_back(ss[j] - aa[i]); j++; } i++; } if (flg) { cout << "-1" << endl; } else { long long int ans = 0; if (j < ss.size()) { for (long long int i = j; i < ss.size(); i++) { v.push_back(ss[i]); } } long long int i = v.size() - 1; while (v[i] == 0) { i--; } long long int c = 0; for (long long int j = i; j >= 0; j--) { cout << v[j]; c++; } if (c == 0) { cout << 0; } cout << endl; } t--; } }
679	#include <bits/stdc++.h> using namespace std; const long long m = 1e9 + 7; void __print(int x) { cerr << x; } void __print(long x) { cerr << x; } void __print(long long x) { cerr << x; } void __print(unsigned x) { cerr << x; } void __print(unsigned long x) { cerr << x; } void __print(unsigned long long x) { cerr << x; } void __print(long double x) { cerr << x; } void __print(char x) { cerr << '\'' << x << '\''; } void __print(const char *x) { cerr << '\"' << x << '\"'; } void __print(const string &x) { cerr << '\"' << x << '\"'; } template <typename T, typename V> void __print(const pair<T, V> &x) { cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}'; } template <typename T> void __print(const T &x) { int f = 0; cerr << '{'; for (auto &i : x) cerr << (f++? "," : ""), __print(i); cerr << "}"; } void _print() { cerr << "]\n"; } template <typename T, typename... V> void _print(T t, V... v) { __print(t); if (sizeof...(v)) cerr << ", "; _print(v...); } void solve() { string a, s; cin >> a >> s; string b = ""; while (!s.empty() ||!a.empty()) { if (s.empty()) { b = "-1"; break; } else if (a.empty()) { b = s; break; } else if (a.back() <= s.back()) { b = to_string(s.back() - a.back()) + b; s.pop_back(); a.pop_back(); } else { b = to_string(10 + s.back() - a.back()) + b; s.pop_back(); a.pop_back(); if (s.empty() || s.back()!= '1') { b = "-1"; break; } s
680	#include <bits/stdc++.h> using namespace std; const long long INF = 1e18; int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long int t; cin >> t; while (t--) { string a, s; cin >> a >> s; vector<long long int> v; long long int x = s.length() - 1, flag = 1; for (int i = a.length() - 1; i >= 0; i--) { if (x < 0) { flag = 0; break; } if (s[x] >= a[i]) v.push_back(s[x] - a[i]), x--; else { if (x > && s[x - 1] == '1') v.push_back(10 + s[x] - a[i]), x -= 2; else { flag = 0; break; } } } if (x >= 0) { for (int i = x; i >= 0; i--) { v.push_back(s[i] - '0'); } } if (flag == 0) cout << "-1\n"; else { long long int p = 0; reverse(v.begin(), v.end()); for (auto i : v) { if (i!= 0) p = 1; if (p == 1) cout << i; } cout << endl; } } }
681	#include <bits/stdc++.h> using namespace std; int main() { int t; scanf("%d", &t); while (t--) { int m, n; scanf("%d %d", &m, &n); int happyness[m][n]; for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { cin >> happyness[i][j]; } } if (m == 1) { int min = happyness[0][0]; for (int i = 1; i < n; ++i) { if (happyness[0][i] < min) min = happyness[0][i]; } cout << min << endl; } else { int special_row = 0, ans1 = 0, ans2 = 0, k = 0, column1 = 0, column2 = 1; for (int i = 0; i < m; ++i) { int max, second_max, max_column, second_max_column; if (happyness[i][0] >= happyness[i][1]) { max = happyness[i][0], second_max = happyness[i][1]; max_column = 0, second_max_column = 1; } else { second_max = happyness[i][0], max = happyness[i][1]; max_column = 1, second_max_column = 0; } if (n > 2) { for (int j = 2; j < n; ++j) { if (happyness[i][j] > max) { second_max = max, max = happyness[i][j]; second_max_column = max_column, max_column = j; } else if (happyness[i][j] > second_max && happyness[i][j] <= max) { second_max = happyness[i][j]; second_max_column = j; } } } if (second_max > ans1) { ans1 = second_max, column1 = second_max_column, column2 = max_column; } } if (n > && m
682	#include <bits/stdc++.h> using namespace std; int m, n; bool possible(vector<vector<unsigned long long>>& data, long long h) { vector<bool> vld(n); bool pair = false; for (int i = 0; i < m; i++) { int c = 0; for (int j = 0; j < n; j++) { if (data[i][j] >= h) { vld[j] = true; c++; } } if (c > 1) { pair = true; } } if (!pair && n > 1) { return false; } else { return std::all_of(vld.begin(), vld.end(), [](bool x) { return x; }); } } long long max_possible(vector<vector<unsigned long long>>& data, unsigned long long mx) { long long l = 0, r = mx; while (l < r) { long long mid = (l + r) / 2; if (possible(data, mid)) { l = mid + 1; } else { r = mid; } } return l - 1; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); int t; cin >> t; while (t--) { cin >> m >> n; vector<vector<unsigned long long>> data(m, vector<unsigned long long>(n)); unsigned long long mx = 0; for (int i = 0; i < m; i++) { for (int j = 0; j < n; j++) { cin >> data[i][j]; mx = max(mx, data[i][j]); } } long long res = max_possible(data, mx); cout << res << endl; } return 0; }
683	#include <bits/stdc++.h> using namespace std; long long int i, j, mod = 1e9 + 7; long long int power(long long int x, long long int y, long long int mod) { x = x % mod; long long int res = 1; while (y) { if (y & 1) res = (res * x) % mod; y = y >> 1; x = (x * x) % mod; } return res % mod; } long long int modInverse(long long int n, long long int p) { return power(n, p - 2, p); } long long int ncr(long long int n, long long int r, long long int p) { if (n < r) return 0; if (r == 0) return 1; unsigned long long fac[n + 1]; fac[0] = 1; for (int i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % p; return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; } long long int fact(long long int n) { if (n == 0) return 1; return n * fact(n - 1); } long long int nCr(long long int n, long long int r) { if (r == 2) return (n * (n - 1)) / 2; else return (n * (n - 1) * (n - 2)) / 6; } bool isPos(vector<vector<long long int>> &arr1, long long int mid) { long long int m = arr1.size(), n = arr1[0].size(); long long int total = 0, extra = 0; set<long long int> sel; for (i = 0; i < n; i++) { total = 0; for (j = 0; j < m; j++) { if (arr1[j][i] >= mid) { total = 1; if (sel.count(j)) extra = 1; sel.insert(j); } } if (!total) break; } return total && extra; } int main() { ios_base::sync_with_stdio(false); cin.tie(nullptr
684	#include <bits/stdc++.h> using namespace std; uint32_t solve(size_t m, size_t n, vector<uint32_t>& data) { vector<bool> used; used.resize(m); bool simple = false; uint32_t simple_score = ~0u; for (size_t i = 0; i < n; ++i) { uint32_t best = 0; for (size_t j = 0; j < m; ++j) { best = std::max(best, data[n * j + i]); } for (size_t j = 0; j < m; ++j) { if (best == data[n * j + i]) { simple = simple || used[j]; used[j] = true; } } simple_score = std::min(simple_score, best); } if (simple) { return simple_score; } uint32_t bestscore = 0; for (size_t j = 0; j + < n; ++j) { for (size_t i = j + 1; i < n; ++i) { uint32_t pair_score = 0; for (size_t k = 0; k < m; ++k) { pair_score = std::max(pair_score, std::min(data[n * k + j], data[n * k + i])); } bestscore = std::max(std::min(pair_score, simple_score), pair_score); } } return bestscore; } int main() { ios::sync_with_stdio(false); cin.tie(nullptr); size_t nn; cin >> nn; std::vector<uint32_t> data; for (size_t i = 0; i < nn; ++i) { size_t m, n; cin >> m >> n; data.resize(m * n); for (auto& x : data) { cin >> x; } cout << solve(m, n, data) << endl; } return 0; }
685	#include <bits/stdc++.h> using namespace std; using ll = long long; string to_string(string s) { return '"' + s + '"'; } string to_string(bool b) { return (b? "true" : "false"); } string to_string(char c) { string s(1, c); return "'" + s + "'"; } template <class T> string to_string(vector<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(set<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(unordered_set<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(multiset<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T1, class T2> string to_string(pair<T1, T2> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; } template <class T1, class T2> string to_string(unordered_map<T1, T2> m) { string s = "{"; bool first = true; for (auto x : m) { if (!first) s += ", "; s += "(" + to_string(x.first) + " -> " + to_string(x.second) + ")"; first = false; } s += "}"; return s; } template <class T1, class T2> string to_string(map<T
686	#include <bits/stdc++.h> using namespace std; using ll = long long; string to_string(string s) { return '"' + s + '"'; } string to_string(bool b) { return (b? "true" : "false"); } string to_string(char c) { string s(1, c); return "'" + s + "'"; } template <class T> string to_string(vector<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(set<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(unordered_set<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T> string to_string(multiset<T> v) { string s = "{"; bool first = true; for (T x : v) { if (!first) s += ", "; s += to_string(x); first = false; } s += "}"; return s; } template <class T1, class T2> string to_string(pair<T1, T2> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; } template <class T1, class T2> string to_string(unordered_map<T1, T2> m) { string s = "{"; bool first = true; for (auto x : m) { if (!first) s += ", "; s += "(" + to_string(x.first) + " -> " + to_string(x.second) + ")"; first = false; } s += "}"; return s; } template <class T1, class T2> string to_string(map<T
687	#include <bits/stdc++.h> using namespace std; int main() { int t, n, m, l, r; cin >> t; while (t--) { map<int, int> mm; cin >> n; m = n; while (m--) { cin >> l; mm[l]++; } long long sum = 0, noba = 0, ind = 1; for (int i = 0; i <= n; i++) { if (ind) { cout << sum + mm[i] << " "; if (mm[i] == 0) { while (mm[noba] == 1) { if (noba == 0) break; noba--; } if (mm[noba] <= 1) ind = 0; else { sum += i - noba; mm[i]++; mm[noba]--; } } else noba = i; } else cout << "-1 "; } cout << endl; } return 0; }
688	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 5; const int MOD = 998244353; int t, n, a[N]; long long ans[N]; int freq[N]; stack<int> st; int main() { scanf("%d", &t); while (t--) { while (!st.empty()) st.pop(); scanf("%d", &n); for (int i = 0; i <= n + 1; i++) { ans[i] = -1; freq[i] = 0; } ans[0] = freq[0]; for (int i = 0; i < n; i++) { scanf("%d", &a[i]); freq[a[i]]++; } ans[0] = freq[0]; sort(a, a + n); long long cur = 0; int j = 0; for (int i = 0; i < n; i++) { if (a[i] > i) break; while (j < n && a[j] <= i) { j++; st.push(i); } int z = st.top(); st.pop(); cur += (i - z); ans[i + 1] = cur + freq[i + 1]; } for (int i = 0; i <= n; i++) { printf("%I64d ", ans[i]); } puts(""); } return 0; }
689	#include <bits/stdc++.h> const char nl = '\n'; using namespace std; const long long INF = 1e18; const long long MOD = 1e9 + 7; void solve() { int n; cin >> n; vector<int> a(n); map<int, int> m; for (int i = 0; i < n; i++) { cin >> a[i]; m[a[i]]++; } long long sum = 0; vector<int> ans(n + 1, -1); vector<int> ex; sort(a.begin(), a.end()); for (int i = 0; i < n + 1; i++) { if (i > &&!m.count(i - 1)) { if (ex.empty()) { break; } sum += i - - ex.back(); ex.pop_back(); } while (i > && m.count(i - 1) && m[i - 1] > 1) { m[i - 1]--; ex.push_back(i - 1); } ans[i] = sum + (m.count(i)? m[i] : 0); } for (int i = 0; i < n + 1; i++) { cout << ans[i] << " "; } cout << nl; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t = 1; cin >> t; while (t--) { solve(); } return 0; }
690	#include <bits/stdc++.h> using namespace std; void solve() { int n, m, k; cin >> n >> m >> k; int a = n % m; int b = n - a; int c = n / m + 1; int d = n / m; int pos1 = 0; int pos2 = a * c; for (int z = 0; z < m; z++) { for (int i = 0; i < a; i++) { cout << c << " "; for (int j = pos1 + i * c; j < pos1 + i * c + c; j++) cout << (j % n) + << " "; cout << "\n"; } for (int i = 0; i < b; i++) { cout << d << " "; for (int j = pos2 + i * d; j < pos2 + i * d + d; j++) cout << (j % n) + << " "; cout << "\n"; } pos1 = (pos1 + a * c) % n; pos2 = (pos2 + a * c) % n; } cout << "\n"; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int tt; cin >> tt; while (tt--) { solve(); } return 0; }
691	#include <bits/stdc++.h> using namespace std; template <typename T, typename U> static inline void amn(T &x, U y) { if (y < x) x = y; } template <typename T, typename U> static inline void amx(T &x, U y) { if (x < y) x = y; } const long long MOD = 1e9 + 7; const long long INF = 1e18; const long long N = 5e5 + 5; long long top(long long x, long long y) { long long f = x / y; if (x % y) f++; return f; } bool cmp(pair<long long, long long> &a, pair<long long, long long> &b) { return a.first < b.first; } void solve() { long long n, m, x; cin >> n >> m >> x; vector<pair<long long, long long> > v; for (long long i = 1; i <= n; i++) { v.push_back({0, i}); } long long sa = top(n, m), sb = n / m; long long A = (n % m) * sa; for (long long i = 1; i <= x; i++) { for (long long j = 0; j < A; j++) { v[i].first++; } for (long long j = 0; j < A; j += sa) { cout << sa; for (long long k = j; k < j + sa; k++) { cout << " " << v[k].second; } cout << endl; } for (long long j = A; j < n; j += sb) { cout << sb; for (long long k = j; k < j + sb; k++) { cout << " " << v[k].second; } cout << endl; } sort(v.begin(), v.end(), cmp); } cout << endl; } signed main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long test_case = 1; cin >> test_case; while (test_case--) { solve(); } return 0; }
692	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") using namespace std; const long long N = 1e9; const long long MOD = 1e9 + 7; const long long inf = 2e9; const long double eps = 1e-12; const long double EPS = 1e-10; long long rx[] = {1, -1, 0, 0}; long long ry[] = {0, 0, 1, -1}; int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n, m, k; cin >> n >> m >> k; if (n % m == 0) { while (k--) { long long d = n / m; for (long long i = 0; i < d; ++i) { cout << d <<''; for (long long j = i * d; j < (i + 1) * d; ++j) cout << j + <<''; cout << '\n'; } } continue; } vector<long long> v(n), cnt(n); long long g1 = n / m, g2 = n / m + 1; long long k1 = (m - n % m) * g1; for (long long i = 0; i < n; ++i) { v[i] = i; if (i < k1) cnt[i] = 0; else cnt[i] = 1; } while (k--) { bool ok = 1; for (long long i = 0; i < n; ++i) { if (i == k1) { ok = 0; } if (ok && i % g1 == 0) cout << '\n' << g1 <<''; if (!ok && (i - k1) % g2 == 0) cout << '\n' << g2 <<''; cout << v[i] + <<''; } cout << '\n'; vector<pair<long long, long long> > a; for (long long i = 0; i < n; ++i) a.push_back({cnt[i], i}); sort(a.rbegin(), a.
693	#include <bits/stdc++.h> using namespace std; signed main() { int t; scanf("%d", &t); while (t--) { int n, k, m; scanf("%d %d %d", &n, &m, &k); vector<int> ar(n + 1, 0); deque<int> q; for (int i = 1; i <= n; i++) { ar[i] = i; q.push_back(i); } if (n % m == 0) { for (int i = 1; i <= k; i++) { int block = n / m, cnt = 0; for (int j = 1; j <= n; j++) { if (cnt == 0) { printf("%d ", block); } printf("%d ", ar[j]); cnt++; if (cnt == block) { printf("\n"); cnt = 0; } } } } else { for (int i = 1; i <= k; i++) { int block = n / m, cnt = 0, extra = n % m, j = 1; for (j = 1; j <= n; j++) { if (extra == 0) break; if (cnt == 0) { printf("%d ", block + 1); } printf("%d ", ar[j]); cnt++; if (cnt == block + 1) { extra--; cnt = 0; printf("\n"); } } for (; j <= n; j++) { if (cnt == 0) { printf("%d ", block); } printf("%d ", ar[j]); cnt++; if (cnt == block) { printf("\n"); cnt = 0; } } for (int r = 1; r <= n % m; r++) { for (int j = 0; j < block; j++) { int x = q.back(); q.pop_back(); q.push_front(x); } } int idx = 1; for (auto p : q) { ar[idx++] = p; } } } printf("\n"); } }
694	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5; long long calc(long long x) { return x * (x + 1) / 2; } int mex(set<int> &st) { int ret = 0; while (st.count(ret)) ret++; return ret; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); int tt; cin >> tt; while (tt--) { int n, m, k; cin >> n >> m >> k; int md = n % m; vector<vector<bool> > a(k, vector<bool>(n + 1, false)); int cur = 1; for (int i = 0; i < k; i++) { for (int j = 0; j < n - (n % m) * (n / m + 1); j++) { a[i][cur] = 1; cur++; if (cur == n + 1) cur = 1; } } vector<int> v, v2; for (int i = 0; i < k; i++) { v.clear(); v2.clear(); for (int j = 1; j <= n; j++) { if (a[i][j] == 0) { v2.push_back(j); } else v.push_back(j); } for (int i = 0; i < (int)v.size(); i += n / m) { cout << n / m <<''; for (int j = i; j < n / m; j++) cout << v[j] <<''; cout << '\n'; } for (int i = 0; i < (int)v2.size(); i += +n / m + 1) { cout << n / m + <<''; for (int j = i; j < i + n / m + 1; j++) cout << v2[j] <<''; cout << '\n'; } } cout << '\n'; } return 0; }
695	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); int t; cin >> t; while (t--) { int n, m, k; cin >> n >> m >> k; int md = n % m; int flr = n / m, cl = (n + m - 1) / m; int ix = 0; for (int i = 0; i < k; i++) { int cur = ix; for (int j = 0; j < md; j++) { cout << cl <<''; for (int l = 0; l < cl; l++) { cout << cur + <<''; cur += 1; cur %= n; } cout << '\n'; } for (int j = 0; j < flr - md; j++) { cout << flr <<''; for (int l = 0; l < flr; l++) { cout << cur + <<''; cur += 1; cur %= n; } cout << '\n'; } ix += md * cl; ix %= n; } cout << '\n'; } return 0; }
696	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 7; const int MOD = 1e9 + 7; int n, k, t[N]; int fa[N], w[N]; void init(int n) { for (int i = 1; i <= n; i++) fa[i] = i, w[i] = t[i]; } int find(int x) { return x == fa[x]? x : fa[x] = find(fa[x]); } void merge(int x, int y) { int fx = find(x), fy = find(y); if (fx!= fy) { w[fy] = min(w[fy], w[fx]); fa[fx] = fy; } } void solve() { cin >> n >> k; map<int, vector<pair<int, int>>> mpx, mpy; for (int i = 1, x, y; i <= n; i++) { cin >> x >> y >> t[i]; mpx[x].push_back({y, i}); mpy[y].push_back({x, i}); } init(n); for (auto mp : {mpx, mpy}) { for (auto tt : mp) { vector<pair<int, int>> ve = tt.second; sort(ve.begin(), ve.end()); for (int i = 1; i < ve.size(); i++) { if (ve[i].first - ve[i - 1].first <= k) { merge(ve[i].second, ve[i - 1].second); } } } } set<int> se; vector<int> ve; for (int i = 1; i <= n; i++) { se.insert(find(i)); } for (auto i : se) { ve.push_back(w[i]); } int ans = ve.size() - 1; sort(ve.begin(), ve.end()); for (int i = 0; i < ve.size(); i++) { ans = min(ans, max(ve[i], (int)ve.size() - - i)); } cout << ans << "\n"; } int main() { ios::sync_with_stdio(false); int T = 1; cin >> T;
697	#include <bits/stdc++.h> using namespace std; const double PI = acos(-1); const int INF = INT_MAX; const long long LLINF = 1000000000000000000LL; const long long MAX = 200005; const long long MOD = 998244353; struct DSU { int N; int parent[MAX], member[MAX]; DSU(int n) { N = n; for (int i = 0; i < N; i++) { parent[i] = -1; member[i] = 1; } } int findRoot(int n) { if (parent[n] == -1) { return n; } return parent[n] = findRoot(parent[n]); } void makeUnion(int r1, int r2) { r1 = findRoot(r1); r2 = findRoot(r2); if (r1 == r2) { return; } if (member[r1] < member[r2]) { swap(r1, r2); } parent[r2] = r1; member[r1] += member[r2]; } }; struct mine { long long x, y, n; mine() { x = y = n = 0; } mine(long long _x, long long _y, long long _n) : x(_x), y(_y), n(_n){}; }; bool cmpx(mine& left, mine& right) { if (left.x == right.x) { return left.y < right.y; } return left.x < right.x; } bool cmpy(mine& left, mine& right) { if (left.y == right.y) { return left.x < right.x; } return left.y < right.y; } void solve() { long long N, K; cin >> N >> K; vector<mine> A(N); vector<long long> T(N); DSU U(N); for (int i = 0; i < N; i++) { cin >> A[i].x >> A[i].y >> T[i]; A[i].n = i; } sort(A.begin(), A.end(), cmpx); for (int i = 0; i < N - 1; i++) { if
698	#include <bits/stdc++.h> using namespace std; int k; map<int, vector<int>> mx; map<int, vector<int>> my; map<pair<int, int>, bool> used; map<pair<int, int>, int> time_of; int dfs(int x, int y) { used[{x, y}] = true; int _min_ = time_of[{x, y}]; auto i = lower_bound(mx[x].begin(), mx[x].end(), y); auto j = lower_bound(my[y].begin(), my[y].end(), x); if (++i!= mx[x].end() &&!used[{x, *i}] && abs(*i - y) <= k) { _min_ = min(_min_, dfs(x, *i)); } --i; if (i!= mx[x].begin() &&!used[{x, *(--i)}] && abs(*i - y) <= k) { _min_ = min(_min_, dfs(x, *i)); } if (++j!= my[y].end() &&!used[{*j, y}] && abs(*j - x) <= k) { _min_ = min(_min_, dfs(*j, y)); } --j; if (j!= my[y].begin() &&!used[{*(--j), y}] && abs(*j - x) <= k) { _min_ = min(_min_, dfs(*j, y)); } return _min_; } void solve() { mx.clear(); my.clear(); used.clear(); int n; cin >> n >> k; vector<pair<int, int>> a(n); int x, y, timer; for (int i = 0; i < n; ++i) { cin >> x >> y >> timer; a[i] = {x, y}; time_of[{x, y}] = timer; mx[x].push_back(y); my[y].push_back(x); } vector<int> res; for (auto now : mx) { sort(mx[now.first].begin(), mx[now.first].end()); } for (auto now : my) { sort(my[now.first].
699	#include <bits/stdc++.h> using namespace std; long long ne[1000005], pre[1000005], ne300[1000005], pre300[1000005]; void change(long long x) { long long k = x; for (long long i = 1; i < 150; i++) k = pre[k]; for (long long i = 1, k2 = ne[x]; i < 150; i++) { ne300[k] = k2; pre300[k2] = k; k = ne[k]; k2 = ne[k2]; } return; } int main() { long long n, q; scanf("%lld%lld", &n, &q); for (long long i = 1; i <= n; i++) { scanf("%lld", &ne[i]); pre[ne[i]] = i; } for (long long i = 1; i <= n; i++) for (long long j = 1, k = i; j <= 150; j++) k = ne[k], ne300[i] = k, pre300[k] = i; while (q--) { long long op, x, y; scanf("%lld%lld%lld", &op, &x, &y); if (op == 1) { swap(ne[x], ne[y]); pre[ne[y]] = y, pre[ne[x]] = x; change(x), change(y); } else { while (y >= 150) x = ne300[x], y -= 150; while (y--) x = ne[x]; printf("%lld\n", x); } } return 0; }
700	#include <bits/stdc++.h> using namespace std; int i, j, k, n, m, t, x, y, z; int l[100500], r[100500], l300[100500], r300[100500], k2; void work(int x) { for (i = 1, k = y; i < 150; i++) k = l[k]; k2 = r[y]; for (i = 1; i <= 150; i++) { r300[k] = k2; l300[k2] = k; k = r[k]; k2 = r[k2]; } } int main() { ios::sync_with_stdio(0); cin >> n >> t; for (i = 1; i <= n; i++) cin >> r[i], l[r[i]] = i; for (i = 1; i <= n; i++) { for (j = 1, k = i; j <= 150; j++) k = r[k]; r300[i] = k; l300[k] = i; } while (t--) { cin >> x >> y >> z; if (x == 1) { swap(r[y], r[z]); l[r[y]] = y; l[r[z]] = z; work(y); work(z); } else { while (z > 150) y = r300[y], z -= 150; while (z) y = r[y], z--; cout << y << '\n'; } } }
701	#include <bits/stdc++.h> using namespace std; int i, j, k, n, m, t, x, y, z; int l[100500], r[100500], l300[100500], r300[100500], k2; void work(int x) { for (i = 1, k = y; i < 150; i++) k = l[k]; k2 = r[x]; for (i = 1; i <= 150; i++) { r300[k] = k2; l300[k2] = k; k = r[k]; k2 = r[k2]; } } int main() { ios::sync_with_stdio(0); cin >> n >> t; for (i = 1; i <= n; i++) cin >> r[i], l[r[i]] = i; for (i = 1; i <= n; i++) { for (j = 1, k = i; j <= 150; j++) k = r[k]; r300[i] = k; l300[k] = i; } while (t--) { cin >> x >> y >> z; if (x == 1) { swap(r[y], r[z]); l[r[y]] = y; l[r[z]] = z; work(y); work(z); } else { while (z > 150) y = r300[y], z -= 150; while (z) y = r[y], z--; cout << y << '\n'; } } }
702	#include <bits/stdc++.h> using namespace std; template <class T> void minn(T& a, T b) { if (a > b) a = b; } template <class T> void maxx(T& a, T b) { if (a < b) a = b; } void debug() { return; } template <class H, class... T> void debug(H a, T... b) { cerr << a; debug(b...); } void is() { return; } template <class H, class... T> void is(H& a, T&... b) { cin >> a; is(b...); } void os() { return; } template <class H, class... T> void os(H a, T... b) { cout << a; os(b...); } const int mod = 1e9 + 7; const int N = 2e5 + 5; int n, q; int nx[N], pr[N], nx100[N]; void sw(int x, int y) { swap(nx[x], nx[y]); pr[nx[x]] = x; pr[nx[y]] = y; int k = x; for (int i = 1; i <= 100; i++) k = pr[k]; for (int i = 1; i <= 100; i++) { nx100[k] = nx[x]; x = nx[x]; k = nx[k]; } k = y; for (int i = 1; i <= 100; i++) k = pr[k]; for (int i = 1; i <= 100; i++) { nx100[k] = nx[y]; y = nx[y]; k = nx[k]; } } void solve() { is(n, q); for (int i = 1; i <= n; i++) { is(nx[i]); pr[nx[i]] = i; } for (int i = 1; i <= n; i++) { int k = i; for (int j = 1; j <= 100; j++) { k = nx[k]; } nx100[i] = k; } while (q--) { int t, x, y; is(t, x, y); if (t == 2) { int k = x; while (y
703	#include <bits/stdc++.h> using namespace std; using ll = long long; using ull = unsigned long long; using ld = long double; template <typename T1, typename T2> inline void chkmin(T1& x, const T2& y) { if (y < x) x = y; } template <typename T1, typename T2> inline void chkmax(T1& x, const T2& y) { if (x < y) x = y; } const int N = 1e5 + 10; const int B = 300; struct Node { int next_node; int prev_node; int jump; }; int n, q; Node nodes[N]; int find_jump(int v) { for (int i = 0; i < B; ++i) { v = nodes[v].next_node; } return v; } void build() { for (int i = 0; i < n; ++i) { nodes[i].jump = find_jump(i); } } void print() { for (int i = 0; i < n; ++i) { cerr << i << " " << nodes[i].next_node << " " << nodes[i].prev_node << endl; } } void relax_jumps(int v) { int jump = v; for (int i = 0; i < B; ++i) { v = nodes[v].prev_node; } for (int i = 0; i < B; ++i) { nodes[v].jump = jump; v = nodes[v].next_node; jump = nodes[jump].next_node; } } void upd(int i, int j) { int next_i = nodes[i].next_node; int next_j = nodes[j].next_node; nodes[i].next_node = next_j; nodes[j].next_node = next_i; nodes[next_i].prev_node = j; nodes[next_j].prev_node = i; relax_jumps(i); relax_jumps(j); } int getAns(int v, int k) { while (k) { if (k >= B) { v = nodes[v].jump; k -= B; } else { v = nodes[v].next
704	#include <bits/stdc++.h> using namespace std; long long ne[1000005], pre[1000005], ne300[1000005], pre300[1000005]; void change(long long x) { long long k = x; for (long long i = 1; i < 150; i++) k = pre[k]; for (long long i = 1, k2 = ne[x]; i < 150; i++) { ne300[k] = k2; pre300[k2] = k; k = ne[k]; k2 = ne[k2]; } return; } int main() { long long n, q; scanf("%lld%lld", &n, &q); for (long long i = 1; i <= n; i++) { scanf("%lld", &ne[i]); pre[ne[i]] = i; } for (long long i = 1; i <= n; i++) for (long long j = 1, k = i; j <= 150; j++) k = ne[k], ne300[i] = k, pre300[k] = i; while (q--) { long long op, x, y; scanf("%lld%lld%lld", &op, &x, &y); if (op == 1) { swap(ne[x], ne[y]); pre[ne[y]] = y, pre[ne[x]] = x; change(x), change(y); } else { while (y >= 150) x = ne300[x], y -= 150; while (y--) x = ne[x]; printf("%lld\n", x); } } return 0; }
705	#include <bits/stdc++.h> using namespace std; const int jump = 300; const int MX = 1e5 + 5; int p[MX], ip[MX], nxt[MX]; void overwrite(int pos, int finish, int turns) { if (turns == 0) { return; } nxt[pos] = finish; overwrite(ip[pos], ip[finish], turns - 1); } void update(int pos) { int finish = pos; for (int i = 0; i < jump; i++) { finish = p[finish]; } overwrite(pos, finish, jump); } void runswap(int x, int y) { ip[p[x]] = y; ip[p[y]] = x; swap(p[x], p[y]); update(p[x]); update(p[y]); } int main() { int n, q; cin >> n >> q; for (int i = 0; i < n; i++) { cin >> p[i]; --p[i]; ip[p[i]] = i; } for (int i = 0; i < n; i++) { runswap(i, i); } for (int j = 0; j < q; j++) { int v; cin >> v; if (v == 1) { int x, y; cin >> x >> y; --x; --y; runswap(x, y); } else { int i, k; cin >> i >> k; --i; while (k >= jump) { k -= jump; i = nxt[i]; } while (k > 0) { i = p[i]; k--; } cout << i + << endl; } } return 0; }
706	#include <bits/stdc++.h> using namespace std; int main() { long long t; cin >> t; while (t--) { string s; cin >> s; long long n = s.size(); long long count = 0; for (long long i = 0; i < n; i++) { if (s[i] == 'N') { count++; } } if (count == 1) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
707	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int c = 0; string s; cin >> s; for (int i = 0; i < s.length(); i++) { if (s[i] == 'N') c++; } if (c > 1) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
708	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int c = 0; string s; cin >> s; for (int i = 0; i < s.length(); i++) { if (s[i]!= 'N') c++; } if (c > 1) cout << "YES" << endl; else cout << "NO" << endl; } return 0; }
709	#include <bits/stdc++.h> using namespace std; const long long int mod = 998244353; const long long int inf = 1e18; const long long int N = 5000; long long int factorialNumInverse[N + 1]; long long int naturalNumInverse[N + 1]; long long int fact[N + 1]; void InverseofNumber(long long int p) { naturalNumInverse[0] = naturalNumInverse[1] = 1; for (long long int i = 2; i <= N; i++) naturalNumInverse[i] = naturalNumInverse[p % i] * (p - p / i) % p; } void InverseofFactorial(long long int p) { factorialNumInverse[0] = factorialNumInverse[1] = 1; for (long long int i = 2; i <= N; i++) factorialNumInverse[i] = (naturalNumInverse[i] * factorialNumInverse[i - 1]) % p; } void factorial(long long int p) { fact[0] = 1; for (long long int i = 1; i <= N; i++) { fact[i] = (fact[i - 1] * i) % p; } } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long int p = mod; InverseofNumber(p); InverseofFactorial(p); factorial(p); long long int n, k; string s; cin >> n >> k >> s; long long int l = 0, r = 0; vector<long long int> a; for (long long int i = 0; i < n; i++) { if (s[i] == '1') a.push_back(i); } if (a.size() < k || k == 0) { cout << << "\n"; return 0; } r = (a.size() == k? n - : a[k] - 1); long long int ans = (fact[r - l + 1] * (factorialNumInverse[k] * factorialNumInverse[r - l + - k]) % mod) % mod; long long int pl = l, pr = r; bool done = 0
710	#include <bits/stdc++.h> using namespace std; const int N = 5005; const int mod = 998244353; void bmod(int &x) { x -= mod, x += x >> & mod; } int norm(int x) { return x <? x + mod : x; } void Add(int &x, int y) { x += y - mod, x += x >> & mod; } void Sub(int &x, int y) { x -= y, x += x >> & mod; } int inv(int x, int k = mod - 2) { int r = 1; while (k) { if (k & 1) r = (long long)x * r % mod; x = (long long)x * x % mod; k >>= 1; } return r; } const int Flen = N; int fact[Flen], infact[Flen]; void preF(int n = Flen - 1) { fact[0] = 1; for (int i = 1; i <= n; ++i) fact[i] = (long long)fact[i - 1] * i % mod; infact[n] = inv(fact[n]); for (int i = n; i; --i) infact[i - 1] = (long long)infact[i] * i % mod; } int C(int x, int y) { return y < || x < y? : (long long)fact[x] * infact[y] % mod * infact[x - y] % mod; } int n, m; char str[N]; int f[N], s[N]; int main() { preF(); scanf("%d%d%s", &n, &m, str + 1); if (!m) return puts("1"), 0; f[0] = 1; for (int i = 1; i <= n; ++i) { s[i] = s[i - 1] + (str[i] -= 48); } for (int i = 1, j = 0; i <= n; ++i) { f[i] = f[i - 1]; if (str[i]) { while (j < i && s[i] - s[j] > m) ++j; if (
711	#include <bits/stdc++.h> #pragma GCC optimize("O3") #pragma GCC target("popcnt") using namespace std; mt19937 bruh(chrono::steady_clock::now().time_since_epoch().count()); const long long N = 1e6 + 100; const long long mod = 998244353; const long long big = 1e17; long long t, n, m; string a[N]; pair<long long, long long> c[N]; int x[N], d[N], e[N]; int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> t; while (t--) { cin >> n >> m; for (int i = 0; i < n; i++) cin >> x[i]; for (int i = 0; i < n; i++) cin >> a[i]; long long ans = -1e10; for (int j = 0; j < (1 << n); j++) { for (int i = 0; i < m; i++) c[i] = make_pair(0, i), d[i] = 0; long long sum = 0; for (int i = 0; i < n; i++) { if ((1 << i) & j) { sum += x[i]; for (int k = 0; k < m; k++) { if (a[i][k] == '1') c[k].first--; } } else { sum -= x[i]; for (int k = 0; k < m; k++) if (a[i][k] == '1') c[k].first++; } } sort(c, c + m); for (int i = 0; i < m; i++) d[c[i].second] = i + 1, sum = sum + c[i].first * (i + 1); bool t = 1; for (int i = 0; i < n; i++) { long long sum2 = 0; for (int k = 0; k < m; k++) if (a[i][k]) sum2 += d[k]; if (((1 << i) & j) && sum2 > x
712	#include <bits/stdc++.h> using namespace std; const int MAX = 1e4 + 10; const int MOD = 998244353; int x[11], p[MAX], q[MAX], ret[MAX]; char s[11][MAX]; int main() { int T; cin >> T; while (T--) { int n, m; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", x + i); for (int i = 0; i < n; i++) scanf("%s", s[i] + 1); long long ans = 0; for (int i = 0; i < (1 << n); i++) { for (int j = 1; j <= m; j++) p[j] = 0; for (int j = 1; j <= m; j++) q[j] = j; long long sum = 0; for (int j = 0; j < n; j++) { int tag = ((1 << j) & i)? : -1; sum -= tag * x[j]; for (int k = 1; k <= m; k++) { if (s[j][k] == '0') continue; p[k] += tag; } } sort(q + 1, q + m + 1, [](int x, int y) { return p[x] < p[y]; }); for (int j = 1; j <= m; j++) sum += p[q[j]] * j; if (sum > ans) { ans = sum; for (int j = 1; j <= m; j++) ret[q[j]] = j; } } for (int i = 1; i <= m; i++) printf("%d ", ret[i]); cout << endl; } return 0; }
713	#include <bits/stdc++.h> using namespace std; int n, m, a[10], c[1005]; char b[10][1005]; vector<int> g[10]; int id[1005]; bool cmp(int i1, int i2) { return c[i1] < c[i2]; } int p[1005], p2[1005]; int main() { int t; scanf("%d", &t); while (t--) { scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) { scanf("%d", &a[i]); } for (int i = 0; i < n; i++) { scanf("\n%s", b[i] + 1); g[i].clear(); for (int j = 1; j <= m; j++) { if (b[i][j] == '1') { g[i].push_back(j); } } } long long ans = 0; for (int i = 1; i <= m; i++) id[i] = i; for (int i = 0; i < (1 << n); i++) { memset(c, 0, sizeof(c)); for (int j = 0; j < n; j++) { for (int k : g[j]) { if (i & (1 << j)) c[k]++; else c[k]--; } } sort(id + 1, id + + m, cmp); for (int j = 1; j <= m; j++) { p[id[j]] = j; } long long sum = 0; for (int j = 0; j < n; j++) { int h = 0; for (int k : g[j]) { h += p[k]; } sum += abs(a[i] - h); } if (sum >= ans) { ans = sum; for (int j = 1; j <= m; j++) { p2[j] = p[j]; } } } for (int i = 1; i <= m; i++) { printf("%d ", p2[i]); } printf("\n"); } return 0; }
714	#include <bits/stdc++.h> using namespace std; int e[11]; vector<int> score(10010); vector<int> ans; string s[11]; void solve() { int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) cin >> e[i]; for (int i = 1; i <= n; i++) cin >> s[i]; int up = << n; int mx = 0; vector<pair<int, int> > ev(m + 1); for (int i = 0; i < up; i++) { for (int j = 1; j <= m; j++) { ev[j].first = 0; ev[j].second = j; } for (int j = 1; j <= n; j++) for (int k = 1; k <= m; k++) { if (s[j][k - 1] == '1') ev[k].first += (i & << j - 1)? : -1; } int sum = 0; for (int j = 1; j <= n; j++) sum += (i & << j - 1)? -e[j] : e[j]; sort(ev.begin() + 1, ev.end()); for (int j = 1; j <= m; j++) { score[ev[j].second] = j; sum += j * ev[j].first; } if (mx < sum) { mx = sum; ans = score; } } for (int i = 1; i <= m; i++) cout << ans[i] << " \n"[i == m]; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); int t; cin >> t; while (t--) solve(); return 0; }
715	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 10, M = * N, mod = 998244353; int first[N]; string s[N]; int ans[N]; void solve() { int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) cin >> first[i]; for (int i = 1; i <= m; i++) cin >> s[i], s[i] = " " + s[i]; long long res = 0, tmp; for (int k = 0; k < (1 << n); k++) { tmp = 0; for (int i = 0; i < n; i++) { int r = 1; if (k >> i & 1) r = -1; tmp += r * first[i + 1]; } vector<pair<int, int> > num; for (int i = 1; i <= m; i++) { int tmp = 0; for (int j = 0; j < n; j++) { int r = -1; if (k >> j & 1) r = 1; tmp += (s[j + 1][i] - '0') * r; } num.push_back({tmp, i}); } sort((num).begin(), (num).end()); for (int i = 1; i <= m; i++) tmp += num[i - 1].first * i; if (res < tmp) { res = tmp; for (int i = 0; i < m; i++) { auto &[val, id] = num[i]; ans[id] = i + 1; } } } for (int i = 1; i <= m; i++) cout << ans[i] <<''; cout << '\n'; } int main() { ios::sync_with_stdio(0), cin.tie(0); cout.precision(2), cout.setf(ios::fixed); int t; cin >> t; while (t--) solve(); return 0; }
716	#include <bits/stdc++.h> using namespace std; void read(vector<int64_t> &a); void read(vector<string> &a); void read(vector<vector<int64_t>> &a); void read(vector<pair<int64_t, int64_t>> &a); void solve() { int64_t n, m; cin >> n >> m; vector<int64_t> exp(n); read(exp); vector<string> mat(n); read(mat); int64_t best = 0; vector<int64_t> ret; for (int64_t x = 0; x < (1 << n); x++) { string b = std::bitset<32>(x).to_string(); reverse(b.begin(), b.end()); vector<pair<int64_t, int64_t>> order(m); for (int64_t i = 0; i < m; i++) { int64_t temp = 0; for (int64_t j = 0; j < n; j++) { if (b[j] == '1') temp += (mat[j][i] - '0'); else temp -= (mat[j][i] - '0'); } order[i] = {temp, i}; } sort(order.begin(), order.end()); reverse(order.begin(), order.end()); int64_t ans = 0; for (int64_t i = 0; i < n; i++) { if (b[i] == '0') ans += exp[i]; else ans -= exp[i]; } int64_t tog = m; vector<int64_t> haha(m); for (auto x : order) { ans += (x.first) * (tog); haha[x.second] = tog; tog--; } if (ans > best) { best = ans; ret = haha; } } for (int64_t i : ret) cout << i << " "; cout << endl; } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int64_t t = 1; cin >> t; for (int64_t tt = 1; tt <= t
717	#include <bits/stdc++.h> using namespace std; const int maxn = 1e4 + 9; const long long MOD = 1e9 + 7; const int mod = 998244353; inline long long qpow(long long b, long long e, long long m) { long long a = 1; for (; e; e >>= 1, b = b * b % m) if (e & 1) a = a * b % m; return a; } long long exgcd(long long a, long long b, long long &x, long long &y) { if (b == 0) { x = 1, y = 0; return a; } long long d = exgcd(b, a % b, x, y); long long z = x; x = y, y = z - y * (a / b); return d; } int x[19]; char s[19][maxn]; int ans[maxn]; pair<int, int> val[maxn]; bool cmp(pair<int, int> A, pair<int, int> B) { return A.second < B.second; } int main() { int _; scanf("%d", &_); while (_--) { int n, m; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", &x[i]); for (int i = 0; i < n; i++) { scanf("%s", s[i]); } int v = 0; for (int i = 0; i < (1 << n); i++) { int res = 0; for (int j = 0; j < n; j++) { if (i >> j & 1) res += x[j]; else res -= x[j]; } for (int k = 0; k < m; k++) { val[k].first = 0; val[k].second = k; } for (int j = 0; j < n; j++) { for (int k = 0; k < m; k++) { if (res[j][k] == '1') { if (i >> j & 1) val[k].first--; else val[k].first++; } } } sort(val, val + m);
718	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m; cin >> n >> m; int x[n]; for (int i = 0; i < n; i++) cin >> x[i]; string s[n]; for (int i = 0; i < n; i++) cin >> s[i]; int ans[m], score = 0; for (int i = 0; i < (1 << n); i++) { vector<pair<int, int> > vt; for (int j = 0; j < m; j++) { int cnt = 0; for (int k = 0; k < n; k++) { if (s[k][j] == '1') { if (i & (1 << k)) cnt++; else cnt--; } } vt.push_back(make_pair(cnt, j)); } sort(vt.begin(), vt.end()); int temp[m], curr_score = 0; for (int j = 0; j < m; j++) { int idx = vt[j].second; temp[idx] = j + 1; } for (int j = 0; j < n; j++) { int sum = 0; for (int k = 0; k < m; k++) sum += (s[j][k] - '0') * temp[k]; curr_score += abs(sum - x[j]); } if (curr_score > score) { score = curr_score; for (int j = 0; j < m; j++) ans[j] = temp[j]; } } for (int i = 0; i < m; i++) cout << ans[i] <<''; cout << '\n'; } }
719	#include <bits/stdc++.h> using namespace std; const int MAXN = + 5; const int MAXM = 1e4 + 5; const long long linf = 0x3f3f3f3f3f3f3f3f; int n, m; int a[MAXN]; char s[MAXN][MAXM]; int p[MAXN]; inline long long get_res(int mask) { long long has = 0; static int coef[MAXM]; memset(coef, 0, (m + 1) << 2); for (int i = 1; i <= n; ++i) { int t = (((mask) >> (i - 1)) & 1)? : -1; has += -t * a[i]; for (int j = 1; j <= m; ++j) if (s[i][j] == '1') coef[j] += t; } static int id[MAXN]; for (int i = 1; i <= m; ++i) id[i] = i; sort(id + 1, id + m + 1, [](int x, int y) { return coef[x] < coef[y]; }); for (int i = 1; i <= m; ++i) p[id[i]] = i; for (int i = 1; i <= m; ++i) has += coef[i] * p[i]; return has; } void solve(void) { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); int all = (1 << n) - 1; long long ans = -linf; int ansmask = -1; for (int mask = 0; mask <= all; ++mask) { long long cur = get_res(mask); if (cur > ans) ans = cur, ansmask = mask; } get_res(ansmask); for (int i = 1; i <= m; ++i) printf("%d ", p[i]); printf("\n"); } int main(void) { int T; scanf("%d", &T); while (T--) solve(); return
720	#include <bits/stdc++.h> using namespace std; const int MAXN = + 5; const int MAXM = 1e4 + 5; const long long linf = 0x3f3f3f3f3f3f3f3f; int n, m; int a[MAXN]; char s[MAXN][MAXM]; int p[MAXM]; inline long long get_res(int mask) { long long has = 0; static int coef[MAXM]; memset(coef, 0, (m + 1) << 2); for (int i = 1; i <= n; ++i) { int t = (((mask) >> (i - 1)) & 1)? : -1; has += -t * a[i]; for (int j = 1; j <= m; ++j) if (s[i][j] == '1') coef[j] += t; } static int id[MAXN]; for (int i = 1; i <= m; ++i) id[i] = i; sort(id + 1, id + m + 1, [](int x, int y) { return coef[x] < coef[y]; }); for (int i = 1; i <= m; ++i) p[id[i]] = i; for (int i = 1; i <= m; ++i) has += coef[i] * p[i]; return has; } void solve(void) { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); int all = (1 << n) - 1; long long ans = -linf; int ansmask = -1; for (int mask = 0; mask <= all; ++mask) { long long cur = get_res(mask); if (cur > ans) ans = cur, ansmask = mask; } get_res(ansmask); for (int i = 1; i <= m; ++i) printf("%d ", p[i]); printf("\n"); } int main(void) { int T; scanf("%d", &T); while (T--) solve(); return
721	#include <bits/stdc++.h> std::mt19937 rng( (unsigned int)std::chrono::steady_clock::now().time_since_epoch().count()); using namespace std; void solve(int ttt) { long long int n, m; cin >> n >> m; vector<long long int> x(n); for (long long int i = 0; i < n; i++) cin >> x[i]; vector<vector<int> > a(n, vector<int>(m)); for (long long int i = 0; i < n; i++) { string s; cin >> s; for (long long int j = 0; j < m; j++) { if (s[j] == '1') a[i][j] = 1; else a[i][j] = 0; } } long long int res = LLONG_MIN; vector<long long int> perm; for (int msk = 0; msk < (1 << n); msk++) { vector<int> coeff(m, 0); long long int curVal = 0; for (long long int i = 0; i < n; i++) { if (msk & (1 << i)) { curVal += x[i]; for (long long int j = 0; j < m; j++) { if (a[i][j]) coeff[j]++; } } else { curVal -= x[i]; for (long long int j = 0; j < m; j++) { if (a[i][j]) coeff[j]--; } } } vector<int> ind(m); iota(ind.begin(), ind.end(), 0); sort(ind.begin(), ind.end(), [&](int i, int j) { return coeff[i] < coeff[j]; }); long long int c = 1; for (auto i : ind) { curVal += c * coeff[i]; c++; } if (res < curVal) { res = curVal; vector<long long int> tmp(m); for (long long int i = 0; i < m; i++) { tmp[ind[i]] = i + 1; } swap(perm, tmp); } } for (long long int i = 0; i < m; i++) { c
722	#include <bits/stdc++.h> using namespace std; const int N = 10, M = 1e4 + 10; int n, m, first[N], s[M][N], coef[M], ord[M], res[M]; void solve() { cin >> n >> m; for (int i = 0; i < n; i++) cin >> first[i]; for (int i = 0; i < n; i++) { string b; cin >> b; for (int j = 0; j < m; j++) s[j + 1][i] = b[j] - '0'; } int ans = 0; for (int i = 0; i < << n; i++) { int sum = 0; for (int j = 0; j < n; j++) { if (i >> j & 1) sum += first[j]; else sum -= first[j]; } for (int j = 1; j <= m; j++) { coef[j] = 0; for (int k = 0; k < n; k++) { if (s[j][k]) coef[j] += (i >> k & 1)? -1 : 1; } ord[j] = j; } sort(ord + 1, ord + m + 1, [&](int first, int second) { return coef[first] < coef[second]; }); for (int j = 1; j <= m; j++) sum += j * coef[ord[j]]; if (ans < sum) { for (int j = 1; j <= m; j++) res[ord[j]] = j; ans = sum; } } for (int i = 1; i <= m; i++) cout << res[i] << " "; cout << endl; return; } int main() { int t; for (cin >> t; t--; solve()) ; return 0; }
723	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; vector<long long> a(n); for (int i = 0, ggdem = n; i < ggdem; ++i) cin >> a[i]; vector<string> s(n); for (int i = 0, ggdem = n; i < ggdem; ++i) cin >> s[i]; long long maxi = 0; vector<long long> res(m); for (int i = 0, ggdem = (1ll << n); i < ggdem; ++i) { vector<pair<long long, long long>> c(m); for (int j = 0, ggdem = n; j < ggdem; ++j) { long long p = 1; if (i & (1ll << j)) p = -1; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) { if (s[j][ii] == '1') c[ii].first += p; } } for (int ii = 0, ggdem = m; ii < ggdem; ++ii) c[ii].second = ii; sort(c.begin(), c.end()); long long val = 0; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) val += (ii + 1) * c[ii].first; for (int j = 0, ggdem = n; j < ggdem; ++j) { if (i & (1ll << j)) val += a[j]; else val -= a[j]; } if (val > maxi) { maxi = val; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) res[c[ii].second] = ii; } } for (auto i : res) cout << i + << " "; cout << "\n"; } return 0; }
724	#include <bits/stdc++.h> using namespace std; int main() { int t; scanf("%d", &t); while (t--) { static int xx[10], ans[10000]; static char s[10][10000 + 1]; int n, m, ansv; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", &xx[i]); for (int i = 0; i < n; i++) scanf("%s", s[i]); ansv = 0; memset(ans, 0, m * sizeof *ans); for (int b = 0; b < << n; b++) { static int kk[10000]; int sum = 0, cnt; vector<int> ii(m); for (int i = 0; i < n; i++) if (b >> i & 1) sum += xx[i]; else sum -= xx[i]; for (int h = 0; h < m; h++) { int k = 0; for (int i = 0; i < n; i++) if (s[i][h] == '1') { if (b >> i & 1) k--; else k++; } kk[h] = k, ii[h] = h; } sort(ii.begin(), ii.end(), [&](int i, int j) { return kk[i] < kk[j]; }); cnt = 1; for (int h : ii) sum += kk[h] * cnt++; if (sum > ansv) { ansv = sum; cnt = 1; for (int h : ii) { ans[h] = cnt++; } } } for (int h = 0; h < m; h++) printf("%d ", ans[h]); printf("\n"); } return 0; }
725	#include <bits/stdc++.h> using namespace std; constexpr long long int MOD = 998244353; constexpr double EPS = 1e-8; long long int N, M, K, T, H, W, L, R; void Solve() { cin >> N >> M; vector<int> v(N); for (int i = 0; i < N; i++) { cin >> v[i]; } vector<string> s(N); for (auto& i : s) cin >> i; int score = 0; vector<int> ans(M); for (int i = 0; i < << N; i++) { vector<int> sum(N); vector<int> point(M); int csum = 0; vector<pair<int, int>> vp; for (int j = 0; j < M; j++) { int n = 0; for (int k = 0; k < N; k++) { if (s[k][j] == '1') { if (i >> k & 1) { n++; } else { n--; } } } vp.push_back({n, j}); } sort(vp.begin(), vp.end()); for (int j = 0; j < vp.size(); j++) { point[vp[j].second] = j + 1; } for (int j = 0; j < N; j++) { for (int k = 0; k < M; k++) { if (s[j][k] == '1') { sum[j] += point[k]; } } } for (int j = 0; j < N; j++) { csum += abs(v[j] - sum[j]); } if (csum > score) { score = csum; ans = point; } } for (auto i : ans) cout << i << " "; cout << endl; } int main() { ios::sync_with_stdio(false); cin.tie(0); T = 1; cin >> T; while (T--) { Solve(); } }
726	#include <bits/stdc++.h> using namespace std; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; vector<long long> x(n); for (long long i = 0; i < n; ++i) { cin >> x[i]; } vector<string> s(n); for (long long i = 0; i < n; ++i) { cin >> s[i]; } vector<vector<long long>> gr(1 << n); for (long long j = 0; j < m; ++j) { long long sum = 0; for (long long i = 0; i < n; ++i) { sum = (sum << 1) + s[i][j] - '0'; } gr[sum].push_back(j); } vector<vector<long long>> srt; for (long long i = 0; i < (1 << n); ++i) { if ((long long)gr[i].size()) { srt.push_back(gr[i]); } } vector<long long> col(m); for (long long i = 0; i < (long long)srt.size(); ++i) { for (auto& j : srt[i]) { col[j] = i; } } vector<vector<long long>> uses(n); for (long long i = 0; i < n; ++i) { for (long long j = 0; j < m; ++j) { if (x[i][j] == '1') { uses[i].push_back(col[j]); } } sort(uses[i].begin(), uses[i].end()); uses[i].erase(unique(uses[i].begin(), uses[i].end()), uses[i].end()); } long long ans = 0; vector<long long> vans; for (long long i = 0; i < (1 << n); ++i) { long long sum = 0; vector<long long> gcnt((long long)srt.size()); for (long long j = 0; j < n; ++j) { if (i & (1
727	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(false); cin.tie(0); int tt; cin >> tt; while (tt--) { int n, m; cin >> n >> m; vector<int> x(n); for (int i = 0; i < n; i++) { cin >> x[i]; } vector<vector<int>> a(n, vector<int>(m)); for (int i = 0; i < n; i++) { string s; cin >> s; for (int j = 0; j < m; j++) { a[i][j] = (s[j] == '1'); } } const long long inf = (long long)2e18L; long long res = -inf, msk = 0; for (int i = 0; i < (1 << n); i++) { long long z = 0; for (int j = 0; j < n; j++) { if ((1 << j) & i) { z -= x[j]; } else { z += x[j]; } } long long ans = z; vector<int> cnt(m, 0); for (int j = 0; j < n; j++) { if ((1 << j) & i) { for (int k = 0; k < m; k++) { if (a[j][k]) { cnt[k] += 1; } } } else { for (int k = 0; k < m; k++) { if (a[j][k]) { cnt[k] -= 1; } } } } sort(cnt.begin(), cnt.end()); for (int j = 0; j < m; j++) { ans += cnt[j] * 1LL * (j + 1); } if (ans > res) { ans = res; msk = i; } } { vector<pair<int, int>> cnt(m); for (int i = 0; i < m; i++) { cnt[i].first = 0; cnt[i].second = i; } for (int j = 0; j < n; j++) { if ((1 << j) & msk) { for (int k = 0; k < m; k++) { if (a[j][
728	#include <bits/stdc++.h> using namespace std; char s[10][10001]; int X[10]; pair<int, vector<int>> Calculate(int n, int m, int mask) { vector<pair<int, int>> v(m); for (int k = 0; k < m; ++k) { int c = 0; for (int i = 0; i < n; ++i) { if (s[i][k] == '0') { continue; } c += ((mask & (1 << i))!= 0)? : -1; } v[k] = {c, k}; } int ans = 0; for (int i = 0; i < n; ++i) { int c = ((mask & (1 << i))!= 0)? -1 : 1; ans += c * X[i]; } vector<int> p(m); sort(v.begin(), v.end()); for (int k = 0; k < m; ++k) { ans += v[k].first * (k + 1); p[v[k].second] = k + 1; } return {ans, p}; } void Solve() { int n, m; scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) { scanf("%d", &X[i]); } for (int i = 0; i < n; ++i) { scanf("%s", s[i]); } pair<int, vector<int>> ans = {INT_MIN, vector<int>()}; for (int mask = 0; mask < (1 << n); ++mask) { ans = max(ans, Calculate(n, m, mask)); } auto [_, p] = ans; for (int pi : p) { printf("%d ", pi); } printf("\n"); } int main() { int t; scanf("%d", &t); while (t--) { Solve(); } return 0; }
729	#include <bits/stdc++.h> using namespace std; const int N = 15; const int M = 1e4 + 5; int t, n, m, a[N], sum, f, ans[N], res; char s[N][M]; pair<int, int> c[M]; int main() { ios::sync_with_stdio(false); cin >> t; while (t--) { cin >> n >> m; res = -1; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) cin >> (s[i] + 1); for (int i = 0; i < (1 << n); i++) { sum = 0; for (int j = 1; j <= m; j++) c[j] = {0, j}; for (int j = 1; j <= n; j++) { if ((i >> (j - 1)) & 1) f = 1; else f = -1; sum += f * a[j]; for (int k = 1; k <= m; k++) if (s[j][k] == '1') c[k].first -= f; } sort(c + 1, c + m + 1); for (int j = 1; j <= m; j++) sum += j * c[j].first; if (sum > res) { res = sum; for (int j = 1; j <= m; j++) ans[c[j].second] = j; } } for (int i = 1; i <= m; i++) cout << ans[i] <<''; cout << endl; } return 0; }
730	#include <bits/stdc++.h> using namespace std; const int N = 12; const int M = 10005; const int lim = 200000; const int inf = 1e9; int T; int n, m; int x[N]; char s[N][M]; int cnt[M]; int b[M]; int ans[M]; bool cmp(int i, int j) { return cnt[i] < cnt[j]; } int main() { scanf("%d", &T); while (T--) { scanf("%d%d", &n, &m); for (int i = 0; i <= n - 1; ++i) scanf("%d", &x[i]); for (int i = 0; i <= m - 1; ++i) scanf("%s", s[i]); int ret = 0; for (int mask = 0; mask <= (1 << n) - 1; ++mask) { for (int j = 0; j <= m - 1; ++j) cnt[j] = 0; for (int i = 0; i <= n - 1; ++i) { for (int j = 0; j <= m - 1; ++j) { if (s[i][j] == '1') { if (mask & (1 << i)) ++cnt[j]; else --cnt[j]; } } } for (int j = 0; j <= m - 1; ++j) b[j] = j; sort(b, b + m, cmp); int tmp = 0; for (int i = 0; i <= n - 1; ++i) { int r = 0; for (int j = 0; j <= m - 1; ++j) { if (s[i][b[j]] == '1') { r += j + 1; } } if (mask & (1 << i)) tmp += r - x[i]; else tmp -= r - x[i]; } if (tmp > ret) { ret = tmp; for (int j = 0; j <= m - 1; ++j) ans[b[j]] = j + 1; } } for (int j = 0; j <= m - 1; ++j) printf("%d ", ans[j]); printf("\n"); } return 0; }
731	#include <bits/stdc++.h> using namespace std; int T, n, m; int x[15]; char s[15][10005]; int v[10005], cnt[25], tmp[25]; int P[10005]; int ans; void dfs(int p, int sum) { if (p == n + 1) { int cur = m, res = sum; for (int i = 20; i >= 0; i--) { res += (i - 10) * (cur * - cnt[i] + 1) * cnt[i] / 2; cur -= cnt[i]; } tmp[0] = cnt[0]; for (int i = 1; i <= 20; i++) tmp[i] = tmp[i - 1] + cnt[i]; if (ans < res) { ans = res; for (int i = 1; i <= m; i++) { P[i] = tmp[v[i] + 10]--; } } return; } for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i]++; cnt[v[i] + 10]++; } } dfs(p + 1, sum - x[p]); for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i] -= 2; cnt[v[i] + 10]++; } } dfs(p + 1, sum + x[p]); for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i]++; cnt[v[i] + 10]++; } } } void solve() { scanf("%d%d", &n, &m); for (int i = 1; i <= n; i++) scanf("%d", &x[i]); for (int i = 1; i <= n; i++) { scanf("%s", &s[i][1]); } for (int i = 1; i <= m; i++) v[i] = 0; for (int i = 0;
732	#include <bits/stdc++.h> using namespace std; inline int read() { int ans = 0, f = 1; char c = getchar(); while (c > '9' || c < '0') { if (c == '-') f = -1; c = getchar(); } while (c >= '0' && c <= '9') { ans = (ans << 1) + (ans << 3) + c - '0'; c = getchar(); } return ans * f; } inline void write(int x) { if (x < 0) putchar('-'), x = -x; if (x / 10) write(x / 10); putchar((char)(x % 10) + '0'); } template <typename T> inline T Abs(T a) { return a >? a : -a; }; template <typename T, typename TT> inline T Min(T a, TT b) { return a < b? a : b; } template <typename T, typename TT> inline T Max(T a, TT b) { return a < b? b : a; } const int N = 1e4 + 5; int t, n, m, a[N], c[N], ans; char s[15][N]; pair<int, int> b[N]; signed main() { t = read(); while (t--) { n = read(); m = read(); for (int i = 1; i <= n; ++i) a[i] = read(); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); ans = -1e9; for (int i = 0; i < (1 << n); ++i) { for (int j = 1; j <= m; ++j) { b[j] = make_pair(0, j); for (int k = 1; k <= n; ++k) if (s[k][j] == '1') { if ((i >> (k - 1)) & 1) b[j].first++; else b[j].first--; } } sort(b + 1, b + + m); int tmp = 0; for (int j = 1; j <= n; ++j) if ((i >> (j - 1)) & 1)
733	#include <bits/stdc++.h> using namespace std; const int inf = 1e9 + 1; const long long infll = 1e18 + 1; const int mod = 998244353; mt19937_64 rnd(chrono::high_resolution_clock::now().time_since_epoch().count()); template <typename T> bool chmin(T &a, T b) { if (a > b) { a = b; return true; } return false; } template <typename T> bool chmax(T &a, T b) { if (a < b) { a = b; return true; } return false; } struct smth { int x; }; const int maxn = 1e6 + 1; int p[maxn]; long long h[maxn]; void solve() { int n; cin >> n; vector<long long> f(n + 1); f[0] = 0; long long s = 0; map<long long, int> mp; for (int i = 1; i <= n; i++) { f[i] = f[i - 1] ^ h[i]; mp[f[i]] = i; s ^= f[i]; } if (s == 0) { cout << n << '\n'; for (int i = 1; i <= n; i++) { cout << i <<''; } return; } if (mp.count(s)) { cout << n - << '\n'; for (int j = 1; j <= n; j++) { if (mp[s]!= j) { cout << j <<''; } } return; } for (int i = 1; i <= n; i++) { if (mp.count(s ^ f[i]) && mp[s ^ f[i]]!= i) { cout << n - << '\n'; for (int j = 1; j <= n; j++) { if (mp[s ^ f[i]]!= j && i!= j) { cout << j <<''; } } return; } } cout << n - << '\n'; for (int i = 1; i <= n; i++) { if (i!= && i!= n && i!= (n - 1) / 2) { cout << i <<''; }
734	#include <bits/stdc++.h> using namespace std; using uint = unsigned int; const int N = 1e6 + 5; mt19937 rnd(time(0)); int n, K, flag[N], pr[N], cnt; uint H[N], sum; unordered_map<uint, int> pos; int main() { scanf("%d", &n); K = n >> 1; flag[0] = flag[1] = 1, H[1] = 0; for (int i = 2; i <= n; i++) { if (!flag[i]) pr[++cnt] = i, H[i] = rnd(); for (int j = 1; j <= cnt && i * pr[j] <= n; j++) { flag[i * pr[j]] = 1, H[i * pr[j]] = H[i] ^ H[pr[j]]; if (i % pr[j] == 0) break; } } for (int i = 2; i <= n; i++) H[i] ^= H[i - 1], sum ^= H[i]; if (sum == 0) { printf("%d\n", n); for (int i = 1; i <= n; i++) printf("%d ", i); return 0; } for (int i = 1; i <= n; i++) if (H[i] == sum) { printf("%d\n", n - 1); for (int j = 1; j <= n; j++) if (j!= i) printf("%d ", j); return 0; } for (int i = 1; i <= n; i++) { if (pos.count(sum ^ H[i])) { int p = pos[sum ^ H[i]]; printf("%d\n", n - 2); for (int j = 1; j <= n; j++) if (j!= i && j!= p) printf("%d ", j); return 0; } pos[H[i]] = i; } printf("%d\n", n - 3); for (int i = 1; i <= n; i++) if (i!= && i!= K && i!= n) printf("%d ", i); return 0; }
735	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 2; int lpf[N]; long long val[N]; long long val1[N]; long long val2[N]; int use[N]; int n; void finish() { cout << accumulate(use + 1, use + n + 1, 0) << '\n'; for (int i = 1; i <= n; i++) { if (use[i]) cout << i <<''; } cout << '\n'; exit(0); } int main() { ios_base::sync_with_stdio(0); cin.tie(0); mt19937_64 rng( (long long)chrono::steady_clock::now().time_since_epoch().count()); for (int i = 1; i < N; i++) { lpf[i] = i; } for (int i = 2; i < N; i++) { if (lpf[i] == i) { val[i] = rng(); for (int j = * i; j < N; j += i) { lpf[j] = i; } } else { val[i] = val[lpf[i]] ^ val[i / lpf[i]]; } } for (int i = 1; i < N; i++) { val1[i] = val1[i - 1] ^ val[i]; val2[i] = val2[i - 1] ^ val1[i]; } cin >> n; for (int i = 1; i <= n; i++) use[i] = 1; long long x = val2[n]; if (!x) finish(); for (int i = 1; i <= n; i++) { if (val1[i] == x) { use[i] = 0; finish(); } } unordered_map<int, int> m; for (int i = 1; i <= n; i++) { if (m.count(val1[i] ^ x)) { use[i] = 0; use[m[val1[i] ^ x]] = 0; finish(); } m[val1[i]] = i; } assert(n % == 3); use[n] = 0; use[n / 2] =
736	#include <bits/stdc++.h> using namespace std; void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void intext() {} bool isPrime(int n) { if (n == 1) return false; if (n == 2) return true; for (int i = 2; i * i <= n; i++) { if (n % i == 0) return false; } return true; } int main() { ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr); intext(); long long t
737	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int row, column, r_row, r_column, f_row, f_column; int dr = 1, dc = 1; cin >> row >> column >> r_row >> r_column >> f_row >> f_column; int count; count = 0; while (f_row!= r_row && f_column!= r_column) { if (r_row + dr > row || r_row + dr < 1) { dr *= (-1); } if (r_column + dc > column || r_column + dc < 1) { dc *= (-1); } r_column += dc; r_row += dr; count++; } cout << count << endl; } }
738	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m; cin >> n >> m; int rb, cb, rd, cd; cin >> rb >> cb >> rd >> cd; int x1, x2; if (rb <= rd) { x1 = rd - rb; } else if (rb > rd) { x1 = * (n)-rb - rd; } if (cb <= cd) { x2 = cd - cb; } else if (cb > cd) { x2 = * (m)-rb - cd; } if (x1 < x2) { cout << x1 << endl; } else cout << x2 << endl; } return 0; }
739	#include <bits/stdc++.h> using namespace std; int main() { int f; cin >> f; int r, c; int rl, cl; int ra, ca; for (int i = 0; i < f; i++) { int tr = 0, tc = 0; cin >> r >> c; cin >> rl >> cl; cin >> ra >> ca; if (cl == ca) tc = 0; if (cl == ra) tr = 0; else if (rl < ra) tr = ra - rl; else tr = (r - rl) + (r - ra); if (cl == ca) tc = 0; else if (cl < ca) tc = ca - cl; else tc = (c - cl) + (c - ca); if (tr >= tc) cout << tc; else cout << tr; cout << endl; } return 0; }
740	#include <bits/stdc++.h> using namespace std; void solve() { int n, m, rb, cb, rd, cd; scanf("%d%d%d%d%d%d", &m, &n, &rb, &cb, &rd, &cd); int ans = 0; int dr = 1, dc = 1; while (rb!= rd && cb!= cd) { if (rb + dr < || rb + dr > n) dr *= -1; if (cb + dc < || cb + dc > m) dc *= -1; rb += dr; cb += dc; ans++; } printf("%d\n", ans); } int main() { int t; scanf("%d", &t); while (t--) { solve(); } }
741	#include <bits/stdc++.h> using namespace std; long long inf = 1000000007; double pi = acos(-1); long long p(long long a, long long b) { long long ans = 1; if (a < 0) a += inf; while (b) { if (b % == 1) { ans = ((ans % inf) * (a % inf)) % inf; } a = ((a % inf) * (a % inf)) % inf; if (a < 0) a += inf; b /= 2; } return ans; } long long lis(vector<long long>& arr) { vector<long long> temp; for (auto i : arr) { if (temp.empty() || i > temp.back()) temp.push_back(i); else { auto it = lower_bound(temp.begin(), temp.end(), i); *it = i; } } return temp.size(); } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t = 1; cin >> t; for (long long tt = 1; tt <= t; tt++) { long long n, m, r1, c1, r2, c2; cin >> n >> m >> r1 >> c1 >> r2 >> c2; long long ans = 1e9; if (r1 <= r2) { ans = min(ans, r2 - r1); } else { ans = min(ans, r1 - r2 + * (n - r1)); } if (c1 <= 2) { ans = min(ans, c2 - c1); } else { ans = min(ans, c1 - c2 + * (m - c1)); } cout << ans << '\n'; } return 0; }
742	#include <bits/stdc++.h> using namespace std; const long long N = 1e17; const long long sz = 2e5 + 5; int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long r, c, rb, cb, rd, cd, mv1 = 1, mv2 = 1; cin >> r >> c >> rb >> cb >> rd >> cd; long long time = 0; while (true) { if (cb == cd || rb == rd) { break; } else { if (rb + mv1 > r || rb + mv1 <= 0) { mv1 *= -1; } else if (cb + mv2 > c || cb + mv2 <= 0) { mv2 *= -1; } rb += mv1; cb += mv2; } time++; } cout << time << endl; } }
743	#include <bits/stdc++.h> using namespace std; void solve() { int n, m, rb, cb, rd, cd; cin >> n >> m >> rb >> cb >> rd >> cd; int x = (rb <= rd)? abs(rd - rb) : (abs(rb - n) + abs(n - rd)); int y = (cb <= cd)? abs(cd - cb) : (abs(cb - n) + abs(n - cd)); int ans = min(x, y); cout << ans << endl; } int main() { int t; cin >> t; while (t--) solve(); return 0; }
744	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m, rb, rd, cb, cd, i, ans = 0, flag1 = 1, flag2 = 1; cin >> n >> m >> rb >> cb >> rd >> cd; while ((rb!= rd) && (cb!= cd)) { ans++; if (flag1) rb++; else rb--; if (rb > n) { rb -= 2; flag1 = 0; } if (rb < 1) { rb += 2; flag1 = 1; } if (flag2) cb++; else cb--; if (cb > m) { cb -= 2; flag2 = 0; } if (cb < 1) { cb += 2; flag2 = 1; } } cout << ans << endl; } return 0; }
745	#include <bits/stdc++.h> using namespace std; template <typename T> inline void read(T& x) { x = 0; bool f = 0; char ch = (char)getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = 1; ch = (char)getchar(); } while (ch >= '0' && ch <= '9') { x = x * + (ch & 15); ch = (char)getchar(); } if (f) x = -x; } template <typename T> inline void write(T x) { if (x < 0) x = -x, putchar('-'); static int st[45]; int top = 0; do { st[top++] = x % 10; x /= 10; } while (x); while (top) putchar(st[--top] + '0'); putchar('\n'); } const long double pi = acos(-1.0); const long double eps = (double)1e-7; const long long mod = 1e9 + 7; const int maxn = 1505; const int maxm = 5005; int main() { ios::sync_with_stdio(false); cin.tie(0); ; int T; cin >> T; while (T--) { int n, m, a1, b1, a2, b2; cin >> n >> m >> a1 >> b1 >> a2 >> b2; int dx = 1, dy = 1; int ans = 0; while (a1!= a2 && b1!= b2) { if (a1 + dx < || a1 + dx > n) dx = -dx; if (b1 + dy < || b1 + dy > m) dy = -dy; a1 += dx; b1 += dy; ans++; } cout << ans << "\n"; } }
746	#include <bits/stdc++.h> using namespace std; void go() { long long n, m, xr, yr, xd, yd; cin >> n >> m >> xr >> yr >> xd >> yd; long long dirx = 1, diry = 1; long long ans = 0; while (true) { if (xr == xd || yr == yd) { break; } xr += dirx; yr += diry; if (xr > xd) { dirx = -1; xr = n - 1; } if (yr > m) { diry = -1; yr = m - 1; } if (xr < 1) { xr = 2; dirx = 1; } if (yr < 1) { yr = 2; diry = 1; } ans++; } cout << ans << "\n"; } int32_t main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; t = 1; cin >> t; while (t--) { go(); } return 0; }
747	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m, rb, cb, rd, cd; cin >> n >> m >> rb >> cb >> rd >> cd; int ans; if (rd - rb >= 0) ans = rd - rb; else ans = * n - (rd + rb); if (cd - cb >= 0) ans = min(ans, cd - cb); else ans = min(ans, * m - (rd + rb)); cout << ans << endl; } return 0; }
748	#include <bits/stdc++.h> using namespace std; const int nax = * (int)1e5 + 10; const int INF = (int)1e9 + 47; int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); int tt; cin >> tt; while (tt--) { int n, m, a, b, c, d; cin >> n >> m >> a >> b >> c >> d; int ans = INF; if (a <= c) ans = min(ans, c - a); if (b <= d) ans = min(ans, d - b); if (a > c) ans = min(ans, (n - a) + (n - c)); if (b > d) ans = min(ans, (m - b) + (m - d)); cout << ans << '\n'; } }
749	#include <bits/stdc++.h> using namespace std; int dx[] = {-1, 0, 1, 0, -1, -1, 1, 1}; int dy[] = {0, 1, 0, -1, -1, 1, -1, 1}; int kx[] = {-2, -1, 1, 2, 2, 1, -1, -2}; int ky[] = {1, 2, 2, 1, -1, -2, -2, -1}; bool com(pair<int, int> a, pair<int, int> b) { return abs(a.first - a.second) < abs(b.first - b.second); } void solved() { int n, x, y; cin >> n; vector<pair<int, int> > v; for (int i = 0; i < n; i++) { cin >> x >> y; v.push_back({x, y}); } sort(v.begin(), v.end(), com); int ar[n + 1]; memset(ar, 0, sizeof(ar)); for (auto it : v) { int a = it.first, b = it.second; if (ar[a] == 0) { cout << a <<'' << b <<'' << a << endl; ar[a] = 1; } else if (ar[b] == 0) { cout << a <<'' << b <<'' << b << endl; ar[b] = 1; } else { for (int i = 1; i <= n; i++) { if (ar[i] == 0) { cout << a <<'' << b <<'' << i << endl; ar[i] = 1; break; } } } } } int main() { long long int tc; cin >> tc; while (tc--) { solved(); } }
750	#include <bits/stdc++.h> using namespace std; int t, n, v[1010]; struct node { int l, r, d; } a[1010]; bool cmp(node x, node y) { return x.r - x.l < y.r - y.l; } int main() { cin >> t; while (t--) { memset(v, 0, sizeof(v)); cin >> n; for (int i = 1; i <= n; i++) cin >> a[i].l >> a[i].r; sort(a + 1, a + + n, cmp); for (int i = 1; i <= n; i++) { for (int j = a[i].l; j <= a[i].r; j++) { if (v[j] == 0) { a[i].d = j; v[j] = 1; break; } } } for (int i = 1; i <= n; i++) cout << a[i].l << " " << a[i].r << " " << a[i].d << endl; } }
751	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 5; long long h[N], n; bool check(long long k) { vector<long long> a(h, h + n); for (int i = n - 1; i > 1; i--) { if (a[i] < k) return false; long long d = min(h[i], a[i]) / 3; a[i - 1] += d; a[i - 2] += d; a[i - 1] += d; } return a[0] >= k && a[1] >= k; } void solve() { cin >> n; long long MAX = 0; for (int i = 0; i < n; i++) { cin >> h[i]; MAX = max(MAX, h[i]); } long long l = 0; long long r = MAX + 1; while (r - l > 1) { long long mid = (r + l) / 2; check(mid)? l = mid : r = mid; } cout << l << "\n"; } int main() { std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) solve(); return 0; }
752	#include <bits/stdc++.h> using namespace std; long long t, n, m, k, mod = 1e9 + 7, ans, a[200011]; string s, s2; bool flag, vis[2000111]; vector<long long> v, tmp; bool okD(long long d, long long mid, long long i) { return tmp[i] - * d >= mid; } bool ok(long long mid) { tmp = v; for (long long i = n - 1; i >= 2; i--) { long long d = tmp[i] - mid; d = min(v[i], d); if (d < 0) return false; d /= 3; tmp[i] -= d * 3; tmp[i - 1] += d; tmp[i - 2] += * d; } long long ret = 1e9; for (long long i = 0; i < n; i++) ret = min(ret, tmp[i]); return ret >= mid; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> t; while (t--) { cin >> n; v.resize(n); for (long long i = 0; i < n; i++) cin >> v[i]; long long L = 1, R = 10; while (L <= R) { long long mid = (L + R + 1) / 2; if (ok(mid)) ans = mid, L = mid + 1; else R = mid - 1; } cout << ans << '\n'; } return 0; }
753	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e5 + 10; int a[MAXN]; int b[MAXN]; int c[MAXN]; int n; bool check(int x) { for (int i = 1; i <= n; i++) b[i] = a[i], c[i] = 0; for (int i = n; i >= 3; i--) { if (b[i] + c[i] < x) return false; int now = x - c[i]; if (now <= 0) { int res = b[i] / 3; b[i] -= res * 3; c[i - 2] += * res; c[i - 1] += res; } else { int res = (b[i] - now) / 3; b[i] -= res * 3; c[i - 2] += * res; c[i - 1] += res; } } if (b[1] + c[1] < x || b[2] + c[2] < x) return false; return true; } int main() { std::ios::sync_with_stdio(false); int _; cin >> _; while (_--) { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; int l = 1, r = 10; while (l <= r) { int mid = l + r >> 1; if (check(mid)) { l = mid + 1; } else r = mid - 1; } cout << r << '\n'; } }
754	#include <bits/stdc++.h> using namespace std; const int mod = 1000000009; inline int qp(long long a, long long b) { long long ans = 1; for (; b;) { if (b & 1) ans = ans * a % mod; b >>= 1; a = a * a % mod; } return ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0), cout.tie(0); int t; cin >> t; for (; t--;) { int n, m, bx, by, dx, dy; long long p; cin >> n >> m >> bx >> by >> dx >> dy >> p; int cx = 1, cy = 1; long long u = 0, d = 1; p = (1 - p * qp(100, mod - 2) % mod + mod) % mod; for (int i = 0; i!= * (n - 1) * (m - 1); ++i) { if (bx + cx == || bx + cx > n) cx = -cx; if (by + cy == || by + cy > m) cy = -cy; bx += cx; by += cy; u = (u + 1) % mod; if (bx == dx || by == dy) { u = u * p % mod; d = d * p % mod; } } d = (1 - d + mod) % mod; cout << u * qp(d, mod - 2) % mod << '\n'; } }
755	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; long long n, m, a, b, c, d, p; long long add(long long first, long long second) { return (first + second) % MOD; } long long sub(long long first, long long second) { return add(first, MOD - second); } long long mul(long long first, long long second) { return first * second % MOD; } long long binpow(long long first, long long second) { if (second == 0) return 1; if (second % 2) return mul(first, binpow(first, second - 1)); long long z = binpow(first, second / 2); return mul(z, z); } long long inv(long long first) { return binpow(first, MOD - 2); } long long divide(long long first, long long second) { return mul(first, inv(second)); } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { cin >> n >> m >> a >> b >> c >> d >> p; long long first = a, second = b; long long ans = 0, dr = 1, dc = 1; vector<long long> v; while (ans == || first!= a || second!= b || (first > && first < n && dr!= 1) || (second > && second < n && dc!= 1)) { if (a == c || b == d) v.push_back(ans); if (a == n) dr = -1; if (a == 1) dr = 1; if (b == m) dc = -1; if (b == 1) dc = 1; a += dr; b += dc; ans++; } p = divide(p, 100); long long ans2 = 0; for (long long i = 0; i < v.size(); i++) { long long A = v[i]; long long P = mul(p, binpow(sub(1, p), i)); long long Q = binpow(sub(1, p), v.size()); long long S = ans; ans2 = add
756	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; long long ksm(long long a, long long b, long long mod) { long long c = 1; while (b) { if (b & 1) c = c * a % mod; b >>= 1; a = a * a % mod; } return c; } long long inv(int x) { return ksm(x, mod - 2, mod); } int t, n, m, len, p, sx, sy, tx, ty, dx, dy; int main() { cin >> t; while (t--) { cin >> n >> m >> sx >> sy >> tx >> ty >> p; long long ans = 0, p1 = (1 - p * inv(100) % mod + mod) % mod, p2 = p * inv(100), P; dx = dy = 1; len = 0; if (sx == tx || sy == ty) P = p1; else P = 1; int tot = 0; for (int i = 1; i <= * (n - 1) * (m - 1); i++) { if (sx + dx > n || sx + dx < 1) dx = -dx; if (sy + dy > m || sy + dy < 1) dy = -dy; sx += dx, sy += dy, len = (len + 1) % mod; if (sx == tx || sy == ty) { tot++; ans = (ans + P * len % mod) % mod; P = p1 * P % mod; len = 0; } } if (sx == ty || sy == ty) P = P * inv(p1) % mod; else ans = (ans + len * P % mod) % mod; cout << (ans * inv((1 - P + mod) % mod)) % mod << endl; } }
757	#include <bits/stdc++.h> using namespace std; const int N = (int)2e5 + 50, LOGN = 17; const int INF = (int)1e9; int n, k; int ord[N], in[N], tim = 0; char las[N]; int lc[N], rc[N]; int res[N]; string str; void dfs(int v) { if (lc[v]!= -1) dfs(lc[v]); ord[tim] = v; in[v] = tim++; if (rc[v]!= -1) dfs(rc[v]); } void solve(int v, int& rem) { int la = -1; int cur = v; for (int i = 0; i < (rem); ++i) { if (cur == -1) break; if (las[cur]!='' && las[cur] > str[cur]) { la = i; } cur = lc[v]; } cur = v; vector<int> vs; for (int i = 0; i < (la + 1); ++i) { res[cur] = 1; rem--; vs.push_back(cur); cur = lc[cur]; } while (!vs.empty()) { if (rc[vs.back()]!= -1) solve(rc[vs.back()], rem); vs.pop_back(); } } void print_ans(int v) { if (lc[v]!= -1) print_ans(lc[v]); cout << str[v]; if (res[v]) cout << str[v]; if (rc[v]!= -1) print_ans(rc[v]); } int pos[256]; int main() { ios::sync_with_stdio(false); cin.tie(NULL); cin >> n >> k; cin >> str; for (int i = 0; i < (n); ++i) { cin >> lc[i] >> rc[i]; lc[i]--, rc[i]--; } dfs(0); fill(pos, pos + 256, INF); for (int i = n - 1; i >= 0; i--) { pos[str[ord[i]]] = i; char f =''; for (char c = '
758	#include <bits/stdc++.h> using namespace std; void main0(); int main() { clock_t start, end; ios::sync_with_stdio(false); cin.tie(0); main0(); return 0; } const int dx[8] = {0, 1, -1, 0, 1, 1, -1, -1}; const int dy[8] = {1, 0, 0, -1, 1, -1, -1, 1}; const int N = 2e5 + 5; const int M = 1e5; const int INF = 0x3f3f3f3f; const long long INFF = 0x3f3f3f3f3f3f3f3f3f; const int mod = 998244353; const double eps = 1e-6; mt19937 rnd( (unsigned int)chrono::steady_clock::now().time_since_epoch().count()); template <typename T> bool chkmin(T &x, T y) { return y < x? x = y, : 0; } template <typename T> bool chkmax(T &x, T y) { return y > x? x = y, : 0; } int n, k; string s; int lc[N], rc[N]; char ord[N]; int idx[N]; int p = 0; int flag[N]; void dfs1(int u) { if (lc[u]) dfs1(lc[u]); ord[++p] = u; idx[u] = p; if (rc[u]) dfs1(rc[u]); } int rep[N]; int dfs2(int u, int k) { if (k == 0) return 0; int cost = 0; if (lc[u]) cost += dfs2(lc[u], k - cost); if (flag[u] || cost) { rep[u] = 1, cost++; if (rc[u]) cost += dfs2(rc[u], k - cost); } return cost; } void main0() { cin >> n >> k >> s; s = "$" + s; for (int i = 1; i <= n; ++i) { cin >> lc[i] >> rc[i]; } dfs1(
759	#include <bits/stdc++.h> using namespace std; int32_t main() { cin.tie(0)->sync_with_stdio(0); long long n, k; string s; cin >> n >> k >> s; vector<long long> l(n), r(n), val(n), d(n, 0), in; for (long long i = 0; i < n; i++) { cin >> l[i] >> r[i]; --l[i], --r[i]; } function<void(long long)> dfs = [&](long long v) { if (v == -1) return; dfs(l[v]); in.push_back(v); dfs(r[v]); }; dfs(0); val[in.back()] = 0; for (long long i = n - 2; i >= 0; i--) { if (s[in[i]] == s[in[i + 1]]) val[in[i]] = val[in[i + 1]]; else if (s[in[i]] < s[in[i + 1]]) val[in[i]] = 1; else val[in[i]] = -1; } function<long long(long long, long long)> dfs2 = [&](long long v, long long t) { if (v == -1 or t == 0) return 0ll; long long x = dfs2(l[v], t - 1); if (val[v] == or x) x++; if (x) d[v] = 1; long long rem = t - x; if (!d[v]) rem = 0; dfs2(r[v], rem); return x; }; dfs2(0, k); for (auto i : in) { cout << s[i]; if (d[i]) cout << s[i]; } }
760	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int t; cin >> t; vector<int> x_0; vector<int> y_w; vector<int> x_h; vector<int> y_0; int a, b, c, d; int u; int k, w, h; while (t--) { cin >> w >> h; cin >> k; while (k--) { cin >> u; x_0.push_back(u); } a = x_0[x_0.size() - 1] - x_0[0]; cin >> k; while (k--) { cin >> u; x_h.push_back(u); } c = x_h[x_h.size() - 1] - x_h[0]; cin >> k; while (k--) { cin >> u; y_0.push_back(u); } d = y_0[y_0.size() - 1] - y_0[0]; cin >> k; while (k--) { cin >> u; y_w.push_back(u); } b = y_w[y_w.size() - 1] - y_w[0]; a = (a > c)? a : c; a = a * h; b = (b > d)? b : d; b = b * w; a = (a > b)? a : b; cout << a << "\n"; x_0.clear(); y_0.clear(); x_h.clear(); y_w.clear(); } return 0; }
761	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { long long int w, k; cin >> w >> k; int x, x1; cin >> x; vector<int> a(x); for (int i = 0; i < x; i++) cin >> a[i]; cin >> x1; vector<int> b(x1); for (int i = 0; i < x1; i++) cin >> b[i]; int mx; mx = max(a[x - 1] - a[0], b[x1 - 1] - b[0]); int y, y1; cin >> y; vector<int> c(y); for (int i = 0; i < y; i++) cin >> c[i]; cin >> y1; vector<int> d(y1); for (int i = 0; i < y1; i++) cin >> d[i]; int mx1; mx1 = max(c[y - 1] - c[0], c[y1 - 1] - c[0]); if (mx * k > mx1 * w) cout << mx * k << endl; else cout << mx1 * w << endl; } return 0; }
762	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(0); int t; cin >> t; while (t--) { int w, o; cin >> w >> o; int h1, h2, v1, v2, d1, d2, d3, d4; cin >> h1; vector<int> h(h1); for (int i = 0; i < h1; i++) { cin >> h[i]; } d1 = h.back() - h.front(); cin >> h2; vector<int> hh(h2); for (int i = 0; i < h2; i++) { cin >> hh[i]; } d2 = hh.back() - hh.front(); cin >> v1; vector<int> v(v1); for (int i = 0; i < v1; i++) { cin >> v[i]; } d3 = v.back() - v.front(); cin >> v2; vector<int> vv(v2); for (int i = 0; i < v2; i++) { cin >> vv[i]; } d4 = vv.back() - vv.front(); long long ans1 = max(d1, d2) * o, ans2 = max(d3, d4) * w; cout << max(ans1, ans2) << "\n"; } return 0; }
763	#include <bits/stdc++.h> const long long INF = (1ll) * 1e18; using namespace std; void test_case() { long long w, h; cin >> w >> h; long long s1 = 0, s2 = 0, s3 = 0, s4 = 0; long long k, a; cin >> k; for (int j = 0; j < k; j++) { cin >> a; if (j == 0) s1 -= a; else if (j == k - 1) s1 += a; } cin >> k; for (int j = 0; j < k; j++) { cin >> a; if (j == 0) s2 -= a; else if (j == k - 1) s2 += a; } cin >> k; for (int j = 0; j < k; j++) { cin >> a; if (j == 0) s3 -= a; else if (j == k - 1) s3 += a; } cin >> k; for (int j = 0; j < k; j++) { cin >> a; if (j == 0) s4 -= a; else if (j == k - 1) s4 += a; } cout << max(max(s1 * h, s2 * h), max(s3 * w, s4 * h)); } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); auto start = chrono::high_resolution_clock::now(); int testno = 1; cin >> testno; for (int i = 1; i <= testno; i++) { test_case(); cout << '\n'; } auto end = chrono::high_resolution_clock::now(); double time_taken = chrono::duration_cast<chrono::nanoseconds>(end - start).count(); time_taken *= 1e-9; cerr << fixed << time_taken << setprecision(9) << " sec" << endl; return 0; }
764	#include <bits/stdc++.h> using namespace std; void my_dbg() { cout << endl; } template <typename Arg, typename... Args> void my_dbg(Arg A, Args... B) { cout <<'' << A; my_dbg(B...); } long long inv(long long i) { if (i == 1) return 1; return (1000000007 - ((1000000007 / i) * inv(1000000007 % i)) % 1000000007) % 1000000007; } long long modmul(long long a, long long b) { a = a % 1000000007; b = b % 1000000007; return (((a * b) % 1000000007) + 1000000007) % 1000000007; } long long modadd(long long a, long long b) { a = a % 1000000007; b = b % 1000000007; return (((a + b) % 1000000007) + 1000000007) % 1000000007; } long long gcd(long long a, long long b) { if (b == 0) return a; return gcd(b, a % b); } long long ceil_div(long long a, long long b) { return a % b ==? a / b : a / b + 1; } long long power(long long a, long long b) { a %= 1000000007; long long res = 1; while (b > 0) { if (b & 1) res = res * a % 1000000007; a = a * a % 1000000007; b >>= 1; } return res; } const long long maxN = 1e6 + 5; vector<bool> is_prime(maxN + 1, true); void sieve() { is_prime[0] = is_prime[1] = false; for (long long i = 2; i * i <= maxN; i++) { if (is_prime[i]) { for (long long j = i * i; j <= maxN; j += i) is_prime[j] = false; } } } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; cin >> t; while (t--) { long long n,
765	#include <bits/stdc++.h> using namespace std; int main() { long long int w, h, k, j, g, area = 0; long long int t, i; cin >> t; for (i = 1; i <= t; i++) { long long int max1 = 0, max2 = 0, max3 = 0, max4 = 0, min1 = 10000000, min2 = 10000000, min3 = 10000000, min4 = 10000000; area = 0; cin >> w >> h; cin >> k; for (j = 1; j <= k; j++) { cin >> g; min1 = min(min1, g); max1 = max(max1, g); } area = max(area, (max1 - min1) * h); cin >> k; for (j = 1; j <= k; j++) { cin >> g; min2 = min(min2, g); max2 = max(max2, g); } area = max(area, (max2 - min2) * h); cin >> k; for (j = 1; j <= k; j++) { cin >> g; min3 = min(min3, g); max3 = max(max3, g); } area = max(area, (max3 - min3) * w); cin >> k; for (j = 1; j <= k; j++) { cin >> g; min1 = min(min4, g); max1 = max(max4, g); } area = max(area, (max4 - min4) * w); cout << area << endl; } }
766	#include <bits/stdc++.h> using namespace std; string s; int n, k, t, cnt[2001]; unsigned long long x; int main() { cin >> t; while (t--) { cin >> n >> k >> x; cin >> s; string news = ""; int len = -1; for (int i = 0; i < n; i++) { if (i == 0) { news += s[i]; if (s[i] == '*') { len++; cnt[len] = k; } else { len++; cnt[len] = 0; } } else { if (s[i] == s[i - 1] && s[i] == '*') { cnt[len] += k; } else { news += s[i]; if (s[i] == '*') { len++; cnt[len] = k; } else { len++; cnt[len] = 0; } } } } len = news.size(); unsigned long long tt = 1, vt = 0; vector<unsigned long long> thutu; thutu.push_back(1); for (int i = len - 1; i >= 0; i--) { unsigned long long prett = tt; if (cnt[i] > 0) { tt = tt * (cnt[i] + 1); thutu.push_back(tt); if (x / prett <= cnt[i] + 1) { vt = i; break; } } } for (int i = 0; i < vt; i++) { if (news[i] == 'a') { cout << news[i]; } } if (thutu.size()) { thutu.pop_back(); } for (int i = vt; i < len; i++) { if (news[i] == 'a') { cout << news[i]; } else { if (thutu.size()) { unsigned long long giasu = thutu.back(); thutu.pop_back(); unsigned long long o = x / giasu; if (x % giasu == 0) { o--; } x -= o * giasu; for (int j = 1; j <= o; j++) { cout << 'b'; } } } } cout <<
767	#include <bits/stdc++.h> using namespace std; long long n, k, x, tmp, f[2010], a[2010]; string s; void solve() { cin >> n >> x >> k >> s; s = 'a' + s + 'a'; memset(f, 0, sizeof f); f[n + 1] = 1; for (long long i = n; i >= 0; i--) { if (s[i] == 'a') { for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j]!= -1 && 1.0 * (f[j] * ((j - i - 1) * x + 1) <= 1e18)) f[i] = f[j] * ((j - i - 1) * x + 1); else f[i] = -1; break; } } } } for (long long i = 0; i <= n; i++) { if (s[i] == 'a') { if (i!= 0) cout << 'a'; for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j] == -1) break; long long num = (k - 1) / f[j]; for (long long o = 1; o <= num; o++) cout << 'b'; k = (k - 1) % f[j] + 1; break; } } } } cout << '\n'; } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long _ = 1; cin >> _; while (_--) solve(); return 0; }
768	#include <bits/stdc++.h> using namespace std; long long n, k, x, tmp, f[2010], a[2010]; string s; void solve() { cin >> n >> x >> k >> s; s = 'a' + s + 'a'; memset(f, 0, sizeof f); f[n + 1] = 1; for (long long i = n; i >= 0; i--) { if (s[i] == 'a') { for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j]!= -1 && 1.0 * (f[j] * ((j - i - 1) * x + 1)) <= 1e18) f[i] = f[j] * ((j - i - 1) * x + 1); else f[i] = -1; break; } } } } for (long long i = 0; i <= n; i++) { if (s[i] == 'a') { if (i!= 0) cout << 'a'; for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j] == -1) break; long long num = (k - 1) / f[j]; for (long long o = 1; o <= num; o++) cout << 'b'; k = (k - 1) % f[j] + 1; break; } } } } cout << '\n'; } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long _ = 1; cin >> _; while (_--) solve(); return 0; }
769	#include <bits/stdc++.h> using namespace std; long long n, k, x, tmp, f[2010], a[2010]; string s; void solve() { cin >> n >> x >> k >> s; s = 'a' + s + 'a'; memset(f, 0, sizeof f); f[n + 1] = 1; for (long long i = n; i >= 0; i--) { if (s[i] == 'a') { for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j]!= -1 && 1.0 * (f[j] * ((j - i - 1) * x + 1) <= 1e18)) f[i] = f[j] * ((j - i - 1) * x + 1); else f[i] = -1; break; } } } } for (long long i = 0; i <= n; i++) { if (s[i] == 'a') { if (i!= 0) cout << 'a'; for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j] == -1) break; long long num = (k - 1) / f[j]; for (long long o = 1; o <= num; o++) cout << 'b'; k = (k - 1) % f[j] + 1; break; } } } } cout << '\n'; } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long _ = 1; cin >> _; while (_--) solve(); return 0; }
770	#include <bits/stdc++.h> using namespace std; long long n, k, x, tmp, f[2010], a[2010]; string s; void solve() { cin >> n >> x >> k >> s; s = 'a' + s + 'a'; memset(f, 0, sizeof f); f[n + 1] = 1; for (long long i = n; i >= 0; i--) { if (s[i] == 'a') { for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j]!= -1 && 1.0 * (f[j] * ((j - i - 1) * x + 1)) <= 1e18) f[i] = f[j] * ((j - i - 1) * x + 1); else f[i] = -1; break; } } } } for (long long i = 0; i <= n; i++) { if (s[i] == 'a') { if (i!= 0) cout << 'a'; for (long long j = i + 1; j <= n + 1; j++) { if (s[j] == 'a') { if (f[j] == -1) break; long long num = (k - 1) / f[j]; for (long long o = 1; o <= num; o++) cout << 'b'; k = (k - 1) % f[j] + 1; break; } } } } cout << '\n'; } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long _ = 1; cin >> _; while (_--) solve(); return 0; }
771	#include <bits/stdc++.h> using namespace std; void solve() { long long n, k, x; cin >> n >> k >> x; string s; cin >> s; vector<long long> num; long long curr = 0; for (auto i : s) { if (i == '*') { curr++; } else { if (curr!= 0) { num.push_back(curr * k + 1); } curr = 0; } } if (curr!= 0) { num.push_back(curr * k + 1); } vector<long long> ans; long long st = 1; for (int i = 0; i < num.size(); i++) { long double mul = 1; for (int j = i + 1; j < num.size(); j++) mul *= num[j]; long long now; if (mul + st >= x) { now = 0; } else { now = (x - st) / (long long)mul; st += now * mul; } ans.push_back(now); } long long u = 0; string news = ""; long long check = 0; long long i = 0; while (i < n) { if (s[i] == 'a') { news += 'a'; i++; } else { for (int j = 0; j < ans[u]; j++) { news += 'b'; } u++; while (s[i] == '*') { i++; } } } cout << news << '\n'; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { solve(); } return 0; }
772	#include <bits/stdc++.h> using namespace std; const int MOD = 1000000007; void solve() { int n; cin >> n; vector<int> arr(n); for (int i = 0; i < n; ++i) cin >> arr[i]; sort(arr.begin(), arr.end()); set<int> s; for (int num : arr) s.insert(num); if (n == 1) cout << arr[0] / + (arr[0] % ==? : 1) << endl; else { if (arr[0] == 1) { if (arr[1] == 2) { if (arr[n - 1] % == 0) cout << arr[n - 1] / + << endl; else cout << arr[n - 1] / + << endl; } else { bool two = false; for (int num : arr) if (num % == 2) { two = true; break; } if (two && arr[n - 1] % == 0) cout << arr[n - 1] / + << endl; else if (two) cout << arr[n - 1] / + << endl; else cout << arr[n - 1] / + << endl; } } else { set<int> mods; for (int num : arr) if (num % 3) mods.insert(num % 3); if (mods.size() == 0) cout << arr[n - 1] / << endl; else if (mods.size() == 1) cout << arr[n - 1] / + << endl; else if ((!s.count(arr[n - 1] / 3) && arr[n - 1] % == 1) || arr[n - 1] % == 0) cout << arr[n - 1] / + << endl; else cout << arr[n - 1] / + << endl; } } } int main() { int t; cin >> t; for (int i = 0; i < t; ++i) solve(); return 0; }
773	#include <bits/stdc++.h> using namespace std; char ch[1010000]; long long x[1010000]; long long g[10]; vector<long long> vt, ans; signed main() { long long T, n, m, cnt, num, k; scanf("%lld", &T); while (T--) { scanf("%lld", &n); long long mmax = 0; for (long long i = 1; i <= n; i++) { scanf("%lld", &x[i]); g[x[i] % 3]++; mmax = max(x[i], mmax); } if (mmax == 1) { printf("1\n"); continue; } else if (mmax == 2) { long long flag = 0; for (long long i = 1; i <= n; i++) { if (x[i] == 1) { flag = 1; } } if (flag) { printf("2\n"); } else { printf("1\n"); } continue; } else if (mmax == 3) { long long flag = 0; for (long long i = 1; i <= n; i++) { if (x[i]!= 3) { flag = 1; } } if (flag) { printf("2\n"); } else { printf("1\n"); } continue; } long long t = mmax % 3; long long cnt = (mmax + 2) / 3; if (t == 0) { long long flag = 0; for (long long i = 1; i <= n; i++) { if (x[i] %!= 0) { flag = 1; break; } } if (flag) { cnt++; } } else if (t == 1) { long long flag = 0; for (long long i = 1; i <= n; i++) { if (x[i] % == 2) { flag = 1; break; } } if (flag) { for (long long i = 1; i <= n; i++) { if (x[i] == || x[i] == mmax - 1) { flag = 0; break; } } if (flag == 0) { cnt++; } } } else if (t == 2) { long long flag = 0; for (long long i = 1; i <=
774	#include <bits/stdc++.h> using namespace std; int main() { int tests; cin >> tests; for (int idk = 0; idk < tests; idk++) { long long n; cin >> n; long long a[n], one = 0, md1 = 0, md2 = 0; for (int i = 0; i < n; i++) { cin >> a[i]; if (a[i] == 1) one = 1; if (a[i] % == 1) md1 = 1; if (a[i] % == 2) md2 = 1; } std::sort(a, a + n); int dif1 = 0; for (int i = 0; i < n; i++) if (a[n - 1] - a[i] == 1) dif1 = 1; long long ans[4]; ans[1] = 0; ans[2] = 0; if (md1) ans[1] = 1; if (md2) ans[2] = 1; if ((md1) && (md2) && (one == 0) && (a[n - 1] % == 1) && (dif1 == 0)) { ans[1] = 0; ans[2] = 2; } long long dif = ans[1] + ans[2] * 2; ans[3] = 0; for (int i = 0; i < n; i++) { ans[3] = max(ans[3], (a[i] + - dif) / 3); } cout << ans[1] + ans[2] + ans[3] << endl; } }
775	#include <bits/stdc++.h> using namespace std; using LL = long long; int getCases() { int cases = -1; enum InputType : int { SingleInput = 1, MultipleInput = 2, NotSet = 0, }; InputType inputType = MultipleInput; if (inputType == SingleInput) { cases = 1; } else if (inputType == MultipleInput) { scanf("%d", &cases); } else { assert(false && "fix the function"); } return cases; } int n; int ar[105]; int big; void Input() { big = 0; scanf("%d", &n); for (int i = 0; i < n; ++i) { scanf("%d", &ar[i]); big = max(big, ar[i]); } } int main() { int cases = getCases(); while (cases--) { Input(); int ans = INT_MAX; for (int a = 0; a <= 3; ++a) { for (int b = 0; b <= 3; ++b) { int c = (big - a - * b) / 3; int good = true; for (int i = 0; i < n; ++i) { int r = ceil((double)ar[i] / 3.0); if (ar[i] % == 0) { if (c >= r) { } else if (c >= r - && ((a >= && b >= 1) || a >= 3)) { } else { good = false; } } else if (ar[i] % == 1) { if (c >= r - && a >= 1) { } else if (ar[i] > && c >= r - && b >= 2) { } else { good = false; } } else if (ar[i] % == 2) { if (c >= r - && (a >= || b >= 1)) { } else { good = false; } } } if (good) { ans = min(ans, a + b + c); } } } printf("%d\n", ans); } }
776	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long t; t = 1; while (t--) { long long q; vector<vector<long long>> vec; vector<long long> actual(500001); for (long long i = 1; i < 500000; i++) { actual[i] = i; } vector<long long> ans; cin >> q; long long n = q; while (q--) { long long x; cin >> x; if (x == 1) { long long y; cin >> y; vec.push_back({x, y}); } else { long long y1, z1; cin >> y1 >> z1; vec.push_back({x, y1, z1}); } } for (long long i = n - 1; i >= 0; i--) { if (vec[i][0] == 1) { ans.push_back(actual[vec[i][1]]); } else { actual[vec[i][1]] = actual[vec[i][2]]; } } reverse(ans.begin(), ans.end()); for (auto x : ans) { cout << x << " "; } cout << endl; } }
777	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> v; vector<long long> ans(n, 0); for (long long i = 0; i < n; i++) { long long x; cin >> x; v.push_back(x); } vector<pair<long long, long long> > p[2]; p[0].push_back(pair<long long, long long>(-1, LLONG_MIN)); p[1].push_back(pair<long long, long long>(-1, LLONG_MIN)); for (long long i = 1; i < n; i++) { long long x = v[i]; long long y = -1 * v[i]; pair<long long, long long> a = p[0][i - 1]; pair<long long, long long> b = p[1][i - 1]; pair<long long, long long> a0(2, LLONG_MAX); pair<long long, long long> a1(2, LLONG_MAX); if (a.first!= 2) { if (v[i - 1] < x) { if (a0.second > a.second) { a0 = pair<long long, long long>(0, a.second); } } if (a.second < x) { if (a0.second > v[i - 1]) { a0 = pair<long long, long long>(0, v[i - 1]); } } if (v[i - 1] < y) { if (a1.second > a.second) { a1 = pair<long long, long long>(0, a.second); } } if (a.second < y) { if (a1.second > v[i - 1]) { a1 = pair<long long, long long>(0, v[i - 1]); } } } if (b.first!= 2) { if (-1 * v[i - 1] < x) { if (a0.second > b.second) { a0 = pair<long long, long long>(1, b.second); } } if (a.second < x) { if (a0.second > -1 *
778	#include <bits/stdc++.h> using namespace std; int p[1000005], dp[1000005][2][2], n; struct Node { int i, j, k; } last[1000005][2][2]; void Min(int &a, int b, Node c, Node &d) { if (a > b) a = b, d = c; } void Main() { scanf("%d", &n); for (int i = 1; i <= n; ++i) scanf("%d", &p[i]); for (int i = 0; i <= n; ++i) for (int j = 0; j < 2; ++j) for (int k = 0; k < 2; ++k) dp[i][j][k] = (int)1e9; dp[1][0][0] = -(int)1e9; dp[1][0][1] = -(int)1e9; for (int i = 1; i < n; ++i) for (int j = 0; j < 2; ++j) for (int k = 0; k < 2; ++k) { int a, b; if (j == 0) a = (k ==? -p[i] : p[i]), b = dp[i][j][k]; if (j == 1) a = dp[i][j][k], b = (k ==? -p[i] : p[i]); if (p[i + 1] > a) Min(dp[i + 1][0][1], b, (Node){i, j, k}, last[i + 1][0][1]); else if (p[i + 1] > b) Min(dp[i + 1][1][1], a, (Node){i, j, k}, last[i + 1][1][1]); if (-p[i + 1] > a) Min(dp[i + 1][0][0], b, (Node){i, j, k}, last[i + 1][0][0]); else if (-p[i + 1] > b) Min(dp[i + 1][1][0], a, (Node){i, j, k}, last[i + 1][1][0]); } int nj = -
779	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { int n; cin >> n; vector<int> a(n + 1, 0); for (int i = 1; i <= n; i++) cin >> a[i]; const int inf = (1 << 30); vector<array<int, 2>> dp(n + 1, {inf, inf}); vector<array<int, 2>> p(n + 1, {-1, -1}); dp[1] = {-inf, -inf}; auto upd = [&](int i, int j, int lim, int u) { if (lim < dp[i][j]) { dp[i][j] = lim; p[i][j] = u; } }; for (int i = 1; i < n; i++) { for (int j = 0; j < 2; j++) { if (dp[i][j] == inf) continue; int x = (j? -a[i] : a[i]); for (int k = 0; k < 2; k++) { int y = (k? -a[i + 1] : a[i + 1]); if (x < y) upd(i + 1, k, dp[i][j], j); if (dp[i][j] < y) upd(i + 1, k, y, j); } } } if (dp[n][0]!= inf) { int s = 0; cout << "YES\n"; vector<int> res(n + 1, 0); for (int i = n; i >= 1; i--) { res[i] = (s? -a[i] : a[i]); s = p[i][s]; } for (int i = 1; i <= n; i++) cout << res[i] << " \n"[i == n]; } else cout << "NO\n"; } return 0; }
780	#include <bits/stdc++.h> using namespace std; const int N = 1000010, INF = 0x3f3f3f3f; int n; int p[N], a[N]; int f[N][2], pre[N][2]; int main() { ios::sync_with_stdio(false); cin.tie(0); int _; cin >> _; while (_--) { cin >> n; for (int i = 1; i <= n; i++) cin >> p[i]; f[1][0] = f[1][1] = -INF; for (int i = 2; i <= n; i++) { f[i][0] = f[i][1] = INF; if (p[i] > f[i - 1][0]) { if (f[i][0] > p[i - 1]) { f[i][0] = p[i - 1]; pre[i][0] = 0; } } if (p[i] > p[i - 1]) { if (f[i][0] > f[i - 1][0]) { f[i][0] = f[i - 1][0]; pre[i][0] = 0; } } if (p[i] > f[i - 1][1]) { if (f[i][0] > -p[i - 1]) { f[i][0] = -p[i - 1]; pre[i][0] = 1; } } if (p[i] > -p[i - 1]) { if (f[i][0] > f[i - 1][1]) { f[i][0] = f[i - 1][1]; pre[i][0] = 1; } } if (-p[i] > f[i - 1][0]) { if (f[i][1] > p[i - 1]) { f[i][1] = p[i - 1]; pre[i][1] = 0; } } if (-p[i] > p[i - 1]) { if (f[i][1] > f[i - 1][0]) { f[i][1] = f[i - 1][0]; pre[i][1] = 0
781	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 5; int n, a[N], p[N << 1], f[N << 1]; void solve() { scanf("%d", &n); for (int i = 0; i < n; i++) scanf("%d", &a[i]); for (int i = 1; i < * n; i++) p[i] = -1, f[i] = n + 1; f[0] = f[1] = -n; for (int i = 1; i <= n - 1; i++) for (int x = 0; x <= 1; x++) for (int y = 0; y <= 1; y++) { int v[2] = {f[i * - + y], a[i - 1] * (2 * y - 1)}; for (int j = 0; j <= 1; j++) if (v[j] <= a[i] * (2 * x - 1) && v[!j] < f[i * + x]) f[i * + x] = v[!j], p[i * + x] = i * - + y; } if (f[2 * n - 1] <= n) { puts("YES"); for (int i = n - 1, x = * n - 1; ~i; i--, x = p[x]) if (!(x & 1)) a[i] *= -1; for (int i = 1; i <= n; i++) printf("%d ", a[i]); puts(""); } else { puts("NO"); } } int main() { int T; scanf("%d", &T); while (T--) solve(); return 0; }
782	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; template <class T> bool uin(T& a, const T& b) { return a > b? a = b, true : false; } template <class T> bool uax(T& a, const T& b) { return a < b? a = b, true : false; } mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); constexpr int inf = 1e9; void solve() { int n; cin >> n; vector<int> p(n); for (auto& x : p) cin >> x; p.insert(begin(p), -inf); vector<array<int, 2>> dp(n + 1); vector<array<bool, 2>> par(n + 1); fill(begin(dp[0]), end(dp[0]), -inf); for (int i = 1; i <= n; ++i) { auto& nxt = dp[i]; auto& pre = dp[i - 1]; fill(begin(nxt), end(nxt), inf); for (int x = -p[i], j = 0; j < 2; ++j, x = -x) { if (x > -p[i - 1] && uin(nxt[j], pre[0])) par[i][j] = 0; if (x > pre[0] && uin(nxt[j], -p[i - 1])) par[i][j] = 0; if (x > +p[i - 1] && uin(nxt[j], pre[1])) par[i][j] = 0; if (x > pre[1] && uin(nxt[j], +p[i - 1])) par[i][j] = 1; } } if (min(dp[n][0], dp[n][1]) > n) { cout << "NO\n"; return; } cout << "YES\n"; vector<int> res; for (int i = n, state = dp[n][0] <= n? : 1; i > 0; --i) { if (state) res.push_back(+
783	#include <bits/stdc++.h> using namespace std; template <typename T> istream &operator>>(istream &in, vector<T> &v) { for (auto &x : v) in >> x; return in; } template <typename T> ostream &operator<<(ostream &out, vector<T> &v) { for (auto &x : v) out << x << " "; return out; } template <typename Iterable> void prnv(const Iterable &iterable, ostream &out = cout) { if (iterable.begin() == iterable.end()) { out << '\n'; return; } auto x = iterable.begin(); out << *x; for (++x; x!= iterable.end(); ++x) out <<'' << *x; out << '\n'; } void prn(char en = '\n') { cout << en; } template <typename T, typename... Args> void prn(T x, Args... args) { cout << x << " "; prn(args...); } void dbg() { cerr << '\n'; } template <typename T, typename... Args> void dbg(T x, Args... args) {} const int N = (int)1e6 + 5; int dp[2][N], v[2][N]; void solve() { int n; cin >> n; for (int i = 0; i < n; ++i) { cin >> v[0][i]; v[1][i] = -v[0][i]; } dp[0][0] = dp[1][0] = -N; for (int i = 1; i < n; ++i) { for (int j = 0; j < 2; ++j) { dp[j][i] = N; for (int k = 0; k < 2; ++k) { if (v[j][i] >= v[k][i - 1]) { dp[j][i] = min(dp[j][i], dp[k][i - 1]); } if (v[j][i] >= dp[k][i - 1]) { dp[j][i] = min(dp[j][i], v[k][i - 1]); } } } } if (dp[0][n -
784	#include <bits/stdc++.h> using namespace std; const int N = 1000000; int t, n; int p[N]; pair<int, bool> dp[N][2], dp2[N][2]; int ans[N]; void go(int i, bool b) { if (i < 0) return; ans[i] = b? -p[i] : p[i]; go(i - 1, dp[i][b].second); } int main() { cin.tie(0)->sync_with_stdio(0); cin >> t; while (t--) { cin >> n; cin >> p[0]; dp[0][0] = dp[0][1] = {-1e9, 0}; if (n == 1) { cout << "YES\n1"; continue; } for (int i = 1; i < n; i++) { cin >> p[i]; for (int it = 0; it < 2; it++) { dp[i][it] = min({make_pair(p[i] > p[i - 1]? dp[i - 1][0].first : n + 1, 0), make_pair(p[i] > -p[i - 1]? dp[i - 1][1].first : n + 1, 1), make_pair(p[i] > dp[i - 1][0].first? p[i - 1] : n + 1, 0), make_pair(p[i] > dp[i - 1][1].first? -p[i - 1] : n + 1, 1)}); p[i] = -p[i]; } } if (dp[n - 1][0].first == dp[n - 1][1].first && dp[n - 1][0].first == n + 1) { cout << "NO\n"; continue; } cout << "YES\n"; if (dp[n - 1][0].first < 1e9) go(n - 1, 0); else if (dp[n - 1][1].first < 1e9) go(n - 1, 1); for (int i = 0; i < n; i++) cout << ans[i] << " "; cout << "\n
785	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 7, inf = 1e9; int n, dp[N][2], w[N][2], lst[N][2], a[N], ns[N]; void Main() { cin >> n; for (int i = (1); i <= (n); i++) cin >> a[i], w[i][0] = a[i], w[i][1] = -a[i]; for (int i = (0); i <= (n); i++) dp[i][0] = dp[i][1] = inf; w[0][0] = w[0][1] = -inf; dp[0][0] = dp[0][1] = -inf; for (int i = (1); i <= (n); i++) { for (int a = (0); a <= (1); a++) for (int b = (0); b <= (1); b++) if (w[i][a] > w[i - 1][b] && dp[i][a] > dp[i - 1][b]) dp[i][a] = dp[i - 1][b], lst[i][a] = b; for (int a = (0); a <= (1); a++) for (int b = (0); b <= (1); b++) if (w[i][a] > dp[i - 1][b] && dp[i][a] > w[i - 1][b]) dp[i][a] = w[i - 1][b], lst[i][a] = b; } if (dp[n][0] == inf || dp[n][1] == inf) cout << "NO\n"; else { cout << "YES\n"; int o = dp[n][0] == inf? : 0; for (int i = (n); i >= (1); i--) ns[i] = w[i][o], o = lst[i][o]; for (int i = (1); i <= (n); i++) cout << ns[i] <<''; cout << '\n'; } } int main() { ios ::sync_with_stdio(false); cin.tie
786	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { int n; cin >> n; vector<int> a(n + 1, 0); for (int i = 1; i <= n; i++) cin >> a[i]; const int inf = (1 << 30); vector<array<int, 2>> dp(n + 1, {inf, inf}); vector<array<int, 2>> p(n + 1, {-1, -1}); dp[1] = {-inf, -inf}; auto upd = [&](int i, int j, int lim, int u) { if (lim < dp[i][j]) { dp[i][j] = lim; p[i][j] = u; } }; for (int i = 1; i < n; i++) { for (int j = 0; j < 2; j++) { if (dp[i][j] == inf) continue; int x = (j? -a[i] : a[i]); for (int k = 0; k < 2; k++) { int y = (k? -a[i + 1] : a[i + 1]); if (x < y) upd(i + 1, k, dp[i][j], j); if (dp[i][j] < y) upd(i + 1, k, y, j); } } } if (dp[n][0]!= inf) { int s = 0; cout << "YES\n"; vector<int> res(n + 1, 0); for (int i = n; i >= 1; i--) { res[i] = (s? -a[i] : a[i]); s = p[i][s]; } for (int i = 1; i <= n; i++) cout << res[i] << " \n"[i == n]; } else cout << "NO\n"; } return 0; }
787	#include <bits/stdc++.h> using namespace std; const int maxn = 23; const int mod = 998244353; const int INF = 0x3f3f3f3f; const long long llINF = 0x3f3f3f3f3f3f3f3f; long long make_compiler_happy() { return INF ^ ^ maxn ^ mod ^ llINF; } long long fpow(long long a, long long b) { long long res = 1; a %= mod; assert(b >= 0); for (; b; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; } long long inv(long long x) { return fpow(x, mod - 2); } mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count()); int cnt[1 << maxn]; int g[1 << maxn]; string str[maxn]; int main() { ios::sync_with_stdio(0), cin.tie(0); int n; cin >> n; for (int i = 0; i < (n); i++) cin >> str[i]; g[0] = 1; for (int i = 0; i < (1 << n); i++) g[i] = -g[i & (i - 1)]; g[0] = 0; for (char c = 'a'; c <= 'z'; c++) { memset(cnt, 0, sizeof(cnt[0]) * (1 << n)); for (int i = 0; i < (n); i++) for (char t : str[i]) if (t == c) cnt[1 << i]++; for (int s = 0; s < (1 << n); s++) { int t = s & -s; if (t!= s) cnt[s] = min(cnt[t], cnt[s ^ t]); g[s] = (long long)g[s] * (cnt[s] + 1) % mod; } } for (int i = 0; i < (n); i++) for (int s = 0; s < (1 << n); s++) if (s & (1
788	#include <bits/stdc++.h> using namespace std; long long dp[1 << 23]; string a[1005]; int cnt[26][26]; long long n; const long long MOD = 998244353; void solve() { cin >> n; for (int i = 0; i < n; i++) { cin >> a[i]; for (auto c : a[i]) cnt[i][c - 'a']++; } for (int i = 1; i < (1 << n); i++) { dp[i] = 1; for (int z = 0; z < 26; z++) { int x = 1e9; for (int k = 0; k < n; k++) if (i & (1 << k)) { x = min(x, cnt[k][z] + 1); } dp[i] = (dp[i] * x) % MOD; } if (__builtin_popcount(i) % == 0) dp[i] = MOD - dp[i]; } for (int k = 0; k < n; k++) for (int i = 0; i < (1 << n); i++) { if ((i & (1 << k))) { dp[i] += dp[i ^ (1 << i)]; if (dp[i] >= MOD) dp[i] -= MOD; } } long long ans = 0; for (int i = 0; i < (1 << n); i++) { long long v = 0; long long bit = 0; for (int k = 0; k < n; k++) if (i & (1 << k)) v += k + 1, bit++; ; v *= bit; ans ^= v * dp[i]; } cout << ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0); solve(); }
789	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int n; cin >> n; vector<array<int, 26>> a(n); for (int i = 0; i < n; i++) { string str; cin >> str; for (int j = 0; j < 26; j++) { a[i][j] = 0; } for (int j = 0; j < str.size(); j++) { int ch = (int)(str[j] - 'a'); a[i][ch]++; } } long long mod = 998244353; vector<long long> f(1 << n); for (int i = 1; i < (1 << n); i++) { array<int, 26> ar{}; for (int j = 0; j < 26; j++) { ar[j] = mod; } for (int j = 0; j < n; j++) { if ((i >> j) & 1) { for (int k = 0; k < 26; k++) { ar[k] = min(ar[k], a[j][k]); } } } long long v = 1; for (int j = 0; j < 26; j++) { v = v * (ar[j] + 1) % mod; } if (__builtin_popcount(i) & 1) { f[i] = v; } else { f[i] = -v; } } vector<long long> g = f; for (int i = 0; i < n; i++) { for (int j = 0; j < (1 << n); j++) { if ((j >> i) & 1) { g[j] = (g[j] + g[j ^ (1 << i)]) % mod; } } } long long res = 0; for (int i = 0; i < (1 << n); i++) { long long coef = 0; for (int j = 0; j < n; j++) { if ((i >> j) & 1) { coef += j + 1; } } coef *= __builtin_popcount(i); res ^= (coef * g[i]); } cout << res << "\n"; return
790	#include <bits/stdc++.h> using namespace std; long long ans[(1 << 23)], val[(1 << 23)]; long long n; long long qtd[23][26] = {0}; void build(long long ind, string second) { long long i = 0; for (long long a = 0; a < 26; a++) { while (i < second.size() && second[i] == (char)(a + 'a')) i++, qtd[ind][a]++; } } void solve(long long a) { vector<pair<long long, long long> > ord; for (long long i = 0; i < n; i++) ord.push_back({-qtd[i][a], i}); sort(begin(ord), end(ord)); vector<long long> mask, aux; mask.push_back(0); for (auto x : ord) { aux.clear(); x.first *= -1; for (auto y : mask) { aux.push_back(y | (1 << x.second)); val[y | (1 << x.second)] = val[y | (1 << x.second)] * (1 + x.first) % 998244353; } for (auto y : aux) mask.push_back(y); } } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); cin >> n; for (long long i = 0; i < (1 << n); i++) val[i] = 1; string second; for (long long i = 0; i < n; i++) cin >> second, build(i, second); for (long long i = 0; i < 26; i++) solve(i); for (long long i = 0; i < (1 << n); ++i) { if (__builtin_parity(i)) ans[i] = val[i]; else ans[i] = -val[i]; } ans[0] = 0; for (long long i = 0; i < n; ++i) for (long long mask = 0; mask < (1 << n); ++mask) { if (mask & (1 << i)) { ans[mask] = (ans[
791	#include <bits/stdc++.h> using namespace std; inline int read() { int x = 0, f = 0, ch = getchar(); while (!isdigit(ch)) f = ch == '-', ch = getchar(); while (isdigit(ch)) x = x * + ch - 48, ch = getchar(); return (1 - * f) * x; } inline void writebit(int x, int len) { for (int i = (len - 1); i >= (0); i--) { printf("%d", (x >> i) & 1); } } const int N = 24, L = 2e4 + 10, M = << 23, K = 26, mod = 998244353, inf = 1e9; int n, a[N][K], f[M]; char s[L]; int main() { n = read(); for (int i = (1); i <= (n); i++) { scanf("%s", s + 1); int l = strlen(s + 1); for (int j = (1); j <= (l); j++) a[i][s[j] - 'a']++; } for (int i = (1); i <= ((1 << n) - 1); i++) { f[i] = -1; for (int j = (1); j <= (n); j++) if ((i >> j - 1) & 1) f[i] = f[i]; for (int j = (0); j <= (K - 1); j++) { int tmp = inf; for (int k = (1); k <= (n); k++) if ((i >> k - 1) & 1) (tmp = ((tmp) < (a[k][j])? (tmp) : (a[k][j]))); (f[i] = (1ll * (f[i]) * (tmp + 1) % mod)); } } for (int i = (1); i <= (n); i++) { for (int j = (1); j <= ((1 << n) - 1); j++) { if ((j >> i - 1) & 1) { (f[j] = (((f[j]) + (f[j - (1 << i - 1)])) % mod)); } } } long long ans = 0;
792	#include <bits/stdc++.h> using namespace std; int dizi[3]; int solve(int x, int y, int z) { set<int> s; s.insert(x); s.insert(y); s.insert(z); dizi[0] = x; dizi[1] = y; dizi[2] = z; if (s.size() == 3) { int mx = 0; for (int i = 0; i < 2; i++) { if (dizi[mx] < dizi[i + 1]) { mx = i + 1; } } int a = dizi[0] + dizi[1] + dizi[2]; if (dizi[mx] * == a) { cout << "yes"; } else { cout << "no"; } } else if (s.size() == 2) { int farkli; if (x == y) farkli = z; else if (x == z) farkli = y; else farkli = z; if (farkli % == 0) { cout << "yes"; } else { cout << "no"; } } else { if (x % == 0) cout << "yes"; else cout << "no"; } cout << endl; return 0; } int main() { int n, a, b, c; cin >> n; for (int i = 0; i < n; i++) { cin >> a >> b >> c; solve(a, b, c); } }
793	#include <bits/stdc++.h> using namespace std; int main() { int t, a, b, c, i, m; t = a = b = c = i = m = 0; cin >> t; if (t <= 10000) { for (i = 1; i <= t; i++) { cin >> a >> b >> c; if (a >= && a <= && b >= && b <= && c >= && c <= 100000000) { m = max(max(a, b), c); if (a + b == m || b + c == m || c + a == m) printf("Yes\n"); else if ((a == b && c % == 0) || (b == c && a % == 0) && (c == a && b % == 0)) printf("Yes\n"); else printf("No\n"); } } } return 0; }
794	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { long long int l1, l2, l3; cin >> l1 >> l2 >> l3; if (l1 + l3 == l2 || l1 + l2 == l3 || l2 + l3 == l1) cout << "YES" << endl; else if ((l1 == l2 && l3 % == 0) || (l2 == l3 && l1 % == 0) || (l1 == l3 && l2 % == 0)) cout << "YES" << endl; else cout << "NO" << endl; return 0; } }
795	#include <bits/stdc++.h> const long double eps = 1e-9; const long long mod = 1e9 + 7, ll_max = 1e18; const int MX = 2e5 + 10, int_max = 0x3f3f3f3f; using namespace std; template <class T> void read(T &x) { cin >> x; } template <class H, class T> void read(pair<H, T> &p) { cin >> p.first >> p.second; } template <class T, size_t S> void read(array<T, S> &a) { for (T &i : a) read(i); } template <class T> void read(vector<T> &v) { for (T &i : v) read(i); } template <class H, class... T> void read(H &h, T &...t) { read(h); read(t...); } template <class H, class T> ostream &operator<<(ostream &o, pair<H, T> &p) { o << p.first << " " << p.second; return o; } template <class T, size_t S> ostream &operator<<(ostream &o, array<T, S> &a) { string s; for (T i : a) o << s << i, s = " "; return o; } template <class T> ostream &operator<<(ostream &o, vector<T> &v) { string s; for (T i : v) o << s << i, s = " "; return o; } template <class T> void write(T x) { cout << x; } template <class H, class... T> void write(const H &h, const T &...t) { write(h); write(t...); } void print() { write('\n'); } template <class H, class... T> void print(const H &h, const T &...t) { write(h); if (sizeof...(t)) write(' '); print(t...); } template <typename T> void ckmin(T &a, const T &b) { a = min(a, b); } template <typename T> void
796	#include <bits/stdc++.h> using namespace std; const int INF = 1000000007; const int N = 150000; int main() { ios_base ::sync_with_stdio(0); cin.tie(0); int T; cin >> T; while (T--) { int a, b, c; cin >> a >> b >> c; if (a == b + c || c == a + b || c == a + b) { cout << "YES" << "\n"; } else if (((a == b) && (c % == 0)) || ((b == c) && (a % == 0)) || ((c == a) && (b % == 0))) { cout << "YES" << "\n"; } else { cout << "NO" << "\n"; } } return 0; }
797	#include <bits/stdc++.h> using namespace std; bool simple(int a, int b, int c) { if (a == b && c % == 0) return true; if (c == b && a % == 0) return true; if (a == c && b % == 0) return true; return false; } bool tryBreaK(int a, int b, int c) { if (abs(a - b) == c) return true; if (abs(b - c) == a) return true; if (abs(a - c) == b) return true; return false; } int main() { int t; cin >> t; while (t--) { int a, b, c; cin >> a >> b >> c; if (simple(a, b, c) || tryBreaK(a, b, c)) { cout << "YES" << endl; break; } cout << "NO" << endl; } }
798	#include <bits/stdc++.h> using namespace std; void solve() { long long n; cin >> n; vector<long long> a(n); for (auto &i : a) cin >> i; string s; cin >> s; vector<long long> x; vector<long long> y; for (int i = 0; i < s.size(); i++) { if (s[i] == '0') x.push_back(a[i]); else y.push_back(a[i]); } long long cnt = 1; map<long long, long long> mp; sort(x.begin(), x.end()); sort(y.begin(), y.end()); for (int i = 0; i < x.size(); i++) mp[x[i]] = cnt, cnt++; for (int i = 0; i < y.size(); i++) mp[y[i]] = cnt, cnt++; for (auto i : a) cout << mp[i] << " "; cout << "\n"; } int main() { ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(0); long long t; cin >> t; while (t--) solve(); }
799	#include <bits/stdc++.h> using namespace std; const long long N = 4e6 + 20; const long long M = 1e7 + 20; const long long MOD = 1e9 + 7; const long long Inf = 1e18; const long double eps = 1e-7; const long long dx[] = {1, 0, -1, 0}; const long long dy[] = {0, 1, 0, -1}; long long n, m, x, a[N], Ans[N], y, z, q, k, timer, tt = 1; void Solve() { for (long long i = 0; i <= n + 1; ++i) Ans[i] = 0; long long cnt = 0; string s; scanf("%lld", &n); for (long long i = 1; i <= n; ++i) scanf("%lld", &a[i]); cin >> s; vector<pair<long long, long long> > Vec1, Vec2; for (long long i = 0; i < s.size(); ++i) if (s[i] == '1') { ++cnt; Vec1.push_back({a[i + 1], i + 1}); } else Vec2.push_back({a[i + 1], i + 1}); sort(Vec1.begin(), Vec1.end()); sort(Vec2.begin(), Vec2.end()); long long G = cnt + 1; for (auto x : Vec1) Ans[x.second] = G++; G = 1; for (auto x : Vec2) Ans[x.second] = G++; for (long long i = 1; i <= n; ++i) cout << Ans[i] << " \n"[i == n]; } int main() { scanf("%lld", &tt); while (tt--) { ++timer; Solve(); } }
800	#include <bits/stdc++.h> using namespace std; const int N = 200005; int t; struct node { int a, b; bool operator<(const node& rhs) const { return a < rhs.a; } } p0[N], p1[N]; int main() { scanf("%d", &t); while (t--) { int n, p[N], q[N]; char c[N]; scanf("%d", &n); for (int i = 1; i <= n; i++) scanf("%d", p + i); scanf("%s", c + 1); int cnt0 = 0, cnt1 = 0; for (int i = 1; i <= n; i++) { if (c[i] == '0') p0[cnt0].a = p[i], p0[cnt0].b = i; else p1[cnt1].a = p[i], p1[cnt1].b = i; } sort(p0 + 1, p0 + + cnt0); sort(p1 + 1, p1 + + cnt1); for (int i = 1; i <= cnt0; i++) q[p0[i].b] = i; for (int i = 1; i <= cnt1; i++) q[p1[i].b] = i + cnt0; for (int i = 1; i <= n; i++) printf("%d ", q[i]); printf("\n"); } return 0; }
801	#include <bits/stdc++.h> using namespace std; const int maxn = * 1e5 + 10; long long min(long long a, long long b) { return a > b? b : a; } long long fun(long long a, long long b) { long double A = a; long double B = b; long double c = A / B; if (c >= 0) return long long(c); else { if (c == long long(c)) return long long(c); else return long long(c - 1); } } long long a[maxn]; int main() { int t; cin >> t; while (t--) { long long n, k; cin >> n >> k; long long sum = 0; for (int i = 0; i < n; i++) { cin >> a[i]; sum += a[i]; } if (sum <= k) { cout << << endl; continue; } sort(a, a + n); long long cur = 0; long long ans = sum - k; for (int i = n - 1; i > 0; i--) { cur += a[i]; long long tmp = sum - cur + 1ll * (n - i) * a[1]; long long ax = (tmp <= k)? : (tmp - k - 1) / (n - i + 1) + 1; ans = min(ans, ax + (n - i)); } cout << ans << endl; } }
802	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10; using LL = long long; int a[N]; LL sum[N]; int main() { int T; scanf("%d", &T); while (T--) { int n; LL k; scanf("%d%lld", &n, &k); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); sort(a + 1, a + n + 1); for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i]; LL ans = -1; for (int i = 0; i <= n - 1; i++) { LL x = ceil((double)(i * a[1] + sum[n - i] - k) / (double)(i + 1)); if (x < 0) x = 0; if (ans == -1) ans = x + i; else ans = min(ans, x + i); } printf("%lld\n", ans); } }
803	#include <bits/stdc++.h> using namespace std; const int N = 200100; long long a[N]; void solve() { long long n, k; double t; scanf("%lld%lld", &n, &k); for (int i = 0; i < n; i++) scanf("%lld", &a[i]); sort(a, a + n); long long ans = a[0] + n - 1; for (int i = 0; i < n; i++) { if (i) k -= a[i]; t = k; t = t / (n - i); t = floor(t); int l = t; ans = min(ans, max(0ll, a[0] - l) + n - i - 1); } printf("%lld\n", ans); } int main() { int t; for (scanf("%d", &t); t!= 0; t--) solve(); return 0; }
804	#include <bits/stdc++.h> using namespace std; const int maxn = 2e5 + 10; int T, n, arr[maxn]; long long k, sum, ans; int main() { scanf("%d", &T); while (T--) { sum = 0; scanf("%d%lld", &n, &k); for (int i = 0; i < n; i++) { scanf("%d", &arr[i]); sum += arr[i]; } if (sum <= k) { printf("0\n"); continue; } if (n == 1) { printf("%lld\n", arr[0] - k); continue; } sort(arr, arr + n, greater<int>()); for (int i = 0; i < n; i++) arr[i] -= arr[n - 1]; ans = sum - k; for (int i = 0; i < n - 1; i++) { sum -= arr[i]; if (sum <= k) { ans = min(ans, i + 1ll); } ans = min(ans, i + + (sum - k + i + 1) / (i + 2)); } printf("%lld\n", ans); } return 0; }
805	#include <bits/stdc++.h> using namespace std; void solve() { int n; long long k; cin >> n >> k; vector<int> a(n); for (int i = 0; i < n; ++i) cin >> a[i]; sort(a.begin(), a.end()); reverse(a.begin() + 1, a.end()); for (int i = 1; i < n; ++i) a[i] += a[i - 1]; long long res = 1e18; for (int i = 0; i < n; ++i) { long long l = 0, r = 1e18, s = a[n - 1] - a[i]; while (l < r) { long long mid = (l + r) >> 1; __int128_t sum = a[0] - mid; sum *= (i + 1); if (sum + s <= k) r = mid; else l = mid + 1; } res = min(res, l + i); } cout << res << endl; } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) solve(); return 0; }
806	#include <bits/stdc++.h> using namespace std; int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t = 1; cin >> t; while (t--) { long long n; cin >> n; long long k; cin >> k; long long a[n], i; long long sum = 0; for (i = 0; i < n; i++) { cin >> a[i]; sum += a[i]; } sort(a, a + n); long long c = 0; for (i = 0; i < n; i++) { if (a[i] == a[0]) c++; } long long ans = 1e12; if (n == 1) { if (a[0] > k) ans = a[0] - k; else ans = 0; cout << ans << "\n"; continue; } if (sum <= k) { cout << << "\n"; continue; } long long pre[n]; pre[0] = a[0]; for (i = 1; i < n; i++) { pre[i] = pre[i - 1] + a[i]; } for (i = 0; i < n - 1; i++) { sum = pre[n - i - 1] - pre[0]; long long d = k - sum; d = floor((double)d / (i + 1)); if (d > a[0]) { ans = min(ans, i); continue; } long long move = a[0] - d; move += i; ans = min(ans, move); } cout << ans << "\n"; } return 0; }
807	#include <bits/stdc++.h> using namespace std; const int64_t N = 1e5 + 5, mod = 1e9 + 7; const int64_t N1 = 1e18; void solve() { int64_t n, m; cin >> n >> m; int64_t ans = 1e15; vector<int64_t> z(n); for (int64_t &it : z) { cin >> it; } sort(z.begin(), z.end()); vector<int64_t> prf(n); for (int64_t i = 0; i < n; i++) { prf[i] = z[i]; if (i) { prf[i] += prf[i - 1]; } } int64_t gh = prf.back(); auto plz = [&](int64_t x) { int64_t lo = 0, hi = n - 1, mid, curans = 2e15; while (lo <= hi) { mid = (lo + hi) >> 1; if (gh - (prf[n - 1] - prf[n - - mid]) - z[0] + x + x * mid <= m) { curans = mid; hi = mid - 1; } else { lo = mid + 1; } } return curans; }; int64_t lo = 0, hi = 1e15; while (hi - lo > 3) { int64_t mid1 = lo + (hi - lo) / 3; int64_t mid2 = hi - (hi - lo) / 3; if (plz(z[0] - mid1) >= 2e15) { lo = mid1; continue; } if (-(mid1 + plz(z[0] - mid1)) < -(mid2 + plz(z[0] - mid2))) { lo = mid1; } else { hi = mid2; } } for (int64_t cur = lo; cur <= hi; cur++) { ans = min(ans, cur + plz(z[0] - cur)); } cout << ans << "\n"; } int32_t main() { ios::sync_with_stdio(false), cin.tie(nullptr), c
808	#include <bits/stdc++.h> using namespace std; const int64_t N = 1e5 + 5, mod = 1e9 + 7; const int64_t N1 = 1e18; void solve() { int64_t n, m; cin >> n >> m; int64_t ans = 1e15; vector<int64_t> z(n); for (int64_t &it : z) { cin >> it; } sort(z.begin(), z.end()); vector<int64_t> prf(n); for (int64_t i = 0; i < n; i++) { prf[i] = z[i]; if (i) { prf[i] += prf[i - 1]; } } int64_t gh = prf.back(); auto plz = [&](int64_t x) { int64_t lo = 0, hi = n - 1, mid, curans = 2e15; while (lo <= hi) { mid = (lo + hi) >> 1; if (gh - (prf[n - 1] - prf[n - - mid]) - z[0] + x + x * mid <= m) { curans = mid; hi = mid - 1; } else { lo = mid + 1; } } return curans; }; int64_t lo = 0, hi = 1e15; while (hi - lo > 3) { int64_t mid1 = lo + (hi - lo) / 3; int64_t mid2 = hi - (hi - lo) / 3; if (plz(z[0] - mid1) >= 2e15) { lo = mid1; continue; } if (-(mid1 + plz(z[0] - mid1)) <= -(mid2 + plz(z[0] - mid2))) { lo = mid1; } else { hi = mid2; } } for (int64_t cur = lo; cur <= hi + n; cur++) { ans = min(ans, cur + plz(z[0] - cur)); } cout << ans << "\n"; } int32_t main() { ios::sync_with_stdio(false), cin.tie(nullptr
809	#include <bits/stdc++.h> using namespace std; const int64_t N = 1e5 + 5, mod = 1e9 + 7; const int64_t N1 = 1e18; void solve() { int64_t n, m; cin >> n >> m; int64_t ans = 1e15; vector<int64_t> z(n); for (int64_t &it : z) { cin >> it; } sort(z.begin(), z.end()); vector<int64_t> prf(n); for (int64_t i = 0; i < n; i++) { prf[i] = z[i]; if (i) { prf[i] += prf[i - 1]; } } int64_t gh = prf.back(); auto plz = [&](int64_t x) { int64_t lo = 0, hi = n - 1, mid, curans = 2e15; while (lo <= hi) { mid = (lo + hi) >> 1; if (gh - (prf[n - 1] - prf[n - - mid]) - z[0] + x + x * mid <= m) { curans = mid; hi = mid - 1; } else { lo = mid + 1; } } return curans; }; int64_t lo = 0, hi = 1e15; while (hi - lo > 3) { int64_t mid1 = lo + (hi - lo) / 3; int64_t mid2 = hi - (hi - lo) / 3; if (plz(z[0] - mid1) >= 2e15) { lo = mid1; continue; } if (-(mid1 + plz(z[0] - mid1)) < -(mid2 + plz(z[0] - mid2))) { lo = mid1; } else { hi = mid2; } } for (int64_t cur = lo; cur <= hi + 3; cur++) { ans = min(ans, cur + plz(z[0] - cur)); } cout << ans << "\n"; } int32_t main() { ios::sync_with_stdio(false), cin.tie(nullptr
810	#include <bits/stdc++.h> using namespace std; void _cout(int x) { cout << x; } void _cout(char x) { cout << x; } void _cout(long long int x) { cout << x; } void _cout(string x) { cout << x; } void _cout(bool x) { cout << x; } template <class T> void _cout(vector<T> &arr) { cout << "[ "; for (T item : arr) { _cout(item); cout << " "; } cout << "]"; } void init() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); } void solve() { int n; long long int k; cin >> n >> k; vector<int> arr(n); long long int sum = 0LL; for (int i = 0; i < n; i++) { cin >> arr[i]; sum += arr[i]; } if (sum <= k) { cout << << "\n"; return; } if (n == 1) { cout << (sum - k) << "\n"; return; } if (k + == sum) { cout << << "\n"; return; } sort(arr.begin(), arr.end()); vector<long long int> sufSum(n); sufSum[n - 1] = arr[n - 1]; for (int i = n - 2; i >= 0; i--) { sufSum[i] = sufSum[i + 1] + arr[i]; } long long int need = sum - k; long long int ans = INT_MAX; for (int i = n - 1; i > 0; i--) { long long int bSum = sufSum[i]; int bC = n - i; long long int preX = bSum - (arr[0] * bC); if (preX >= need) { ans = min(ans, (bC * 1LL)); continue; } long long int x = max((need - bSum + (arr[0] * bC) + (bC + 1) - 1) / (bC + 1), 0LL); ans = min(
811	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 9, inf = 0x3f3f3f3f, mod = 998244353; long long C[5010][5010]; void solve() { for (int i = 0; i <= 5000; i++) { C[i][0] = 1; for (int j = 1; j <= i; j++) { C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod; } } long long n, k; scanf("%lld%lld", &n, &k); string s; cin >> s; int lo = 0, ri = 0, cnt = 0, plo = -inf, pri = -inf; long long ans = 0; if (k == 0) { printf("0\n"); return; } while (ri < n) { if (s[ri] == '1') cnt++; while (ri + < n && s[ri + 1] == '0') ri++; while (cnt > k) { if (s[lo] == '1') cnt--, lo++; } if (cnt == k) { ans = (ans + C[ri - lo + 1][k]) % mod; if (plo!= -inf) { ans = (ans - C[pri - lo + 1][k - 1] + mod) % mod; } plo = lo; pri = ri; } ri++; } if (pri == -inf) { printf("1\n"); return; } printf("%lld\n", (ans + mod) % mod); } int main() { solve(); return 0; }
812	#include <bits/stdc++.h> using namespace std; const long long int mod = 998244353; const long long int inf = 1e18; const long long int N = 5000; long long int factorialNumInverse[N + 1]; long long int naturalNumInverse[N + 1]; long long int fact[N + 1]; void InverseofNumber(long long int p) { naturalNumInverse[0] = naturalNumInverse[1] = 1; for (long long int i = 2; i <= N; i++) naturalNumInverse[i] = naturalNumInverse[p % i] * (p - p / i) % p; } void InverseofFactorial(long long int p) { factorialNumInverse[0] = factorialNumInverse[1] = 1; for (long long int i = 2; i <= N; i++) factorialNumInverse[i] = (naturalNumInverse[i] * factorialNumInverse[i - 1]) % p; } void factorial(long long int p) { fact[0] = 1; for (long long int i = 1; i <= N; i++) { fact[i] = (fact[i - 1] * i) % p; } } signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); long long int p = mod; InverseofNumber(p); InverseofFactorial(p); factorial(p); long long int n, k; string s; cin >> n >> k >> s; long long int l = 0, r = 0; vector<long long int> a; for (long long int i = 0; i < n; i++) { if (s[i] == '1') a.push_back(i); } if (a.size() < k || k == 0) { cout << << "\n"; return 0; } r = (a.size() == k? n - : a[k] - 1); long long int ans = (fact[r - l + 1] * (factorialNumInverse[k] * factorialNumInverse[r - l + - k]) % mod) % mod; long long int pl = l, pr = r; bool done = 0
813	#include <bits/stdc++.h> using namespace std; const int N = 5005; const int mod = 998244353; void bmod(int &x) { x -= mod, x += x >> & mod; } int norm(int x) { return x <? x + mod : x; } void Add(int &x, int y) { x += y - mod, x += x >> & mod; } void Sub(int &x, int y) { x -= y, x += x >> & mod; } int inv(int x, int k = mod - 2) { int r = 1; while (k) { if (k & 1) r = (long long)x * r % mod; x = (long long)x * x % mod; k >>= 1; } return r; } const int Flen = N; int fact[Flen], infact[Flen]; void preF(int n = Flen - 1) { fact[0] = 1; for (int i = 1; i <= n; ++i) fact[i] = (long long)fact[i - 1] * i % mod; infact[n] = inv(fact[n]); for (int i = n; i; --i) infact[i - 1] = (long long)infact[i] * i % mod; } int C(int x, int y) { return y < || x < y? : (long long)fact[x] * infact[y] % mod * infact[x - y] % mod; } int n, m; char str[N]; int f[N], s[N]; int main() { preF(); scanf("%d%d%s", &n, &m, str + 1); if (!m) return puts("1"), 0; f[0] = 1; for (int i = 1; i <= n; ++i) { s[i] = s[i - 1] + (str[i] -= 48); } for (int i = 1, j = 0; i <= n; ++i) { f[i] = f[i - 1]; if (str[i]) { while (j < i && s[i] - s[j] > m) ++j; if (
814	#include <bits/stdc++.h> #pragma GCC optimize("O3") #pragma GCC target("popcnt") using namespace std; mt19937 bruh(chrono::steady_clock::now().time_since_epoch().count()); const long long N = 1e6 + 100; const long long mod = 998244353; const long long big = 1e17; long long t, n, m; string a[N]; pair<long long, long long> c[N]; int x[N], d[N], e[N]; int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); cin >> t; while (t--) { cin >> n >> m; for (int i = 0; i < n; i++) cin >> x[i]; for (int i = 0; i < n; i++) cin >> a[i]; long long ans = -1e10; for (int j = 0; j < (1 << n); j++) { for (int i = 0; i < m; i++) c[i] = make_pair(0, i), d[i] = 0; long long sum = 0; for (int i = 0; i < n; i++) { if ((1 << i) & j) { sum += x[i]; for (int k = 0; k < m; k++) { if (a[i][k] == '1') c[k].first--; } } else { sum -= x[i]; for (int k = 0; k < m; k++) if (a[i][k] == '1') c[k].first++; } } sort(c, c + m); for (int i = 0; i < m; i++) d[c[i].second] = i + 1, sum = sum + c[i].first * (i + 1); bool t = 1; for (int i = 0; i < n; i++) { long long sum2 = 0; for (int k = 0; k < m; k++) if (a[i][k]) sum2 += d[k]; if (((1 << i) & j) && sum2 > x
815	#include <bits/stdc++.h> using namespace std; const int MAX = 1e4 + 10; const int MOD = 998244353; int x[11], p[MAX], q[MAX], ret[MAX]; char s[11][MAX]; int main() { int T; cin >> T; while (T--) { int n, m; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", x + i); for (int i = 0; i < n; i++) scanf("%s", s[i] + 1); long long ans = 0; for (int i = 0; i < (1 << n); i++) { for (int j = 1; j <= m; j++) p[j] = 0; for (int j = 1; j <= m; j++) q[j] = j; long long sum = 0; for (int j = 0; j < n; j++) { int tag = ((1 << j) & i)? : -1; sum -= tag * x[j]; for (int k = 1; k <= m; k++) { if (s[j][k] == '0') continue; p[k] += tag; } } sort(q + 1, q + m + 1, [](int x, int y) { return p[x] < p[y]; }); for (int j = 1; j <= m; j++) sum += p[q[j]] * j; if (sum > ans) { ans = sum; for (int j = 1; j <= m; j++) ret[q[j]] = j; } } for (int i = 1; i <= m; i++) printf("%d ", ret[i]); cout << endl; } return 0; }
816	#include <bits/stdc++.h> using namespace std; int n, m, a[10], c[1005]; char b[10][1005]; vector<int> g[10]; int id[1005]; bool cmp(int i1, int i2) { return c[i1] < c[i2]; } int p[1005], p2[1005]; int main() { int t; scanf("%d", &t); while (t--) { scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) { scanf("%d", &a[i]); } for (int i = 0; i < n; i++) { scanf("\n%s", b[i] + 1); g[i].clear(); for (int j = 1; j <= m; j++) { if (b[i][j] == '1') { g[i].push_back(j); } } } long long ans = 0; for (int i = 1; i <= m; i++) id[i] = i; for (int i = 0; i < (1 << n); i++) { memset(c, 0, sizeof(c)); for (int j = 0; j < n; j++) { for (int k : g[j]) { if (i & (1 << j)) c[k]++; else c[k]--; } } sort(id + 1, id + + m, cmp); for (int j = 1; j <= m; j++) { p[id[j]] = j; } long long sum = 0; for (int j = 0; j < n; j++) { int h = 0; for (int k : g[j]) { h += p[k]; } sum += abs(a[i] - h); } if (sum >= ans) { ans = sum; for (int j = 1; j <= m; j++) { p2[j] = p[j]; } } } for (int i = 1; i <= m; i++) { printf("%d ", p2[i]); } printf("\n"); } return 0; }
817	#include <bits/stdc++.h> using namespace std; int e[11]; vector<int> score(10010); vector<int> ans; string s[11]; void solve() { int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) cin >> e[i]; for (int i = 1; i <= n; i++) cin >> s[i]; int up = << n; int mx = 0; vector<pair<int, int> > ev(m + 1); for (int i = 0; i < up; i++) { for (int j = 1; j <= m; j++) { ev[j].first = 0; ev[j].second = j; } for (int j = 1; j <= n; j++) for (int k = 1; k <= m; k++) { if (s[j][k - 1] == '1') ev[k].first += (i & << j - 1)? : -1; } int sum = 0; for (int j = 1; j <= n; j++) sum += (i & << j - 1)? -e[j] : e[j]; sort(ev.begin() + 1, ev.end()); for (int j = 1; j <= m; j++) { score[ev[j].second] = j; sum += j * ev[j].first; } if (mx < sum) { mx = sum; ans = score; } } for (int i = 1; i <= m; i++) cout << ans[i] << " \n"[i == m]; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); int t; cin >> t; while (t--) solve(); return 0; }
818	#include <bits/stdc++.h> using namespace std; const int N = 3e5 + 10, M = * N, mod = 998244353; int first[N]; string s[N]; int ans[N]; void solve() { int n, m; cin >> n >> m; for (int i = 1; i <= n; i++) cin >> first[i]; for (int i = 1; i <= m; i++) cin >> s[i], s[i] = " " + s[i]; long long res = 0, tmp; for (int k = 0; k < (1 << n); k++) { tmp = 0; for (int i = 0; i < n; i++) { int r = 1; if (k >> i & 1) r = -1; tmp += r * first[i + 1]; } vector<pair<int, int> > num; for (int i = 1; i <= m; i++) { int tmp = 0; for (int j = 0; j < n; j++) { int r = -1; if (k >> j & 1) r = 1; tmp += (s[j + 1][i] - '0') * r; } num.push_back({tmp, i}); } sort((num).begin(), (num).end()); for (int i = 1; i <= m; i++) tmp += num[i - 1].first * i; if (res < tmp) { res = tmp; for (int i = 0; i < m; i++) { auto &[val, id] = num[i]; ans[id] = i + 1; } } } for (int i = 1; i <= m; i++) cout << ans[i] <<''; cout << '\n'; } int main() { ios::sync_with_stdio(0), cin.tie(0); cout.precision(2), cout.setf(ios::fixed); int t; cin >> t; while (t--) solve(); return 0; }
819	#include <bits/stdc++.h> using namespace std; void read(vector<int64_t> &a); void read(vector<string> &a); void read(vector<vector<int64_t>> &a); void read(vector<pair<int64_t, int64_t>> &a); void solve() { int64_t n, m; cin >> n >> m; vector<int64_t> exp(n); read(exp); vector<string> mat(n); read(mat); int64_t best = 0; vector<int64_t> ret; for (int64_t x = 0; x < (1 << n); x++) { string b = std::bitset<32>(x).to_string(); reverse(b.begin(), b.end()); vector<pair<int64_t, int64_t>> order(m); for (int64_t i = 0; i < m; i++) { int64_t temp = 0; for (int64_t j = 0; j < n; j++) { if (b[j] == '1') temp += (mat[j][i] - '0'); else temp -= (mat[j][i] - '0'); } order[i] = {temp, i}; } sort(order.begin(), order.end()); reverse(order.begin(), order.end()); int64_t ans = 0; for (int64_t i = 0; i < n; i++) { if (b[i] == '0') ans += exp[i]; else ans -= exp[i]; } int64_t tog = m; vector<int64_t> haha(m); for (auto x : order) { ans += (x.first) * (tog); haha[x.second] = tog; tog--; } if (ans > best) { best = ans; ret = haha; } } for (int64_t i : ret) cout << i << " "; cout << endl; } int32_t main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int64_t t = 1; cin >> t; for (int64_t tt = 1; tt <= t
820	#include <bits/stdc++.h> using namespace std; const int maxn = 1e4 + 9; const long long MOD = 1e9 + 7; const int mod = 998244353; inline long long qpow(long long b, long long e, long long m) { long long a = 1; for (; e; e >>= 1, b = b * b % m) if (e & 1) a = a * b % m; return a; } long long exgcd(long long a, long long b, long long &x, long long &y) { if (b == 0) { x = 1, y = 0; return a; } long long d = exgcd(b, a % b, x, y); long long z = x; x = y, y = z - y * (a / b); return d; } int x[19]; char s[19][maxn]; int ans[maxn]; pair<int, int> val[maxn]; bool cmp(pair<int, int> A, pair<int, int> B) { return A.second < B.second; } int main() { int _; scanf("%d", &_); while (_--) { int n, m; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", &x[i]); for (int i = 0; i < n; i++) { scanf("%s", s[i]); } int v = 0; for (int i = 0; i < (1 << n); i++) { int res = 0; for (int j = 0; j < n; j++) { if (i >> j & 1) res += x[j]; else res -= x[j]; } for (int k = 0; k < m; k++) { val[k].first = 0; val[k].second = k; } for (int j = 0; j < n; j++) { for (int k = 0; k < m; k++) { if (res[j][k] == '1') { if (i >> j & 1) val[k].first--; else val[k].first++; } } } sort(val, val + m);
821	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m; cin >> n >> m; int x[n]; for (int i = 0; i < n; i++) cin >> x[i]; string s[n]; for (int i = 0; i < n; i++) cin >> s[i]; int ans[m], score = 0; for (int i = 0; i < (1 << n); i++) { vector<pair<int, int> > vt; for (int j = 0; j < m; j++) { int cnt = 0; for (int k = 0; k < n; k++) { if (s[k][j] == '1') { if (i & (1 << k)) cnt++; else cnt--; } } vt.push_back(make_pair(cnt, j)); } sort(vt.begin(), vt.end()); int temp[m], curr_score = 0; for (int j = 0; j < m; j++) { int idx = vt[j].second; temp[idx] = j + 1; } for (int j = 0; j < n; j++) { int sum = 0; for (int k = 0; k < m; k++) sum += (s[j][k] - '0') * temp[k]; curr_score += abs(sum - x[j]); } if (curr_score > score) { score = curr_score; for (int j = 0; j < m; j++) ans[j] = temp[j]; } } for (int i = 0; i < m; i++) cout << ans[i] <<''; cout << '\n'; } }
822	#include <bits/stdc++.h> using namespace std; const int MAXN = + 5; const int MAXM = 1e4 + 5; const long long linf = 0x3f3f3f3f3f3f3f3f; int n, m; int a[MAXN]; char s[MAXN][MAXM]; int p[MAXN]; inline long long get_res(int mask) { long long has = 0; static int coef[MAXM]; memset(coef, 0, (m + 1) << 2); for (int i = 1; i <= n; ++i) { int t = (((mask) >> (i - 1)) & 1)? : -1; has += -t * a[i]; for (int j = 1; j <= m; ++j) if (s[i][j] == '1') coef[j] += t; } static int id[MAXN]; for (int i = 1; i <= m; ++i) id[i] = i; sort(id + 1, id + m + 1, [](int x, int y) { return coef[x] < coef[y]; }); for (int i = 1; i <= m; ++i) p[id[i]] = i; for (int i = 1; i <= m; ++i) has += coef[i] * p[i]; return has; } void solve(void) { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); int all = (1 << n) - 1; long long ans = -linf; int ansmask = -1; for (int mask = 0; mask <= all; ++mask) { long long cur = get_res(mask); if (cur > ans) ans = cur, ansmask = mask; } get_res(ansmask); for (int i = 1; i <= m; ++i) printf("%d ", p[i]); printf("\n"); } int main(void) { int T; scanf("%d", &T); while (T--) solve(); return
823	#include <bits/stdc++.h> using namespace std; const int MAXN = + 5; const int MAXM = 1e4 + 5; const long long linf = 0x3f3f3f3f3f3f3f3f; int n, m; int a[MAXN]; char s[MAXN][MAXM]; int p[MAXM]; inline long long get_res(int mask) { long long has = 0; static int coef[MAXM]; memset(coef, 0, (m + 1) << 2); for (int i = 1; i <= n; ++i) { int t = (((mask) >> (i - 1)) & 1)? : -1; has += -t * a[i]; for (int j = 1; j <= m; ++j) if (s[i][j] == '1') coef[j] += t; } static int id[MAXN]; for (int i = 1; i <= m; ++i) id[i] = i; sort(id + 1, id + m + 1, [](int x, int y) { return coef[x] < coef[y]; }); for (int i = 1; i <= m; ++i) p[id[i]] = i; for (int i = 1; i <= m; ++i) has += coef[i] * p[i]; return has; } void solve(void) { scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) scanf("%d", &a[i]); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); int all = (1 << n) - 1; long long ans = -linf; int ansmask = -1; for (int mask = 0; mask <= all; ++mask) { long long cur = get_res(mask); if (cur > ans) ans = cur, ansmask = mask; } get_res(ansmask); for (int i = 1; i <= m; ++i) printf("%d ", p[i]); printf("\n"); } int main(void) { int T; scanf("%d", &T); while (T--) solve(); return
824	#include <bits/stdc++.h> std::mt19937 rng( (unsigned int)std::chrono::steady_clock::now().time_since_epoch().count()); using namespace std; void solve(int ttt) { long long int n, m; cin >> n >> m; vector<long long int> x(n); for (long long int i = 0; i < n; i++) cin >> x[i]; vector<vector<int> > a(n, vector<int>(m)); for (long long int i = 0; i < n; i++) { string s; cin >> s; for (long long int j = 0; j < m; j++) { if (s[j] == '1') a[i][j] = 1; else a[i][j] = 0; } } long long int res = LLONG_MIN; vector<long long int> perm; for (int msk = 0; msk < (1 << n); msk++) { vector<int> coeff(m, 0); long long int curVal = 0; for (long long int i = 0; i < n; i++) { if (msk & (1 << i)) { curVal += x[i]; for (long long int j = 0; j < m; j++) { if (a[i][j]) coeff[j]++; } } else { curVal -= x[i]; for (long long int j = 0; j < m; j++) { if (a[i][j]) coeff[j]--; } } } vector<int> ind(m); iota(ind.begin(), ind.end(), 0); sort(ind.begin(), ind.end(), [&](int i, int j) { return coeff[i] < coeff[j]; }); long long int c = 1; for (auto i : ind) { curVal += c * coeff[i]; c++; } if (res < curVal) { res = curVal; vector<long long int> tmp(m); for (long long int i = 0; i < m; i++) { tmp[ind[i]] = i + 1; } swap(perm, tmp); } } for (long long int i = 0; i < m; i++) { c
825	#include <bits/stdc++.h> using namespace std; const int N = 10, M = 1e4 + 10; int n, m, first[N], s[M][N], coef[M], ord[M], res[M]; void solve() { cin >> n >> m; for (int i = 0; i < n; i++) cin >> first[i]; for (int i = 0; i < n; i++) { string b; cin >> b; for (int j = 0; j < m; j++) s[j + 1][i] = b[j] - '0'; } int ans = 0; for (int i = 0; i < << n; i++) { int sum = 0; for (int j = 0; j < n; j++) { if (i >> j & 1) sum += first[j]; else sum -= first[j]; } for (int j = 1; j <= m; j++) { coef[j] = 0; for (int k = 0; k < n; k++) { if (s[j][k]) coef[j] += (i >> k & 1)? -1 : 1; } ord[j] = j; } sort(ord + 1, ord + m + 1, [&](int first, int second) { return coef[first] < coef[second]; }); for (int j = 1; j <= m; j++) sum += j * coef[ord[j]]; if (ans < sum) { for (int j = 1; j <= m; j++) res[ord[j]] = j; ans = sum; } } for (int i = 1; i <= m; i++) cout << res[i] << " "; cout << endl; return; } int main() { int t; for (cin >> t; t--; solve()) ; return 0; }
826	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; vector<long long> a(n); for (int i = 0, ggdem = n; i < ggdem; ++i) cin >> a[i]; vector<string> s(n); for (int i = 0, ggdem = n; i < ggdem; ++i) cin >> s[i]; long long maxi = 0; vector<long long> res(m); for (int i = 0, ggdem = (1ll << n); i < ggdem; ++i) { vector<pair<long long, long long>> c(m); for (int j = 0, ggdem = n; j < ggdem; ++j) { long long p = 1; if (i & (1ll << j)) p = -1; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) { if (s[j][ii] == '1') c[ii].first += p; } } for (int ii = 0, ggdem = m; ii < ggdem; ++ii) c[ii].second = ii; sort(c.begin(), c.end()); long long val = 0; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) val += (ii + 1) * c[ii].first; for (int j = 0, ggdem = n; j < ggdem; ++j) { if (i & (1ll << j)) val += a[j]; else val -= a[j]; } if (val > maxi) { maxi = val; for (int ii = 0, ggdem = m; ii < ggdem; ++ii) res[c[ii].second] = ii; } } for (auto i : res) cout << i + << " "; cout << "\n"; } return 0; }
827	#include <bits/stdc++.h> using namespace std; int main() { int t; scanf("%d", &t); while (t--) { static int xx[10], ans[10000]; static char s[10][10000 + 1]; int n, m, ansv; scanf("%d%d", &n, &m); for (int i = 0; i < n; i++) scanf("%d", &xx[i]); for (int i = 0; i < n; i++) scanf("%s", s[i]); ansv = 0; memset(ans, 0, m * sizeof *ans); for (int b = 0; b < << n; b++) { static int kk[10000]; int sum = 0, cnt; vector<int> ii(m); for (int i = 0; i < n; i++) if (b >> i & 1) sum += xx[i]; else sum -= xx[i]; for (int h = 0; h < m; h++) { int k = 0; for (int i = 0; i < n; i++) if (s[i][h] == '1') { if (b >> i & 1) k--; else k++; } kk[h] = k, ii[h] = h; } sort(ii.begin(), ii.end(), [&](int i, int j) { return kk[i] < kk[j]; }); cnt = 1; for (int h : ii) sum += kk[h] * cnt++; if (sum > ansv) { ansv = sum; cnt = 1; for (int h : ii) { ans[h] = cnt++; } } } for (int h = 0; h < m; h++) printf("%d ", ans[h]); printf("\n"); } return 0; }
828	#include <bits/stdc++.h> using namespace std; constexpr long long int MOD = 998244353; constexpr double EPS = 1e-8; long long int N, M, K, T, H, W, L, R; void Solve() { cin >> N >> M; vector<int> v(N); for (int i = 0; i < N; i++) { cin >> v[i]; } vector<string> s(N); for (auto& i : s) cin >> i; int score = 0; vector<int> ans(M); for (int i = 0; i < << N; i++) { vector<int> sum(N); vector<int> point(M); int csum = 0; vector<pair<int, int>> vp; for (int j = 0; j < M; j++) { int n = 0; for (int k = 0; k < N; k++) { if (s[k][j] == '1') { if (i >> k & 1) { n++; } else { n--; } } } vp.push_back({n, j}); } sort(vp.begin(), vp.end()); for (int j = 0; j < vp.size(); j++) { point[vp[j].second] = j + 1; } for (int j = 0; j < N; j++) { for (int k = 0; k < M; k++) { if (s[j][k] == '1') { sum[j] += point[k]; } } } for (int j = 0; j < N; j++) { csum += abs(v[j] - sum[j]); } if (csum > score) { score = csum; ans = point; } } for (auto i : ans) cout << i << " "; cout << endl; } int main() { ios::sync_with_stdio(false); cin.tie(0); T = 1; cin >> T; while (T--) { Solve(); } }
829	#include <bits/stdc++.h> using namespace std; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); long long t; cin >> t; while (t--) { long long n, m; cin >> n >> m; vector<long long> x(n); for (long long i = 0; i < n; ++i) { cin >> x[i]; } vector<string> s(n); for (long long i = 0; i < n; ++i) { cin >> s[i]; } vector<vector<long long>> gr(1 << n); for (long long j = 0; j < m; ++j) { long long sum = 0; for (long long i = 0; i < n; ++i) { sum = (sum << 1) + s[i][j] - '0'; } gr[sum].push_back(j); } vector<vector<long long>> srt; for (long long i = 0; i < (1 << n); ++i) { if ((long long)gr[i].size()) { srt.push_back(gr[i]); } } vector<long long> col(m); for (long long i = 0; i < (long long)srt.size(); ++i) { for (auto& j : srt[i]) { col[j] = i; } } vector<vector<long long>> uses(n); for (long long i = 0; i < n; ++i) { for (long long j = 0; j < m; ++j) { if (x[i][j] == '1') { uses[i].push_back(col[j]); } } sort(uses[i].begin(), uses[i].end()); uses[i].erase(unique(uses[i].begin(), uses[i].end()), uses[i].end()); } long long ans = 0; vector<long long> vans; for (long long i = 0; i < (1 << n); ++i) { long long sum = 0; vector<long long> gcnt((long long)srt.size()); for (long long j = 0; j < n; ++j) { if (i & (1
830	#include <bits/stdc++.h> using namespace std; int main() { ios::sync_with_stdio(false); cin.tie(0); int tt; cin >> tt; while (tt--) { int n, m; cin >> n >> m; vector<int> x(n); for (int i = 0; i < n; i++) { cin >> x[i]; } vector<vector<int>> a(n, vector<int>(m)); for (int i = 0; i < n; i++) { string s; cin >> s; for (int j = 0; j < m; j++) { a[i][j] = (s[j] == '1'); } } const long long inf = (long long)2e18L; long long res = -inf, msk = 0; for (int i = 0; i < (1 << n); i++) { long long z = 0; for (int j = 0; j < n; j++) { if ((1 << j) & i) { z -= x[j]; } else { z += x[j]; } } long long ans = z; vector<int> cnt(m, 0); for (int j = 0; j < n; j++) { if ((1 << j) & i) { for (int k = 0; k < m; k++) { if (a[j][k]) { cnt[k] += 1; } } } else { for (int k = 0; k < m; k++) { if (a[j][k]) { cnt[k] -= 1; } } } } sort(cnt.begin(), cnt.end()); for (int j = 0; j < m; j++) { ans += cnt[j] * 1LL * (j + 1); } if (ans > res) { ans = res; msk = i; } } { vector<pair<int, int>> cnt(m); for (int i = 0; i < m; i++) { cnt[i].first = 0; cnt[i].second = i; } for (int j = 0; j < n; j++) { if ((1 << j) & msk) { for (int k = 0; k < m; k++) { if (a[j][
831	#include <bits/stdc++.h> using namespace std; char s[10][10001]; int X[10]; pair<int, vector<int>> Calculate(int n, int m, int mask) { vector<pair<int, int>> v(m); for (int k = 0; k < m; ++k) { int c = 0; for (int i = 0; i < n; ++i) { if (s[i][k] == '0') { continue; } c += ((mask & (1 << i))!= 0)? : -1; } v[k] = {c, k}; } int ans = 0; for (int i = 0; i < n; ++i) { int c = ((mask & (1 << i))!= 0)? -1 : 1; ans += c * X[i]; } vector<int> p(m); sort(v.begin(), v.end()); for (int k = 0; k < m; ++k) { ans += v[k].first * (k + 1); p[v[k].second] = k + 1; } return {ans, p}; } void Solve() { int n, m; scanf("%d%d", &n, &m); for (int i = 1; i <= n; ++i) { scanf("%d", &X[i]); } for (int i = 0; i < n; ++i) { scanf("%s", s[i]); } pair<int, vector<int>> ans = {INT_MIN, vector<int>()}; for (int mask = 0; mask < (1 << n); ++mask) { ans = max(ans, Calculate(n, m, mask)); } auto [_, p] = ans; for (int pi : p) { printf("%d ", pi); } printf("\n"); } int main() { int t; scanf("%d", &t); while (t--) { Solve(); } return 0; }
832	#include <bits/stdc++.h> using namespace std; const int N = 15; const int M = 1e4 + 5; int t, n, m, a[N], sum, f, ans[N], res; char s[N][M]; pair<int, int> c[M]; int main() { ios::sync_with_stdio(false); cin >> t; while (t--) { cin >> n >> m; res = -1; for (int i = 1; i <= n; i++) cin >> a[i]; for (int i = 1; i <= n; i++) cin >> (s[i] + 1); for (int i = 0; i < (1 << n); i++) { sum = 0; for (int j = 1; j <= m; j++) c[j] = {0, j}; for (int j = 1; j <= n; j++) { if ((i >> (j - 1)) & 1) f = 1; else f = -1; sum += f * a[j]; for (int k = 1; k <= m; k++) if (s[j][k] == '1') c[k].first -= f; } sort(c + 1, c + m + 1); for (int j = 1; j <= m; j++) sum += j * c[j].first; if (sum > res) { res = sum; for (int j = 1; j <= m; j++) ans[c[j].second] = j; } } for (int i = 1; i <= m; i++) cout << ans[i] <<''; cout << endl; } return 0; }
833	#include <bits/stdc++.h> using namespace std; const int N = 12; const int M = 10005; const int lim = 200000; const int inf = 1e9; int T; int n, m; int x[N]; char s[N][M]; int cnt[M]; int b[M]; int ans[M]; bool cmp(int i, int j) { return cnt[i] < cnt[j]; } int main() { scanf("%d", &T); while (T--) { scanf("%d%d", &n, &m); for (int i = 0; i <= n - 1; ++i) scanf("%d", &x[i]); for (int i = 0; i <= m - 1; ++i) scanf("%s", s[i]); int ret = 0; for (int mask = 0; mask <= (1 << n) - 1; ++mask) { for (int j = 0; j <= m - 1; ++j) cnt[j] = 0; for (int i = 0; i <= n - 1; ++i) { for (int j = 0; j <= m - 1; ++j) { if (s[i][j] == '1') { if (mask & (1 << i)) ++cnt[j]; else --cnt[j]; } } } for (int j = 0; j <= m - 1; ++j) b[j] = j; sort(b, b + m, cmp); int tmp = 0; for (int i = 0; i <= n - 1; ++i) { int r = 0; for (int j = 0; j <= m - 1; ++j) { if (s[i][b[j]] == '1') { r += j + 1; } } if (mask & (1 << i)) tmp += r - x[i]; else tmp -= r - x[i]; } if (tmp > ret) { ret = tmp; for (int j = 0; j <= m - 1; ++j) ans[b[j]] = j + 1; } } for (int j = 0; j <= m - 1; ++j) printf("%d ", ans[j]); printf("\n"); } return 0; }
834	#include <bits/stdc++.h> using namespace std; int T, n, m; int x[15]; char s[15][10005]; int v[10005], cnt[25], tmp[25]; int P[10005]; int ans; void dfs(int p, int sum) { if (p == n + 1) { int cur = m, res = sum; for (int i = 20; i >= 0; i--) { res += (i - 10) * (cur * - cnt[i] + 1) * cnt[i] / 2; cur -= cnt[i]; } tmp[0] = cnt[0]; for (int i = 1; i <= 20; i++) tmp[i] = tmp[i - 1] + cnt[i]; if (ans < res) { ans = res; for (int i = 1; i <= m; i++) { P[i] = tmp[v[i] + 10]--; } } return; } for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i]++; cnt[v[i] + 10]++; } } dfs(p + 1, sum - x[p]); for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i] -= 2; cnt[v[i] + 10]++; } } dfs(p + 1, sum + x[p]); for (int i = 1; i <= m; i++) { if (s[p][i] == '1') { cnt[v[i] + 10]--; v[i]++; cnt[v[i] + 10]++; } } } void solve() { scanf("%d%d", &n, &m); for (int i = 1; i <= n; i++) scanf("%d", &x[i]); for (int i = 1; i <= n; i++) { scanf("%s", &s[i][1]); } for (int i = 1; i <= m; i++) v[i] = 0; for (int i = 0;
835	#include <bits/stdc++.h> using namespace std; inline int read() { int ans = 0, f = 1; char c = getchar(); while (c > '9' || c < '0') { if (c == '-') f = -1; c = getchar(); } while (c >= '0' && c <= '9') { ans = (ans << 1) + (ans << 3) + c - '0'; c = getchar(); } return ans * f; } inline void write(int x) { if (x < 0) putchar('-'), x = -x; if (x / 10) write(x / 10); putchar((char)(x % 10) + '0'); } template <typename T> inline T Abs(T a) { return a >? a : -a; }; template <typename T, typename TT> inline T Min(T a, TT b) { return a < b? a : b; } template <typename T, typename TT> inline T Max(T a, TT b) { return a < b? b : a; } const int N = 1e4 + 5; int t, n, m, a[N], c[N], ans; char s[15][N]; pair<int, int> b[N]; signed main() { t = read(); while (t--) { n = read(); m = read(); for (int i = 1; i <= n; ++i) a[i] = read(); for (int i = 1; i <= n; ++i) scanf("%s", s[i] + 1); ans = -1e9; for (int i = 0; i < (1 << n); ++i) { for (int j = 1; j <= m; ++j) { b[j] = make_pair(0, j); for (int k = 1; k <= n; ++k) if (s[k][j] == '1') { if ((i >> (k - 1)) & 1) b[j].first++; else b[j].first--; } } sort(b + 1, b + + m); int tmp = 0; for (int j = 1; j <= n; ++j) if ((i >> (j - 1)) & 1)
836	#include <bits/stdc++.h> using namespace std; const int inf = 1e9 + 1; const long long infll = 1e18 + 1; const int mod = 998244353; mt19937_64 rnd(chrono::high_resolution_clock::now().time_since_epoch().count()); template <typename T> bool chmin(T &a, T b) { if (a > b) { a = b; return true; } return false; } template <typename T> bool chmax(T &a, T b) { if (a < b) { a = b; return true; } return false; } struct smth { int x; }; const int maxn = 1e6 + 1; int p[maxn]; long long h[maxn]; void solve() { int n; cin >> n; vector<long long> f(n + 1); f[0] = 0; long long s = 0; map<long long, int> mp; for (int i = 1; i <= n; i++) { f[i] = f[i - 1] ^ h[i]; mp[f[i]] = i; s ^= f[i]; } if (s == 0) { cout << n << '\n'; for (int i = 1; i <= n; i++) { cout << i <<''; } return; } if (mp.count(s)) { cout << n - << '\n'; for (int j = 1; j <= n; j++) { if (mp[s]!= j) { cout << j <<''; } } return; } for (int i = 1; i <= n; i++) { if (mp.count(s ^ f[i]) && mp[s ^ f[i]]!= i) { cout << n - << '\n'; for (int j = 1; j <= n; j++) { if (mp[s ^ f[i]]!= j && i!= j) { cout << j <<''; } } return; } } cout << n - << '\n'; for (int i = 1; i <= n; i++) { if (i!= && i!= n && i!= (n - 1) / 2) { cout << i <<''; }
837	#include <bits/stdc++.h> using namespace std; using uint = unsigned int; const int N = 1e6 + 5; mt19937 rnd(time(0)); int n, K, flag[N], pr[N], cnt; uint H[N], sum; unordered_map<uint, int> pos; int main() { scanf("%d", &n); K = n >> 1; flag[0] = flag[1] = 1, H[1] = 0; for (int i = 2; i <= n; i++) { if (!flag[i]) pr[++cnt] = i, H[i] = rnd(); for (int j = 1; j <= cnt && i * pr[j] <= n; j++) { flag[i * pr[j]] = 1, H[i * pr[j]] = H[i] ^ H[pr[j]]; if (i % pr[j] == 0) break; } } for (int i = 2; i <= n; i++) H[i] ^= H[i - 1], sum ^= H[i]; if (sum == 0) { printf("%d\n", n); for (int i = 1; i <= n; i++) printf("%d ", i); return 0; } for (int i = 1; i <= n; i++) if (H[i] == sum) { printf("%d\n", n - 1); for (int j = 1; j <= n; j++) if (j!= i) printf("%d ", j); return 0; } for (int i = 1; i <= n; i++) { if (pos.count(sum ^ H[i])) { int p = pos[sum ^ H[i]]; printf("%d\n", n - 2); for (int j = 1; j <= n; j++) if (j!= i && j!= p) printf("%d ", j); return 0; } pos[H[i]] = i; } printf("%d\n", n - 3); for (int i = 1; i <= n; i++) if (i!= && i!= K && i!= n) printf("%d ", i); return 0; }
838	#include <bits/stdc++.h> using namespace std; const int N = 1e6 + 2; int lpf[N]; long long val[N]; long long val1[N]; long long val2[N]; int use[N]; int n; void finish() { cout << accumulate(use + 1, use + n + 1, 0) << '\n'; for (int i = 1; i <= n; i++) { if (use[i]) cout << i <<''; } cout << '\n'; exit(0); } int main() { ios_base::sync_with_stdio(0); cin.tie(0); mt19937_64 rng( (long long)chrono::steady_clock::now().time_since_epoch().count()); for (int i = 1; i < N; i++) { lpf[i] = i; } for (int i = 2; i < N; i++) { if (lpf[i] == i) { val[i] = rng(); for (int j = * i; j < N; j += i) { lpf[j] = i; } } else { val[i] = val[lpf[i]] ^ val[i / lpf[i]]; } } for (int i = 1; i < N; i++) { val1[i] = val1[i - 1] ^ val[i]; val2[i] = val2[i - 1] ^ val1[i]; } cin >> n; for (int i = 1; i <= n; i++) use[i] = 1; long long x = val2[n]; if (!x) finish(); for (int i = 1; i <= n; i++) { if (val1[i] == x) { use[i] = 0; finish(); } } unordered_map<int, int> m; for (int i = 1; i <= n; i++) { if (m.count(val1[i] ^ x)) { use[i] = 0; use[m[val1[i] ^ x]] = 0; finish(); } m[val1[i]] = i; } assert(n % == 3); use[n] = 0; use[n / 2] =
839	#include <bits/stdc++.h> using namespace std; void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void intext() {} bool isPrime(int n) { if (n == 1) return false; if (n == 2) return true; for (int i = 2; i * i <= n; i++) { if (n % i == 0) return false; } return true; } int main() { ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr); intext(); long long t
840	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int row, column, r_row, r_column, f_row, f_column; int dr = 1, dc = 1; cin >> row >> column >> r_row >> r_column >> f_row >> f_column; int count; count = 0; while (f_row!= r_row && f_column!= r_column) { if (r_row + dr > row || r_row + dr < 1) { dr *= (-1); } if (r_column + dc > column || r_column + dc < 1) { dc *= (-1); } r_column += dc; r_row += dr; count++; } cout << count << endl; } }
841	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m; cin >> n >> m; int rb, cb, rd, cd; cin >> rb >> cb >> rd >> cd; int x1, x2; if (rb <= rd) { x1 = rd - rb; } else if (rb > rd) { x1 = * (n)-rb - rd; } if (cb <= cd) { x2 = cd - cb; } else if (cb > cd) { x2 = * (m)-rb - cd; } if (x1 < x2) { cout << x1 << endl; } else cout << x2 << endl; } return 0; }
842	#include <bits/stdc++.h> using namespace std; int main() { int f; cin >> f; int r, c; int rl, cl; int ra, ca; for (int i = 0; i < f; i++) { int tr = 0, tc = 0; cin >> r >> c; cin >> rl >> cl; cin >> ra >> ca; if (cl == ca) tc = 0; if (cl == ra) tr = 0; else if (rl < ra) tr = ra - rl; else tr = (r - rl) + (r - ra); if (cl == ca) tc = 0; else if (cl < ca) tc = ca - cl; else tc = (c - cl) + (c - ca); if (tr >= tc) cout << tc; else cout << tr; cout << endl; } return 0; }
843	#include <bits/stdc++.h> using namespace std; void solve() { int n, m, rb, cb, rd, cd; scanf("%d%d%d%d%d%d", &m, &n, &rb, &cb, &rd, &cd); int ans = 0; int dr = 1, dc = 1; while (rb!= rd && cb!= cd) { if (rb + dr < || rb + dr > n) dr *= -1; if (cb + dc < || cb + dc > m) dc *= -1; rb += dr; cb += dc; ans++; } printf("%d\n", ans); } int main() { int t; scanf("%d", &t); while (t--) { solve(); } }
844	#include <bits/stdc++.h> using namespace std; long long inf = 1000000007; double pi = acos(-1); long long p(long long a, long long b) { long long ans = 1; if (a < 0) a += inf; while (b) { if (b % == 1) { ans = ((ans % inf) * (a % inf)) % inf; } a = ((a % inf) * (a % inf)) % inf; if (a < 0) a += inf; b /= 2; } return ans; } long long lis(vector<long long>& arr) { vector<long long> temp; for (auto i : arr) { if (temp.empty() || i > temp.back()) temp.push_back(i); else { auto it = lower_bound(temp.begin(), temp.end(), i); *it = i; } } return temp.size(); } signed main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t = 1; cin >> t; for (long long tt = 1; tt <= t; tt++) { long long n, m, r1, c1, r2, c2; cin >> n >> m >> r1 >> c1 >> r2 >> c2; long long ans = 1e9; if (r1 <= r2) { ans = min(ans, r2 - r1); } else { ans = min(ans, r1 - r2 + * (n - r1)); } if (c1 <= 2) { ans = min(ans, c2 - c1); } else { ans = min(ans, c1 - c2 + * (m - c1)); } cout << ans << '\n'; } return 0; }
845	#include <bits/stdc++.h> using namespace std; const long long N = 1e17; const long long sz = 2e5 + 5; int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { long long r, c, rb, cb, rd, cd, mv1 = 1, mv2 = 1; cin >> r >> c >> rb >> cb >> rd >> cd; long long time = 0; while (true) { if (cb == cd || rb == rd) { break; } else { if (rb + mv1 > r || rb + mv1 <= 0) { mv1 *= -1; } else if (cb + mv2 > c || cb + mv2 <= 0) { mv2 *= -1; } rb += mv1; cb += mv2; } time++; } cout << time << endl; } }
846	#include <bits/stdc++.h> using namespace std; void solve() { int n, m, rb, cb, rd, cd; cin >> n >> m >> rb >> cb >> rd >> cd; int x = (rb <= rd)? abs(rd - rb) : (abs(rb - n) + abs(n - rd)); int y = (cb <= cd)? abs(cd - cb) : (abs(cb - n) + abs(n - cd)); int ans = min(x, y); cout << ans << endl; } int main() { int t; cin >> t; while (t--) solve(); return 0; }
847	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m, rb, rd, cb, cd, i, ans = 0, flag1 = 1, flag2 = 1; cin >> n >> m >> rb >> cb >> rd >> cd; while ((rb!= rd) && (cb!= cd)) { ans++; if (flag1) rb++; else rb--; if (rb > n) { rb -= 2; flag1 = 0; } if (rb < 1) { rb += 2; flag1 = 1; } if (flag2) cb++; else cb--; if (cb > m) { cb -= 2; flag2 = 0; } if (cb < 1) { cb += 2; flag2 = 1; } } cout << ans << endl; } return 0; }
848	#include <bits/stdc++.h> using namespace std; template <typename T> inline void read(T& x) { x = 0; bool f = 0; char ch = (char)getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = 1; ch = (char)getchar(); } while (ch >= '0' && ch <= '9') { x = x * + (ch & 15); ch = (char)getchar(); } if (f) x = -x; } template <typename T> inline void write(T x) { if (x < 0) x = -x, putchar('-'); static int st[45]; int top = 0; do { st[top++] = x % 10; x /= 10; } while (x); while (top) putchar(st[--top] + '0'); putchar('\n'); } const long double pi = acos(-1.0); const long double eps = (double)1e-7; const long long mod = 1e9 + 7; const int maxn = 1505; const int maxm = 5005; int main() { ios::sync_with_stdio(false); cin.tie(0); ; int T; cin >> T; while (T--) { int n, m, a1, b1, a2, b2; cin >> n >> m >> a1 >> b1 >> a2 >> b2; int dx = 1, dy = 1; int ans = 0; while (a1!= a2 && b1!= b2) { if (a1 + dx < || a1 + dx > n) dx = -dx; if (b1 + dy < || b1 + dy > m) dy = -dy; a1 += dx; b1 += dy; ans++; } cout << ans << "\n"; } }
849	#include <bits/stdc++.h> using namespace std; void go() { long long n, m, xr, yr, xd, yd; cin >> n >> m >> xr >> yr >> xd >> yd; long long dirx = 1, diry = 1; long long ans = 0; while (true) { if (xr == xd || yr == yd) { break; } xr += dirx; yr += diry; if (xr > xd) { dirx = -1; xr = n - 1; } if (yr > m) { diry = -1; yr = m - 1; } if (xr < 1) { xr = 2; dirx = 1; } if (yr < 1) { yr = 2; diry = 1; } ans++; } cout << ans << "\n"; } int32_t main() { ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; t = 1; cin >> t; while (t--) { go(); } return 0; }
850	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n, m, rb, cb, rd, cd; cin >> n >> m >> rb >> cb >> rd >> cd; int ans; if (rd - rb >= 0) ans = rd - rb; else ans = * n - (rd + rb); if (cd - cb >= 0) ans = min(ans, cd - cb); else ans = min(ans, * m - (rd + rb)); cout << ans << endl; } return 0; }
851	#include <bits/stdc++.h> using namespace std; const int nax = * (int)1e5 + 10; const int INF = (int)1e9 + 47; int main() { ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); int tt; cin >> tt; while (tt--) { int n, m, a, b, c, d; cin >> n >> m >> a >> b >> c >> d; int ans = INF; if (a <= c) ans = min(ans, c - a); if (b <= d) ans = min(ans, d - b); if (a > c) ans = min(ans, (n - a) + (n - c)); if (b > d) ans = min(ans, (m - b) + (m - d)); cout << ans << '\n'; } }
852	#include <bits/stdc++.h> using namespace std; int dx[] = {-1, 0, 1, 0, -1, -1, 1, 1}; int dy[] = {0, 1, 0, -1, -1, 1, -1, 1}; int kx[] = {-2, -1, 1, 2, 2, 1, -1, -2}; int ky[] = {1, 2, 2, 1, -1, -2, -2, -1}; bool com(pair<int, int> a, pair<int, int> b) { return abs(a.first - a.second) < abs(b.first - b.second); } void solved() { int n, x, y; cin >> n; vector<pair<int, int> > v; for (int i = 0; i < n; i++) { cin >> x >> y; v.push_back({x, y}); } sort(v.begin(), v.end(), com); int ar[n + 1]; memset(ar, 0, sizeof(ar)); for (auto it : v) { int a = it.first, b = it.second; if (ar[a] == 0) { cout << a <<'' << b <<'' << a << endl; ar[a] = 1; } else if (ar[b] == 0) { cout << a <<'' << b <<'' << b << endl; ar[b] = 1; } else { for (int i = 1; i <= n; i++) { if (ar[i] == 0) { cout << a <<'' << b <<'' << i << endl; ar[i] = 1; break; } } } } } int main() { long long int tc; cin >> tc; while (tc--) { solved(); } }
853	#include <bits/stdc++.h> using namespace std; int t, n, v[1010]; struct node { int l, r, d; } a[1010]; bool cmp(node x, node y) { return x.r - x.l < y.r - y.l; } int main() { cin >> t; while (t--) { memset(v, 0, sizeof(v)); cin >> n; for (int i = 1; i <= n; i++) cin >> a[i].l >> a[i].r; sort(a + 1, a + + n, cmp); for (int i = 1; i <= n; i++) { for (int j = a[i].l; j <= a[i].r; j++) { if (v[j] == 0) { a[i].d = j; v[j] = 1; break; } } } for (int i = 1; i <= n; i++) cout << a[i].l << " " << a[i].r << " " << a[i].d << endl; } }
854	#include <bits/stdc++.h> using namespace std; long long t, n, m, k, mod = 1e9 + 7, ans, a[200011]; string s, s2; bool flag, vis[2000111]; vector<long long> v, tmp; bool okD(long long d, long long mid, long long i) { return tmp[i] - * d >= mid; } bool ok(long long mid) { tmp = v; for (long long i = n - 1; i >= 2; i--) { long long d = tmp[i] - mid; d = min(v[i], d); if (d < 0) return false; d /= 3; tmp[i] -= d * 3; tmp[i - 1] += d; tmp[i - 2] += * d; } long long ret = 1e9; for (long long i = 0; i < n; i++) ret = min(ret, tmp[i]); return ret >= mid; } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin >> t; while (t--) { cin >> n; v.resize(n); for (long long i = 0; i < n; i++) cin >> v[i]; long long L = 1, R = 10; while (L <= R) { long long mid = (L + R + 1) / 2; if (ok(mid)) ans = mid, L = mid + 1; else R = mid - 1; } cout << ans << '\n'; } return 0; }
855	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e5 + 10; int a[MAXN]; int b[MAXN]; int c[MAXN]; int n; bool check(int x) { for (int i = 1; i <= n; i++) b[i] = a[i], c[i] = 0; for (int i = n; i >= 3; i--) { if (b[i] + c[i] < x) return false; int now = x - c[i]; if (now <= 0) { int res = b[i] / 3; b[i] -= res * 3; c[i - 2] += * res; c[i - 1] += res; } else { int res = (b[i] - now) / 3; b[i] -= res * 3; c[i - 2] += * res; c[i - 1] += res; } } if (b[1] + c[1] < x || b[2] + c[2] < x) return false; return true; } int main() { std::ios::sync_with_stdio(false); int _; cin >> _; while (_--) { cin >> n; for (int i = 1; i <= n; i++) cin >> a[i]; int l = 1, r = 10; while (l <= r) { int mid = l + r >> 1; if (check(mid)) { l = mid + 1; } else r = mid - 1; } cout << r << '\n'; } }
856	#include <bits/stdc++.h> using namespace std; const int mod = 1000000009; inline int qp(long long a, long long b) { long long ans = 1; for (; b;) { if (b & 1) ans = ans * a % mod; b >>= 1; a = a * a % mod; } return ans; } int main() { ios_base::sync_with_stdio(0); cin.tie(0), cout.tie(0); int t; cin >> t; for (; t--;) { int n, m, bx, by, dx, dy; long long p; cin >> n >> m >> bx >> by >> dx >> dy >> p; int cx = 1, cy = 1; long long u = 0, d = 1; p = (1 - p * qp(100, mod - 2) % mod + mod) % mod; for (int i = 0; i!= * (n - 1) * (m - 1); ++i) { if (bx + cx == || bx + cx > n) cx = -cx; if (by + cy == || by + cy > m) cy = -cy; bx += cx; by += cy; u = (u + 1) % mod; if (bx == dx || by == dy) { u = u * p % mod; d = d * p % mod; } } d = (1 - d + mod) % mod; cout << u * qp(d, mod - 2) % mod << '\n'; } }
857	#include <bits/stdc++.h> using namespace std; const long long MOD = 1e9 + 7; long long n, m, a, b, c, d, p; long long add(long long first, long long second) { return (first + second) % MOD; } long long sub(long long first, long long second) { return add(first, MOD - second); } long long mul(long long first, long long second) { return first * second % MOD; } long long binpow(long long first, long long second) { if (second == 0) return 1; if (second % 2) return mul(first, binpow(first, second - 1)); long long z = binpow(first, second / 2); return mul(z, z); } long long inv(long long first) { return binpow(first, MOD - 2); } long long divide(long long first, long long second) { return mul(first, inv(second)); } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long t; cin >> t; while (t--) { cin >> n >> m >> a >> b >> c >> d >> p; long long first = a, second = b; long long ans = 0, dr = 1, dc = 1; vector<long long> v; while (ans == || first!= a || second!= b || (first > && first < n && dr!= 1) || (second > && second < n && dc!= 1)) { if (a == c || b == d) v.push_back(ans); if (a == n) dr = -1; if (a == 1) dr = 1; if (b == m) dc = -1; if (b == 1) dc = 1; a += dr; b += dc; ans++; } p = divide(p, 100); long long ans2 = 0; for (long long i = 0; i < v.size(); i++) { long long A = v[i]; long long P = mul(p, binpow(sub(1, p), i)); long long Q = binpow(sub(1, p), v.size()); long long S = ans; ans2 = add
858	#include <bits/stdc++.h> using namespace std; const long long mod = 1e9 + 7; long long ksm(long long a, long long b, long long mod) { long long c = 1; while (b) { if (b & 1) c = c * a % mod; b >>= 1; a = a * a % mod; } return c; } long long inv(int x) { return ksm(x, mod - 2, mod); } int t, n, m, len, p, sx, sy, tx, ty, dx, dy; int main() { cin >> t; while (t--) { cin >> n >> m >> sx >> sy >> tx >> ty >> p; long long ans = 0, p1 = (1 - p * inv(100) % mod + mod) % mod, p2 = p * inv(100), P; dx = dy = 1; len = 0; if (sx == tx || sy == ty) P = p1; else P = 1; int tot = 0; for (int i = 1; i <= * (n - 1) * (m - 1); i++) { if (sx + dx > n || sx + dx < 1) dx = -dx; if (sy + dy > m || sy + dy < 1) dy = -dy; sx += dx, sy += dy, len = (len + 1) % mod; if (sx == tx || sy == ty) { tot++; ans = (ans + P * len % mod) % mod; P = p1 * P % mod; len = 0; } } if (sx == ty || sy == ty) P = P * inv(p1) % mod; else ans = (ans + len * P % mod) % mod; cout << (ans * inv((1 - P + mod) % mod)) % mod << endl; } }
859	#include <bits/stdc++.h> using namespace std; const int N = (int)2e5 + 50, LOGN = 17; const int INF = (int)1e9; int n, k; int ord[N], in[N], tim = 0; char las[N]; int lc[N], rc[N]; int res[N]; string str; void dfs(int v) { if (lc[v]!= -1) dfs(lc[v]); ord[tim] = v; in[v] = tim++; if (rc[v]!= -1) dfs(rc[v]); } void solve(int v, int& rem) { int la = -1; int cur = v; for (int i = 0; i < (rem); ++i) { if (cur == -1) break; if (las[cur]!='' && las[cur] > str[cur]) { la = i; } cur = lc[v]; } cur = v; vector<int> vs; for (int i = 0; i < (la + 1); ++i) { res[cur] = 1; rem--; vs.push_back(cur); cur = lc[cur]; } while (!vs.empty()) { if (rc[vs.back()]!= -1) solve(rc[vs.back()], rem); vs.pop_back(); } } void print_ans(int v) { if (lc[v]!= -1) print_ans(lc[v]); cout << str[v]; if (res[v]) cout << str[v]; if (rc[v]!= -1) print_ans(rc[v]); } int pos[256]; int main() { ios::sync_with_stdio(false); cin.tie(NULL); cin >> n >> k; cin >> str; for (int i = 0; i < (n); ++i) { cin >> lc[i] >> rc[i]; lc[i]--, rc[i]--; } dfs(0); fill(pos, pos + 256, INF); for (int i = n - 1; i >= 0; i--) { pos[str[ord[i]]] = i; char f =''; for (char c = '
860	#include <bits/stdc++.h> using namespace std; void main0(); int main() { clock_t start, end; ios::sync_with_stdio(false); cin.tie(0); main0(); return 0; } const int dx[8] = {0, 1, -1, 0, 1, 1, -1, -1}; const int dy[8] = {1, 0, 0, -1, 1, -1, -1, 1}; const int N = 2e5 + 5; const int M = 1e5; const int INF = 0x3f3f3f3f; const long long INFF = 0x3f3f3f3f3f3f3f3f3f; const int mod = 998244353; const double eps = 1e-6; mt19937 rnd( (unsigned int)chrono::steady_clock::now().time_since_epoch().count()); template <typename T> bool chkmin(T &x, T y) { return y < x? x = y, : 0; } template <typename T> bool chkmax(T &x, T y) { return y > x? x = y, : 0; } int n, k; string s; int lc[N], rc[N]; char ord[N]; int idx[N]; int p = 0; int flag[N]; void dfs1(int u) { if (lc[u]) dfs1(lc[u]); ord[++p] = u; idx[u] = p; if (rc[u]) dfs1(rc[u]); } int rep[N]; int dfs2(int u, int k) { if (k == 0) return 0; int cost = 0; if (lc[u]) cost += dfs2(lc[u], k - cost); if (flag[u] || cost) { rep[u] = 1, cost++; if (rc[u]) cost += dfs2(rc[u], k - cost); } return cost; } void main0() { cin >> n >> k >> s; s = "$" + s; for (int i = 1; i <= n; ++i) { cin >> lc[i] >> rc[i]; } dfs1(
