0	#include <bits/stdc++.h> using namespace std; int b[50]; int c[50]; int change(string s) { if (s == "a") return 1; if (s == "b") return 2; if (s == "c") return 3; if (s == "d") return 4; if (s == "e") return 5; if (s == "f") return 6; if (s == "g") return 7; if (s == "h") return 8; if (s == "i") return 9; if (s == "k") return 10; if (s == "j") return 11; if (s == "l") return 12; if (s == "m") return 13; if (s == "n") return 14; if (s == "o") return 15; if (s == "p") return 16; if (s == "q") return 17; if (s == "r") return 18; if (s == "s") return 19; if (s == "t") return 20; if (s == "u") return 21; if (s == "v") return 22; if (s == "w") return 23; if (s == "x") return 24; if (s == "y") return 25; if (s == "z") return 26; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; string stringg; cin >> stringg; int f = 0; for (int i = 0; i < stringg.size(); i++) { string k; k = stringg.substr(i, 1); f++; b[f] = change(k); } for (int i = 1; i <= n; i++) { c[i] = b[i]; } sort(c + 1, c + n + 1); int cnt = 0; for (int i = 1; i <= n; i++) { if (b[i]!= c[i]) cnt++; } cout << cnt << endl; memset(b, 127, sizeof(b)); memset(c, 127, sizeof(c)); } }
1	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 1; void solve() { long long p; cin >> p; if (p == 5) { cout << "2 4\n"; return; } p--; long long x = p / 2; p = p / x; cout << x <<'' << p << '\n'; } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) solve(); }
2	#include <bits/stdc++.h> const long long mod = 1e9 + 7; using namespace std; long long gcd(long long a, long long b) { return b? gcd(b, a % b) : a; } long long ksm(long long a, long long b) { long long ret = 1; while (b) { if (b & 1) ret = ret * a % mod; a = a * a % mod; b >>= 1; } return ret; } long long ans, t, n, k; const int N = 2e5 + 5; long long p[N]; void solve0() { long long ans = 0, cur = 1; for (int i = k; i >= 1; i--) { ans = (ans + cur * ksm(p[i - 1], n) % mod) % mod; cur = cur * (p[n - 1] - 1) % mod; } cout << (ans + cur) % mod << endl; } void solve1() { long long ans = 0, cur = 1; for (int i = k; i >= 1; i--) { cur = cur * (p[n - 1] + 1) % mod; } cout << cur << endl; } int main() { p[0] = 1; for (int i = 1; i < N; i++) p[i] = p[i - 1] * 2 % mod; cin >> t; while (t--) { cin >> n >> k; ans = 0; if (k == 0) { cout << 1 % mod << endl; continue; } if (n % 2 == 0) solve0(); else solve1(); } return 0; }
3	#include <bits/stdc++.h> using namespace std; const long long mod = static_cast<long long>(1e9 + 7); long long P, Q = 1; int n; long long a[15]; pair<long long, long long> f[15][1 << 14]; pair<long long, long long> g[5000000]; pair<long long, long long> p[1 << 14]; pair<long long, long long> h[1 << 14]; int count(int x) { if (!x) return 0; return (x & 1) + count(x >> 1); } void Init_F() { for (int i = 1; i <= n; ++i) { for (int s = 0; s < (1 << n); ++s) { if ((1 << (i - 1)) & s) { continue; } f[i][s] = make_pair(1, 1); for (int j = 1; j <= n; ++j) { if ((1 << (j - 1)) & s) { f[i][s].first = f[i][s].first * a[i] % mod; f[i][s].second = f[i][s].second * (a[i] + a[j]) % mod; } } } } } int GetIndexBase3(int left, int right) { int idx = 0; for (int i = n; i > 0; --i) { idx *= 3; if (left & (1 << (i - 1))) { idx += 1; } else if (right & (1 << (i - 1))) { idx += 2; } } return idx; } void Recursively_Init_G(int left, int right, int cur) { if (cur > n) { int idx = GetIndexBase3(left, right); g[idx] = make_pair(1, 1); for (int i = 1; i <= n; ++i) { if ((1 << (i - 1)) & left) { g[idx].first = g[idx].first * f[i][right].first % mod; g[idx].second = g[idx].second * f[i][right].second % mod; } } } else { Recursively_Init_G(left, right, cur + 1);
4	#include <bits/stdc++.h> namespace { const int L = 30; std::vector<int> GetBits(int x) { std::vector<int> r(L); for (int i = L - 1; i >= 0; --i) { r[i] = (x % 2); x /= 2; } return r; } int GetValue(const std::vector<int>& r) { int value = 0; for (int bit : r) { value = (2 * value) + bit; } return value; } std::vector<int> AskAnd(int x, int y) { printf("and %d %d\n", x, y); fflush(stdout); int answer; scanf("%d", &answer); return GetBits(answer); } void ApplyAndResult(std::vector<std::vector<int>>* a_ptr, int x, int y, const std::vector<int>& and_r) { std::vector<std::vector<int>>& a = (*a_ptr); for (int k = 0; k < L; ++k) { if (and_r[k] == 1) { a[x][k] = a[y][k] = 1; } else { if (a[x][k] == 1) { a[y][k] = 0; } else if (a[y][k] == 1) { a[x][k] = 0; } } } } std::vector<int> AskOr(int x, int y) { printf("or %d %d\n", x, y); fflush(stdout); int answer; scanf("%d", &answer); return GetBits(answer); } void ApplyOrResult(std::vector<std::vector<int>>* a_ptr, int x, int y, const std::vector<int>& or_r) { std::vector<std::vector<int>>& a = (*a_ptr); for (int k = 0; k < L; ++k) { if (or_r[k] == 0) { a[x][k] = a[y][k] = 0; } else { if (a[x][k] == 0) { a[y][k] = 1; } else if (a[y][k]
5	#include <bits/stdc++.h> using namespace std; long long power(long long a, long long n, long long md) { if (n == 0) return 1; if (n == 1) return a % md; if (n % 2 == 0) { long long t = power(a, n / 2, md) % md; return (t * t) % md; } return ((a % md) * power(a, n - 1, md) % md) % md; } vector<bool> prime; void sievefunc(long long n) { prime.assign(n + 1, 1); for (long long p = 2; p * p <= n; p++) { if (prime[p] == 1) { for (long long i = p * p; i <= n; i += p) prime[i] = 0; } } } vector<long long> primes; void primenumbers_in_vec(long long n) { sievefunc(n); for (long long i = 2; i < n; i++) if (prime[i]) primes.push_back(i); } bool ispos(string s, long long till, long long tga, long long tqa, long long tgb, long long tqb) { long long ga = 0, qa = 0, gb = 0, qb = 0; for (long long i = 0; i <= till; i++) { if (i % 2 == 0) { if (s[i] == '1') ga++; else if (s[i] == '?') qa++; } else { if (s[i] == '1') gb++; else if (s[i] == '?') qb++; } } long long rem1 = 5 - (till + 2) / 2; long long rem2 = 5 - (till + 1) / 2; if (ga + qa > gb + rem2) return 1; if (gb + qb > ga + rem1) return 1; return 0; } void func() { string s; cin >> s; long long tga = 0, tqa = 0, tgb = 0, tqb = 0; for (long long i = 0; i < 10; i++) { if (i % 2 == 0) { if (s[i]
6	#include <bits/stdc++.h> using namespace std; using LL = long long; const LL mod = 1e9 + 7; int n, k, u, v; vector<int> graph[205]; LL dp[205][205]; bool vis[205]; int main() { int t; scanf("%d", &t); while (t--) { scanf("%d%d", &n, &k); for (int i = 1; i < n; ++i) { scanf("%d%d", &u, &v); graph[u].push_back(v); graph[v].push_back(u); } if (k > 2) { LL ans = 0; for (int i = 1; i <= n; ++i) { fill_n(vis + 1, n, false); vis[i] = true; vector<int> cnt(graph[i].size(), 0); queue<tuple<int, int, int>> quu; for (int j = 0; j < graph[i].size(); ++j) { quu.push({graph[i][j], j, 1}); } int nowHeight = 1; while (!quu.empty()) { auto cur = quu.front(); quu.pop(); vis[get<0>(cur)] = true; if (get<2>(cur) > nowHeight) { dp[0][0] = 1; for (int j = 1; j <= graph[i].size(); ++j) { for (int l = 0; l <= k; ++l) { dp[j][l] = (dp[j - 1][l] + dp[i][l]) % mod; if (l > 0) { dp[j][l] = (dp[j - 1][l - 1] * cnt[j - 1] % mod + dp[j][l]) % mod; } } } ans = (ans + dp[graph[i].size()][k]) % mod; for (int j = 0; j <= graph[i].size(); ++j) { for (int l = 0; l <= k; ++l) { dp[j][l] = 0; } } fill_n(cnt.begin(), graph[i].size(), 0); ++nowHeight; } ++cnt[get<
7	#include <bits/stdc++.h> #pragma GCC optimize("unroll-loops") #pragma GCC optimize 03 using namespace std; int n1, m1, q, r; int ans = 0; int gcd(int a, int b) { if (a > b) swap(a, b); return (a == 0)? b : gcd(b % a, a); } int lcm(int a, int b) { return (a * b) / gcd(a, b); } signed main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<int> a(2 * n); for (int i = 0; i < 2 * n; ++i) { if (i < n) a[i] = 1; else a[i] = 0; } vector<int> b = a; for (int i = 0; i < n; ++i) { for (int j = 0; j < 2 * n; ++j) { if (b[j] == 1) cout << "("; else cout << ")"; } cout << "\n"; b = a; swap(a[i + 1], a[2 * n - i - 2]); } } }
8	#include <bits/stdc++.h> using namespace std; void solve() { int n, k; cin >> n >> k; vector<int> a(n); for (int i = 0; i < n; i++) cin >> a[i]; int dp[n + 1][n + 1]; memset(dp, 0, sizeof(dp)); for (int i = 1; i <= n; i++) { for (int j = 0; j <= i; j++) { dp[i][j] = dp[i - 1][j]; dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + (a[i - 1] == j)); } } for (int i = n; i >= k; i--) { if (dp[n][i] >= k) { cout << n - i << endl; return; } } cout << -1 << endl; } int main() { int t; cin >> t; for (int i = 0; i < t; i++) { solve(); } return 0; }
9	#include <bits/stdc++.h> using namespace std; using namespace std; const int maxn = 1e5 + 10; int n, m, t; bool prime[maxn]; string s; void solve() { for (int i = 0; i < n; i++) { if ((s[i] == '1') || (s[i] == '4') || (s[i] == '6') || (s[i] == '8') || (s[i] == '9')) { cout << 1 << endl; cout << s[i] << endl; return; } } for (int i = 0; i < n; i++) { for (int j = i + 1; j < n; j++) { if (!prime[(s[i] - '0') * 10 + (s[j] - '0')]) { cout << 2 << endl; cout << s[i] << s[j] << endl; return; } } } } int main() { for (int i = 2; i <= 100; i++) { prime[i] = true; for (int j = 2; j * j <= i; j++) { if (i % j == 0) { prime[i] = false; } } } cin >> t; while (t--) { cin >> n; cin >> s; solve(); } return 0; }
10	#include <bits/stdc++.h> using namespace std; int hashPower = 31; float pi = 3.141593; long long int power(long long int a, long long int b) { long long int res = 1; while (b) { if (b % 2) res = (res * a) % 1000000007; b /= 2; a = (a * a) % 1000000007; } return res; } int main() { long long int t; cin >> t; while (t--) { long long int n; cin >> n; string first, second; cin >> first; cin >> second; int a[n], b[n]; for (int i = 0; i < n; i++) { if (first[i] == '0') { a[i] = 0; } else { a[i] = 1; } } for (int i = 0; i < n; i++) { if (second[i] == '0') { b[i] = 0; } else { b[i] = 1; } } int count = 0; for (int i = 0; i < n; i++) { if (b[i]) { if (a[i] == 0) { count++; a[i] = 1; } else { if (a[i - 1] == 1 && (i - 1 >= 0)) { count++; a[i - 1] = 2; } else if (a[i + 1] == 1 && (i + 1 < n)) { count++; a[i + 1] = 2; } } } } cout << count << endl; } }
11	#include <bits/stdc++.h> using namespace std; const bool read_file = false; const char fi[] = "XX.INP"; const char fo[] = "XX.OUT"; void set_up() { if (read_file) { freopen(fi, "r", stdin); freopen(fo, "w", stdout); } cin.clear(); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); } void just_do_it(); int main() { set_up(); just_do_it(); } int t, n; char c; const int ms = 2e5 + 20; int a[ms]; int b[ms]; int res; void query() { cin >> n; a[0] = -1; for (int i = 1; i <= n; i++) { cin >> c; a[i] = c - '0'; } a[n + 1] = -1; b[0] = -1; for (int i = 1; i <= n; i++) { cin >> c; b[i] = c - '0'; } b[n + 1] = -1; res = 0; for (int i = 1; i <= n; i++) { if (b[i] == 1) { if (a[i - 1] == 1) { a[i - 1] = -1; res++; } if (a[i] == 0) { a[i] = -1; res++; } if (a[i + 1] == 1) { a[i + 1] = -1; res++; } } } cout << res << endl; } void just_do_it() { cin >> t; for (int i = 0; i < t; i++) { query(); } }
12	#include <bits/stdc++.h> using namespace std; void print() { cout << "\n"; } template <typename T> void print(const T& x) { cout << x; } template <typename T, typename... R> void print(const T& x, const R&... r) { cout << x; print(r...); } template <typename T> void _prints(const T& x) { cout << x; } template <typename T, typename... R> void _prints(const T& x, const R&... r) { cout << x << " "; _prints(r...); } template <typename T> void prints(const T& x) { cout << x << " "; } template <typename T, typename... R> void prints(const T& x, const R&... r) { _prints(x, r...); print(); } template <typename T> void read(T& x) { cin >> x; } template <typename T, typename... R> void read(T& x, R&... r) { cin >> x; read(r...); } template <typename _T> void _debug(const char* s, _T x) { cerr << s << " = " << x << "\n"; } template <typename _T, typename... R> void _debug(const char* s, _T x, R... r) { while (*s!= ',') cerr << *s++; cerr << " = " << x << ", "; _debug(s + 1, r...); } int _int(const char& c) { if (c >= 'a' && c <= 'z') return c - 'a'; if (c >= 'A' && c <= 'Z') return c - 'A'; if (c >= '0' && c <= '9') return c - '0'; return c; } using ll = long long; using ld = long double; const int N = 2e3 + 5, INF = 1e9, MOD = 1e9 + 7; int dp[N][N]; int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t
13	#include <bits/stdc++.h> using namespace std; const int M = 1e4 + 5; inline int read() { char c = getchar(); int x = 0, f = 1; for (; c < '0' || c > '9'; c = getchar()) if (c == '-') f = 0; for (; c <= '9' && c >= '0'; c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48); return f? x : -x; } inline int abs(int x) { return x > 0? x : -x; } inline int min(int a, int b) { return a < b? a : b; } inline int max(int a, int b) { return a > b? a : b; } inline void swap(int &a, int &b) { a ^= b ^= a ^= b; } int n, k, a[M], c[M], t1, t2; int main() { n = read(), k = read(); for (int i = 2; i <= n; i++) { printf("and %d %d\n", i - 1, i); fflush(stdout); scanf("%d", &t1); printf("or %d %d\n", i - 1, i); fflush(stdout); scanf("%d", &t2); c[i] = t1 + t2; } printf("ans 1 3\n"); fflush(stdout); scanf("%d", &t1); printf("or 1 3\n"); fflush(stdout); scanf("%d", &t2); a[2] = c[2] - t1 - t2 + c[3] >> 1, a[1] = c[2] - a[2]; for (register int i = 3; i <= n; i++) a[i] = c[i] - a[i - 1]; sort(a + 1, a + 1 + n); printf("finish %d\n", a[k]); fflush(stdout); return 0; }
14	#include <bits/stdc++.h> using namespace std; const int N = 100005; const int M = 20; int n, q, m, a[N], bin[M]; class data { public: long long mx, lef, rig; data() { mx = lef = rig = 0; } } f[N][M]; void merge(data &ans, data x, data y) { if (x.lef >= y.rig) { ans.lef = x.lef + y.lef - y.rig; ans.rig = x.rig; ans.mx = max(x.mx, y.mx + x.lef - y.rig); } else { ans.lef = y.lef; ans.rig = x.rig + y.rig - x.lef; ans.mx = max(x.mx + y.rig - x.lef, y.mx); } } int main() { scanf("%d%d", &n, &q); for (int i = 1; i <= n; i++) scanf("%d", &a[i]); for (int i = 1; i <= n; i++) { int x; scanf("%d", &x); a[i] = x - a[i]; } m = 0; while (1 << (m + 1) <= n) m++; bin[0] = 1; for (int i = 1; i <= m; i++) bin[i] = bin[i - 1] * 2; for (int i = 1; i <= n; i++) { f[i][0].mx = abs(a[i]); if (a[i] > 0) f[i][0].lef = a[i]; else f[i][0].rig = -a[i]; } for (int j = 1; j <= m; j++) for (int i = 1; i + bin[j] - 1 <= n; i++) { merge(f[i][j], f[i][j - 1], f[i + bin[j - 1]][j - 1]); } while (q--) { int l, r; scanf("%d%d", &l, &r); data ans; for (int i
15	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 1; long long fact[N]; const int MOD = 998244353; long long power(long long x, long long y) { long long res = 1; x = x % MOD; while (y > 0) { if (y & 1) res = (res * x) % MOD; y = y >> 1; x = (x * x) % MOD; } return res; } long long modInverse(long long x) { return power(x, MOD - 2); } long long modAdd(long long a, long long b) { return (a % MOD + b % MOD + 2 * MOD) % MOD; } long long modMult(long long a, long long b) { return (a % MOD * b % MOD) % MOD; } long long modDiv(long long a, long long b) { return (a % MOD * modInverse(b)) % MOD; } void getFact() { fact[0] = 1; for (auto i = 1; i < N; i++) { fact[i] = (fact[i - 1] * i) % MOD; } } long long nCrModP(long long n, long long r) { if (r == 0) return 1; return ((fact[n] * modInverse(fact[r])) % MOD * modInverse(fact[n - r])) % MOD; } int main() { ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int test; cin >> test; getFact(); for (int t = 1; t <= test; t++) { int n; cin >> n; vector<long long> a(n); map<long long, int> m; for (int i = 0; i < n; i++) { cin >> a[i]; m[a[i]]++; } sort(a.begin(), a.end()); long long maxi = a[n - 1]; int ind = n - 1; while (ind >= 0) { if (maxi == a[ind]) { ind--; continue; } if (maxi - a[ind] >= 2) maxi = -1; else maxi = a[ind
16	#include <bits/stdc++.h> using namespace std; void TombStonePiledrider(void) { long long int a; cin >> a; string c; cin >> c; string b; cin >> b; long long int d = 0; for (long long int i = 0; i < a; ++i) { if (b[i] == '0') { continue; } bool ok = (c[i] == '0'); if (!ok && i - 1 >= 0) { ok = (c[i - 1] == '1'); if (ok) { c[i - 1] == 'k'; } } if (!ok && i + 1 < a) { ok = (c[i + 1] == '1'); if (ok) { c[i + 1] == 'k'; } } d += ok; } cout << d << '\n'; } int main() { std::ios_base::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); long long int TotalTestCase = 1; std::cin >> TotalTestCase; while (TotalTestCase--) { TombStonePiledrider(); } return 0; }
17	#include <bits/stdc++.h> using namespace std; struct Data { int l, r, w; Data(int a, int b, int c) { l = a; r = b; w = c; } Data(){}; }; bool cmp(Data a, Data b) { return a.w < b.w; } int tree[4 * 1000005], lazy[4 * 1000005]; void push(int indx) { tree[2 * indx] += lazy[indx]; tree[2 * indx + 1] += lazy[indx]; lazy[2 * indx] += lazy[indx]; lazy[2 * indx + 1] += lazy[indx]; lazy[indx] = 0; } void update(int node, int st, int en, int l, int r, int val) { if (st > r || en < l) return; if (st >= l && en <= r) { lazy[node] += val; tree[node] += val; } else { int mid = (st + en) / 2; push(node); update(2 * node, st, mid, l, r, val); update(2 * node + 1, mid + 1, en, l, r, val); tree[node] = min(tree[2 * node], tree[2 * node + 1]); } } int query(int node, int st, int en, int l, int r) { if (st > r || en < l) return 1e8; if (st >= l && en <= r) { return tree[node]; } int m = (st + en) / 2; push(node); return min(query(2 * node, st, m, l, r), query(2 * node + 1, m + 1, en, l, r)); } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; std::vector<Data> v(n); for (int i = 0; i < n; ++i) { int l, r, w; cin >> l >> r >> w; v[i] = Data(l, r, w); } sort(v.begin(), v.end(), cmp); int i =
18	#include <bits/stdc++.h> using namespace std; const long long modd = (1000LL * 1000LL * 1000LL + 7LL); int main(int argc, char *argv[]) { mt19937 rang(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int> rand_gen(0, modd); ios_base::sync_with_stdio(false); cin.tie(0); cout.precision(12); int test_cases = 1; for (int t = (1); t < (1) + (test_cases); ++t) { int n; cin >> n; set<long long> a; long long sum = 0; for (int i = (0); i < (0) + (n); ++i) { long long x; cin >> x; a.insert(x); sum += x; } int m; cin >> m; for (int i = (0); i < (0) + (m); ++i) { long long x; cin >> x; long long y; cin >> y; long long bord_low = x, bord_high = sum - y; long long ans = modd * modd; if (bord_high < bord_low) { auto it = a.lower_bound(bord_low); if (it!= a.begin()) { --it; ans = min(ans, max(bord_low - bord_high, bord_low - *it)); } it = a.lower_bound(bord_low); if (it!= a.end()) { ans = min(ans, *it - bord_high); } } else { auto it = a.lower_bound(bord_low); if ((it!= a.end()) && (*it <= bord_high)) { ans = 0; } else { if (it!= a.begin()) { --it; ans = min(ans, bord_low - *it); } it = a.lower_bound(bord_high); if (it!= a.end()) { ans = min(ans, *it - bord_high); } } } cout << ans << endl; } } return 0; }
19	#include <bits/stdc++.h> using namespace std; bool isComposite[10000]; string brute(string s) { int n = s.size(), ans = 1000000; for (long long i = 1; i < (1 << n); i++) { int tot = 0; int j = i; for (auto c : s) { if (j & 1) { tot *= 10; tot += (c - '0'); } j >>= 1; } if (isComposite[tot]) ans = min(ans, tot); } return to_string(ans); } void solve() { int k; cin >> k; string s; cin >> s; if (k < 5) { string ans = brute(s); cout << ans.size() << endl << ans << endl; } else { vector<int> cnt(10, 0); for (auto c : s) cnt[c - '0']++; int lenOne[5] = {1, 4, 6, 8, 9}; for (long long i = 0; i < 5; i++) { if (cnt[lenOne[i]]) { cout << 1 << endl << (char)('0' + lenOne[i]) << endl; return; } } for (long long i = 0; i < 10; i++) { if (cnt[i] > 1) { cout << 2 << endl << (char)('0' + i) << (char)('0' + i) << endl; } } } } int main() { for (long long i = 0; i < 10000; i++) isComposite[i] = false; isComposite[1] = true; for (long long i = 2; i < 10000; i++) { for (int j = 2; i * j < 10000; j++) isComposite[i * j] = true; } ios_base::sync_with_stdio(false); cin.tie(NULL); int T; cin >> T; for (long long t = 0; t < T; t++) { solve(); } }
20	#include <bits/stdc++.h> using namespace std; long long a[1005]; char op[] = "and"; char op2[] = "or"; char op3[] = "finish"; int n, k; void solve() { int f = 0; int num = 0; int m = n / 3; int x = 1; vector<int> res; int s = 0; while (num <= 6 * m) { int sum1, sum2, sum3; int x, y, z; printf("%s %d %d\n", op, s, s + 1); fflush(stdout); scanf("%d", &x); printf("%s %d %d\n", op2, s, s + 1); fflush(stdout); scanf("%d", &sum1); sum1 += x; printf("%s %d %d\n", op, s + 1, s + 2); fflush(stdout); scanf("%d", &y); printf("%s %d %d\n", op2, s + 1, s + 2); fflush(stdout); scanf("%d", &sum2); sum2 += y; printf("%s %d %d\n", op, s, s + 2); fflush(stdout); scanf("%d", &z); printf("%s %d %d\n", op2, s, s + 2); fflush(stdout); scanf("%d", &sum3); sum3 += z; y = sum1 + sum2 - sum3; y /= 2; x = sum1 - y; z = sum3 - x; res.push_back(x); res.push_back(y); res.push_back(z); num += 6; s += 3; fflush(stdout); } if (m * 3 < n) { for (int i = m * 3 + 1; i <= n; i++) { int g = res[res.size() - 1]; int x, y; printf("%s %d %d\n", op, i - 1, i); fflush(stdout); scanf("%d", &x); printf("%s %d %d\n", op2, i - 1, i); fflush(stdout); scanf("%d", &y); x += y; res.push_back(x -
21	#include <bits/stdc++.h> #pragma GCC optimize(1) #pragma GCC optimize(2) #pragma GCC optimize(3, "Ofast", "inline") using namespace std; char ss[300005]; int a[300005], sum[300005]; int main() { int t; scanf("%d", &t); while (t--) { int n, q; scanf("%d %d", &n, &q); scanf(" %s", ss); for (int i = 0; i < n; i++) { if (ss[i] == '+') a[i] = 1; else a[i] = -1; } for (int i = 1; i <= n; i++) { if (i % 2 == 0) sum[i] = sum[i - 1] - a[i - 1]; else sum[i] = sum[i - 1] + a[i - 1]; } while (q--) { int l, r; scanf("%d %d", &l, &r); if (sum[r] - sum[l - 1] == 0) printf("0\n"); else if ((sum[r] - sum[l - 1]) % 2 == 1) printf("1\n"); else printf("2\n"); } } return 0; }
22	#include <bits/stdc++.h> using namespace std; struct tri { long long x, y, z; tri() : x(0), y(0), z(0) {} tri(const long long x, const long long y, const long long z) : x(x), y(y), z(z) {} tri(const tri &t) : x(t.x), y(t.y), z(t.z) {} }; bool query_compare(const tri &a, const tri &b) { return a.x < b.x; } class OverlapCompare { public: bool operator()(const tri &a, const tri &b) { if (a.y == b.y) return a.x < b.x; return a.y < b.y; } }; long long n, m; tri querys[300005]; set<tri, OverlapCompare> overlap; long long dp[300005]; long long record[300005]; list<tri> be_add, be_remove; bool removed[300005]; int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (long long i = 0; i < m; i++) { cin >> querys[i].x >> querys[i].y >> querys[i].z; } stable_sort(querys, querys + m, query_compare); fill_n(dp, n + 1, 1); for (long long i = 0; i < m; i++) { set<tri, OverlapCompare>::iterator lb = overlap.lower_bound(tri(-1LL, querys[i].y, querys[i].z)); set<tri, OverlapCompare>::iterator ub = overlap.upper_bound(tri((long long)1e15, querys[i].z, 0LL)); if (lb!= overlap.begin()) { if ((--lb)->z < querys[i].y) { ++lb; } } for (set<tri, OverlapCompare>::iterator it = lb; it!= ub; it++) { if (it->x == querys[i].x) continue; if (dp[querys[
23	#include <bits/stdc++.h> using namespace std; const int maxn = 3030303; long long n, q, inv[maxn], inv_fac[maxn], fac[maxn], dp[maxn / 3][3]; long long C(long long x, long long y) { return (x < y || x < 0 || y < 0)? 0 : (fac[x] * ((inv_fac[y] * inv_fac[x - y]) % 1000000007)) % 1000000007; } int main() { fac[0] = inv_fac[0] = fac[1] = inv_fac[1] = inv[1] = 1; for (int i = 2; i < maxn; i++) { fac[i] = (fac[i - 1] * i) % 1000000007; inv[i] = ((1000000007 - (1000000007 / i)) * inv[1000000007 % i]) % 1000000007; inv_fac[i] = (inv_fac[i - 1] * inv[i]) % 1000000007; } scanf("%lld %lld", &n, &q); dp[0][0] = dp[0][1] = dp[0][2] = n; for (int i = 1; i <= 3 * n; i++) { long long sum = C(3 * n, i + 1), x1 = dp[i - 1][0], y1 = dp[i - 1][1]; dp[i][0] = (((sum + 1000000007 * 2 - x1 * 2 + 1000000007 - y1) % 1000000007) * inv[3]) % 1000000007; dp[i][1] = (dp[i][0] + x1) % 1000000007; dp[i][2] = (dp[i][1] + y1) % 1000000007; } for (int testcase = 0; testcase < q; testcase++) { long long x; scanf("%lld", &x); printf("%lld\n", (C(3 * n, x) + dp[x][0]) % 1000000007); } return 0; }
24	#include <bits/stdc++.h> using namespace std; const int maxn = 333333, maxm = 1111111, mod = 998244353; template <typename T> inline void read(T &x) { x = 0; bool f = 0; char ch = getchar(); while (ch < '0' || ch > '9') f |= ch == '-', ch = getchar(); while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); if (f) x = -x; } int n, m, q, a[maxn], pr[maxn], pl, mn[maxm], fa[maxn], id[maxn], at[maxn]; bool vis[maxm]; map<pair<int, int>, bool> mp; inline int getfa(int x) { return x == fa[x]? x : fa[x] = getfa(fa[x]); } inline void unite(int x, int y) { x = getfa(x); y = getfa(y); if (x!= y) fa[x] = y; } inline bool check(int x, int y) { x = getfa(x); y = getfa(y); return x == y; } int main() { read(n); read(q); for (int i = (1); i <= (n); i++) read(a[i]), m = max(m, a[i] + 1); for (int i = (2); i <= (m); i++) { if (!vis[i]) pr[++pl] = i, at[i] = pl + n, mn[i] = i; for (int j = (1); j <= (pl); j++) { if (i * pr[j] > m) break; vis[i * pr[j]] = true; mn[i * pr[j]] = pr[j]; if (i % pr[j] == 0) break; } } for (int i = (1); i <= (n + pl); i++) fa[i] = i; for (int i = (1); i <= (n); i++) { int x = a[i]; while (x!= 1) unite(i
25	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int m; int arr[5]; cin >> arr[1] >> arr[2] >> arr[3] >> m; sort(arr + 1, arr + 3 + 1); if ((arr[3] - arr[2] - arr[1] + 1) > m) cout << "NO" << endl; else if ((arr[3] + arr[2] + arr[1] - 3) < m) cout << "NO" << endl; else cout << "YES" << endl; } return 0; }
26	#include <bits/stdc++.h> using namespace std; #pragma GCC optimize(2) void io() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); } template <typename T> inline void debug(T const& x) { cout << x << "\n"; } inline int fread() { int ans = 0, fl = 1; char i = getchar(); while (i < '0' || i > '9') { if (i == '-') { fl = -1; } i = getchar(); } while (i >= '0' && i <= '9') { ans = ans * 10 + i - '0'; i = getchar(); } return ans * fl; } const long long maxn = 1e7 + 10; long long tot; long long a[maxn]; long long t, n; signed main() { io(); for (tot = 1;; ++tot) { a[tot] = a[tot - 1] + tot * 2ll - 1ll; if (a[tot] > 1000000000) break; } cin >> t; while (t--) { cin >> n; long long pos = lower_bound(a + 1, a + 1 + tot, n) - a; if (a[pos] == n) { cout << 1 << " " << pos << "\n"; continue; } pos--; long long res = n - a[pos]; if (res <= pos + 1ll) { cout << res << " " << pos + 1ll << "\n"; } else { res -= (pos + 1ll); cout << pos + 1ll << " " << pos + 1ll - res << "\n"; } } return 0; }
27	#include <bits/stdc++.h> using namespace std; template <typename T> T powe(T a, T b) { if (b == 0) return 1; T x = powe(a, b / 2) % 1000000007; x = (x * x) % 1000000007; if (b & 1) x = (x * (a % 1000000007)) % 1000000007; return x; } void fun(long long int n) { for (long long int i = 0; i < n; i++) { cout << "("; } for (long long int i = 0; i < n; i++) { cout << ")"; } } void solve() { long long int n; cin >> n; for (long long int i = 0; i <= n; i++) { fun(i); fun(n - i); cout << "\n"; } } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t; cin >> t; while (t--) { solve(); } return 0; }
28	#include <bits/stdc++.h> using namespace std; template <typename T> struct fenwick { int n; vector<T> t; T sum(int r) { if (r < 0) return 0; r = min(r, n - 1); T ans = 0; for (; r >= 0; r = (r & (r + 1)) - 1) ans += t[r]; return ans; } T sum(int l, int r) { return sum(r) - sum(l - 1); } void inc(int x, T y) { for (; x < n; x |= x + 1) t[x] += y; } fenwick(int n) : n(n), t(n, 0) {} }; constexpr int SPLIT = 550; constexpr int MAX = 3e5 + 5; int main() { ios_base::sync_with_stdio(0); int n; cin >> n; vector<int> a(n); for (int i = 0; i < n; i++) { cin >> a[i]; } vector<long long> res_ans(n); long long ans = 0; { fenwick<int> cnt(MAX); fenwick<long long> sum(MAX); fenwick<long long> remd(MAX); for (int i = 0; i < n; i++) { int num = a[i]; int cnt_lo = cnt.sum(num); int cnt_hi = i - cnt_lo; ans += sum.sum(num); ans += num * 1ll * cnt_hi; ans += num * 1ll * cnt_lo; ans += remd.sum(num); if (num < SPLIT) { for (int j = 0; j < i; j++) { if (a[j] > num) ans += a[j] % num; } } else { ans += sum.sum(MAX) - sum.sum(num); int prev = cnt.sum(num - 1); for (int cur = num; cur < MAX; cur += num) { int nowcnt = cnt.sum(cur + num - 1); ans -= (nowcnt - prev) * cur; prev = nowcnt; } } cnt.inc(num, 1);
29	#include <bits/stdc++.h> using namespace std; int main() { int n, k; cin >> n >> k; vector<int> v; int x, y, z, a, b, c; int x1, y1; cout << "and 1 2" << endl; cin >> x1; cout << "or 1 2" << endl; cin >> y1; x = x1 + y1; cout << "and 3 2" << endl; cin >> x1; cout << "or 3 2" << endl; cin >> y1; z = x1 + y1; cout << "and 1 3" << endl; cin >> x1; cout << "or 1 3" << endl; cin >> y1; y = x1 + y1; a = (x - z + y) / 2; b = (z - y + x) / 2; c = (y + z - x) / 2; v.push_back(a); v.push_back(b); v.push_back(c); for (int i = 4; i <= n; i++) { cout << "and 1 " << i << endl; cin >> x1; cout << "or 1 " << i << endl; cin >> y1; x = x1 + y1; v.push_back(x - 1); } sort(v.begin(), v.end()); cout << "finish " << v[k - 1] << endl; }
30	#include <bits/stdc++.h> using namespace std; int main() { int t, a, b, c; cin >> t; while (t--) { cin >> a >> b >> c; int n = abs(a - b); int check = 2 * n; if (a > check || b > check || c > check) cout << -1 << endl; else if (c <= n) cout << c + n << endl; else cout << n - c << endl; } return 0; }
31	#include <bits/stdc++.h> using namespace std; const int MAXN = 2e5 + 5; const int INF = 0x3f3f3f3f; long long a[MAXN]; struct node { long long x, y; } b[MAXN]; int n; int findpos(long long val) { int l = 1, r = n; int res = -1; while (l <= r) { int mid = (l + r) >> 1; if (a[mid] < val) { l = mid + 1; } else { res = mid; r = mid - 1; } } return res; } void solve() { cin >> n; long long sum = 0; for (int i = 1; i <= n; i++) { cin >> a[i]; sum += a[i]; } sort(a + 1, a + 1 + n); int m; cin >> m; for (int i = 1; i <= m; i++) { cin >> b[i].x >> b[i].y; int pos = findpos(b[i].x); if (pos == -1) { long long tmp = b[i].x - a[n]; long long now = sum - a[n]; if (now >= b[i].y) ; else { tmp += b[i].y - now; } cout << tmp << "\n"; } else { long long minn = 1e18; long long now = sum - a[pos]; if (now >= b[i].y) minn = 0; else { minn = b[i].y - now; } if (pos!= 1) { pos--; long long now1 = b[i].x - a[pos]; now = sum - a[pos]; if (now < b[i].y) { now1 += b[i].y - now; } minn = min(minn, now1); } cout << minn << "\n"; } } } int main() { ios::sync_with_stdio(0); cin.tie(nullptr); cout.tie(nullptr); int t; t = 1; while (t--) { solve(); } return 0; }
32	#include <bits/stdc++.h> const int NMAX = 2e3; int a[1 + NMAX]; int dp[1 + NMAX][1 + NMAX]; int main() { int tests; std::cin >> tests; while (tests--) { int n, k; std::cin >> n >> k; for (int i = 1; i <= n; ++i) std::cin >> a[i]; for (int i = 0; i <= n; ++i) { for (int del = 0; del <= k; ++del) dp[i][del] = 0; } for (int i = 1; i <= n; ++i) { dp[i][0] = dp[i - 1][0] + (a[i] == i); for (int del = 1; del <= k; ++del) dp[i][del] = std::max(dp[i - 1][del - 1], dp[i - 1][del] + (a[i] == i - del)); } bool found = false; for (int del = 0; del <= k; ++del) { if (dp[n][del] >= k) { std::cout << del << '\n'; found = true; break; } } if (!found) std::cout << "-1\n"; } return 0; }
33	#include <bits/stdc++.h> using namespace std; long long int mod = pow(10, 9) + 7; signed main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long int T = 1; cin >> T; while (T--) { long long int n; cin >> n; vector<long long int> v[n]; for (long long int i = 0; i < n; i++) { long long int ki; cin >> ki; for (long long int j = 0; j < ki; j++) { long long int x; cin >> x; v[i].push_back(x + 1 - j); } } map<long long int, long long int> mp; for (long long int i = 0; i < n; i++) { long long int x = *max_element(v[i].begin(), v[i].end()); mp[x] += v[i].size(); } auto it = mp.begin(); long long int ans = it->first; long long int covered = 0; long long int sumcovered = ans; for (auto x : mp) { if (x.first < sumcovered) { ans = x.first - covered; sumcovered = x.first; } sumcovered += x.second; covered += x.second; } cout << ans << '\n'; } return 0; }
34	#include <bits/stdc++.h> using namespace std; int T; int n, k; int a[2010]; int dp[2010][2010], mx[2010]; template <typename Tp> void read(Tp &x) { x = 0; int f = 1; char c = getchar(); while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); } while (c >= '0' && c <= '9') { x = x * 10 + c - '0'; c = getchar(); } x *= f; } int main() { read(T); while (T--) { read(n), read(k); for (int i = 1; i <= n; i++) read(a[i]); for (int i = 1; i <= n; i++) { for (int j = 0; j < i; j++) { dp[i][j] = mx[i - j - 1] + (i - j == a[i]); } for (int j = 0; j <= i; j++) mx[j] = max(mx[j], dp[i][i - j]); } bool flag = false; for (int i = 0; i < n; i++) { if (dp[n][i] >= k) { flag = true; printf("%d\n", i); break; } } if (!flag) printf("-1\n"); for (int i = 1; i <= n; i++) for (int j = 0; j < n; j++) dp[i][j] = mx[j] = 0; } return 0; }
35	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 10; const int MOD = 1e9 + 7; const int INF = 0x3f3f3f3f; long long pow_t(long long a, long long b) { long long ans = 1; for (int i = 1; i <= b; i++) { ans *= a; } return ans; } long long quick_m(long long a, long long b, long long MOD) { long long ans = 1; while (b) { if (b & 1) ans = (ans * a) % MOD; a = (a * a) % MOD; b >>= 1; } return ans; } long long gcd(long long a, long long b) { return b? gcd(b, a % b) : a; } long long lcm(long long a, long long b) { return a / gcd(a, b) * b; } bool cmp(long long x, long long y) { return x < y; } string b2[50]; void strlen_(long long i, long long j) { string b; while (j) { b += (j % 10 + '0'); j /= 10; } for (int g = b.length() - 1; g >= 0; g--) b2[i] += b[g]; } void solve() { string n; cin >> n; int minn = INF; for (int i = 0; i <= 36; i++) { int p = 0, q = 0, cnt = 0; while (1) { if (n[p] == b2[i][q]) { q++; p++; } else { p++; cnt++; } if (p == n.length() || q == b2[i].length()) break; } if (q!= b2[i].length()) { cnt += b2[i].length() - q; } if (p!= n.length()) { cnt += n.length() - p; } minn = min(minn, cnt); } cout << minn << endl; } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); for (long long i = 0; i <=
36	#include <bits/stdc++.h> const int mod = 1e9 + 7; using namespace std; void fastio() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); } bool compare(pair<long long int, long long int> a, pair<long long int, long long int> b) { if (a.first > b.first) return true; if (a.first == b.first) return a.second < b.second; return false; } long long int power(long long int x, long long int y) { long long int res = 1; x = x % mod; while (y > 0) { if (y & 1) res = (res * x) % mod; y = y >> 1; x = (x * x) % mod; } return res; } void solve() { long long int k; cin >> k; long long int n = 1; long long int i = 0; while (n + 2 * i + 1 <= k) { n += 2 * i + 1; i++; } if (n == k) { cout << 1 << " " << i << "\n"; return; } int x = i + 1, y = 1; while (y!= x) { y++; n++; if (n == k) { cout << y << " " << x << "\n"; return; } } while (x >= 1) { x--; n++; if (n == k) { cout << y << " " << x << "\n"; return; } } } int main() { int t = 1; cin >> t; while (t--) solve(); }
37	#include <bits/stdc++.h> using namespace std; signed main() { ios_base::sync_with_stdio(false); cin.tie(NULL); long long int t; cin >> t; while (t--) { long long int n, k; cin >> n >> k; long long int a[n + 10]; set<long long int> s; for (long long int i = 0; i < n; i++) { cin >> a[i]; s.insert(a[i]); } long long int ctr = 0; for (long long int i = 0; i < n - 1; i++) { if (a[i + 1] > a[i]) { auto it = s.find(a[i + 1]); --it; if (a[i] == (*it)) { continue; } } ctr++; } if (ctr <= k) cout << "Yes\n"; else cout << "No\n"; } }
38	#include <bits/stdc++.h> using namespace std; const long long MX = 1e7 + 123; long long arr[MX]; long long brr[MX]; long long crr[MX]; void solve() { long long t; cin >> t; while (t--) { long long n; cin >> n; if (n % 3 == 0) { cout << n / 3 << " " << n / 3 << '\n'; } else if (n % 3 == 1) { cout << n / 3 + 1 << " " << n / 3 << '\n'; } else if (n % 3 == 2) { cout << n / 3 << " " << n / 3 + 2 << '\n'; } } } int32_t main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); ; solve(); return 0; }
39	#include <bits/stdc++.h> const double PI = 3.1415926535897932384626433; const int KL = 1e6; const long long MOD = 1e9 + 7; using namespace std; long long q, x, y, z, n, m, a[KL], mn = 1e9, mx = -1e9, ans; string t; long long fr[2][KL], pr[KL]; set<int> vv[KL], uu[KL]; int main() { long long T; scanf("%lld", &T); while (T--) { scanf("%lld", &n); scanf("%lld", &q); cin >> t; for (int i = 0; i <= n; i++) vv[i].clear(), uu[i].clear(); for (int i = 0; i < n; i++) { if ((i + 1) % 2 == 1) { if (t[i] == '+') t[i] = '-'; else t[i] = '+'; } } for (int i = 1; i <= n; i++) { if (t[i - 1] == '-') { pr[i] = -1 + pr[i - 1]; } else { pr[i] = 1 + pr[i - 1]; } if (pr[i] >= 0) { vv[pr[i]].insert(i); } else { uu[abs(pr[i])].insert(i); } } while (q--) { scanf("%lld", &x); scanf("%lld", &y); long long ret = pr[y] - pr[x - 1]; if (ret == 0) { printf("0\n"); continue; } vector<long long> vec; if (ret % 2 == 0) { vec.push_back(x); x++; } ret = pr[y] - pr[x - 1]; if (ret < 0) ret--; else ret++; long long v = ret / 2; auto it = vv[0].begin(); if (v + pr[x - 1] >= 0) { it = vv[v + pr[x - 1]].lower_bound(x); } else { it = uu[abs(v
40	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; int a[20], n; int main() { int t; cin >> t; while (t--) { cin >> n; for (int i = 0; i < n; i++) cin >> a[i]; long long x = 1; for (int i = 0; i < n; i++) x *= 3; bool ans = 0; for (int i = 1; i < x; i++) { int sum = 0; long long y = i; for (int j = 0; j < n; j++) { if (y % 3 == 2) sum -= a[j]; else if (y % 3) sum += a[i]; y /= 3; } if (!sum) { ans = 1; break; } } if (ans) cout << "YES\n"; else cout << "NO\n"; } return 0; }
41	#include <bits/stdc++.h> using namespace std; void debug(int a[], int n) { cout << "Array: [ "; for (auto i = 0; i!= n; i++) cout << a[i] << " "; cout << "]\n"; } void debugv(vector<int>& v) { cout << "Vector: [ "; for (auto i = 0; i!= v.size(); i++) cout << v[i] << " "; cout << "]\n"; } bool comp(pair<long long int, long long int> a, pair<long long int, long long int> b) { if (a.first < b.first || (a.first == b.first && a.second >= b.second)) return true; return false; } long long int k[100000 + 2]; pair<long long int, long long int> power[100000 + 2]; void Solve() { long long int n; cin >> n; long long int ans = 0, temp; for (auto i = 0; i!= n; i++) { cin >> k[i]; long long int ma = 0; for (auto j = 0; j!= k[i]; j++) { long long int p; cin >> p; ma = max(ma, p + 1 - j); } power[i].first = ma, power[i].second = k[i]; } sort(power, power + n, comp); temp = ans = power[0].first; for (auto i = 0; i!= n; i++) { if (temp >= power[i].first) { temp += power[i].second; } else { ans += (power[i].first - temp); temp = power[i].first + power[i].second; } } cout << ans << "\n"; } int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); int T; cin >> T; while (T--) { Solve(); } return 0; }
42	#include <bits/stdc++.h> using namespace std; int n, m, k, a, b, num[110][110], cur; int ans[110][110]; void solve() { cin >> n >> m >> k; if (n % 2 == 0) a = 0; else a = m / 2; b = n * m / 2; if (m % 2 == 1) b -= n / 2; if (k >= a && k <= b && ((k - a) & 1) == 0) { cout << "YES\n"; cur = 0; if (n & 1) { for (int i = 0; i < m; i += 2) { num[n - 1][i] = num[n - 1][i + 1] = cur++; k--; } } if (m & 1) { for (int i = 0; i < n; i += 2) { num[i][m - 1] = num[i + 1][m - 1] = cur++; } } for (int i = 0; i < n / 2 * 2; i += 2) { for (int j = 0; j < m * 2 / 2; j += 2) { if (k) { k -= 2; num[i][j] = num[i][j + 1] = cur++; num[i + 1][j] = num[i + 1][j + 1] = cur++; } else { num[i][j] = num[i + 1][j] = cur++; num[i][j + 1] = num[i + 1][j + 1] = cur++; } } } for (int i = 0; i <= n - 1; i++) for (int j = 0; j <= m - 1; j++) ans[i][j] = -1; for (int i = 0; i <= n - 1; i++) { for (int j = 0; j <= m - 1; j++) { if (ans[i][j]!= -1) continue; if (i!= n - 1 && num[i][j] == num[i + 1][j]) { for (int t = 0; t <= 26 - 1; t++) { if (i && t == ans[i - 1][j]) continue; if
43	#include <bits/stdc++.h> using namespace std; const int maxn = 1010; int T, n, m, a[maxn], b[maxn], vis[maxn], lst[maxn]; long long d[maxn]; vector<int> G[maxn]; int main() { scanf("%d", &T); while (T--) { scanf("%d %d", &n, &m); for (int i = 1; i <= n; i++) { G[i].clear(); } for (int i = 2; i <= n; i++) { scanf("%d", &a[i]); } for (int i = 2; i <= n; i++) { scanf("%d", &b[i]); } while (m--) { int u, v; scanf("%d %d", &u, &v); G[u].push_back(v), G[v].push_back(u); } auto bfs = [&](long long &x) { queue<int> Q; for (int i = 1; i <= n; i++) { if (vis[i]) Q.push(i), d[i] = x; else d[i] = -1; } fill(lst + 1, lst + n + 1, 0); while (!Q.empty()) { int v = Q.front(); Q.pop(); for (int u : G[v]) if (a[u] < d[v] &&!(vis[v] && vis[u]) && lst[v] ^ u) { if (!~d[u]) { Q.push(u), d[u] = d[v] + b[u], lst[u] = v; } else { for (int i = u;!vis[i]; i = lst[i]) x += b[i], vis[i] = 1; for (int i = v;!vis[i]; i = lst[i]) x += b[i], vis[i] = 1; return 1; } } } return 0; }; auto chk = [&](long long x) { fill(vis + 1, vis + n + 1, 0), vis[1] = 1; while (bfs(x)) ; return accumulate(vis + 1, vis + n +
44	#include <bits/stdc++.h> #pragma GCC optimize("Ofast,unroll-loops") using namespace std; using vll = vector<long long>; using vi = vector<int>; long long mod = 1000000007; long long mod2 = 998244353; long long ipow(long long base, long long k, long long M) { base %= M; k = k % (M - 1); long long total = 1; while (k) { if (k & 1) { total = (total * base) % M; } base = (base * base) % M; k >>= 1; } return total; } long long fact(long long n) { long long ans = 1; for (long long i = 1; i <= n; i++) { ans = ans * i; ans = ans % mod; } return ans; } long long modu(long long a, long long b) { long long c = a % b; return (c < 0)? c + b : c; } void solve() { string s; cin >> s; long long n = s.length(); map<char, long long> cnt; vector<char> order; for (long long i = n - 1; i >= 0; i--) { if (cnt[s[i]] == 0) { order.push_back(s[i]); } cnt[s[i]]++; } long long ct = order.size(); map<char, long long> times; for (long long i = 0; i < order.size(); i++) { if (cnt[order[i]] % ct!= 0) { cout << -1 << "\n"; return; } times[order[i]] = cnt[order[i]] / ct; ct--; } cnt.clear(); long long good = 0; string t = ""; for (long long i = 0; i < n; i++) { cnt[s[i]]++; t.push_back(s[i]); if (cnt[s[i]] > times[s[i]]) { cout << -1 << " nig\n"; return; } if (cnt[s[i]] == times[s[i]]) good++; if (good == order.size()) break; } long long
45	#include <bits/stdc++.h> using namespace std; const long long N = 300010, M = 1005; long long t, n, p[N], s[N], m, a[3][N]; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cin >> t; while (t--) { cin >> m; for (int i = 1; i <= 2; i++) { for (int j = 1; j <= m; j++) { cin >> a[i][j]; } } s[n + 1] = 0; for (int i = 1; i <= m; i++) { p[i] = p[i - 1] + a[2][i]; } for (int i = m; i >= 1; i--) { s[i] = s[i + 1] + a[1][i]; } long long res = 2e18; for (int i = 1; i <= m; i++) { long long x = max(p[i - 1], s[i + 1]); res = min(res, x); } if (m == 1) res = 0; cout << res << "\n"; } return 0; }
46	#include <bits/stdc++.h> using namespace std; void solve() { long long int n, m, k; cin >> n >> m >> k; long long int a = m / 2; if (k > n * a) { cout << "NO " << endl; return; } if (k == 0) { if (n % 2 == 0) { cout << "YES" << endl; return; } else { cout << "NO" << endl; return; } } if (n % 2 == 0) { if (k % 2 == 0) { cout << "YES" << endl; return; } else { cout << "NO " << endl; return; } } else { if (k > m / 2) { k = k - m / 2; n--; if (k % 2 == 0) { cout << "YES" << endl; return; } else { cout << "NO " << endl; return; } } else { cout << "NO " << endl; return; } } } int main() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); long long int t; cin >> t; while (t--) solve(); }
47	#include <bits/stdc++.h> using namespace std; int main() { unsigned int t; cin >> t; while (t--) { unsigned long long n; cin >> n; unsigned long long rem = n % 3; if (n < 3) { if (n == 1) cout << 1 << " " << 0 << "\n"; else { cout << 0 << " " << 2 << "\n"; } } else { if (rem == 1) { cout << (n / 3) + 1 << " " << (n / 3) << "\n"; } else if (rem == 2) { cout << (n / 3) << " " << (n / 3) + 1 << "\n"; } else { cout << (n / 3) << " " << (n / 3) << "\n"; } } } return 0; }
48	#include <bits/stdc++.h> using namespace std; int n, m; long long a[100100], mn[400100], mx[400100]; void build(int x, int l, int r) { if (l == r) { mn[x] = mx[x] = a[l]; return; } build(x << 1, l, ((l + r) >> 1)), build(x << 1 | 1, ((l + r) >> 1) + 1, r); mn[x] = min(mn[x << 1], mx[x << 1 | 1]); mx[x] = max(mx[x << 1], mx[x << 1 | 1]); } long long qmn(int x, int l, int r, int L, int R) { if (l > R || r < L) return 0x3f3f3f3f3f3f3f3f; if (L <= l && r <= R) return mn[x]; return min(qmn(x << 1, l, ((l + r) >> 1), L, R), qmn(x << 1 | 1, ((l + r) >> 1) + 1, r, L, R)); } long long qmx(int x, int l, int r, int L, int R) { if (l > R || r < L) return -0x3f3f3f3f3f3f3f3f; if (L <= l && r <= R) return mx[x]; return max(qmx(x << 1, l, ((l + r) >> 1), L, R), qmx(x << 1 | 1, ((l + r) >> 1) + 1, r, L, R)); } int main() { scanf("%d%d", &n, &m); for (int i = 1, x; i <= n; i++) scanf("%d", &x), a[i] += x; for (int i = 1, x; i <= n; i++) scanf("%d", &x), a[i] -= x; for (int i = 1; i <= n; i++) a[i] += a[i - 1]; build(1, 1, n); for (int i = 1, l, r;
49	#include <bits/stdc++.h> using namespace std; const int Inf = 0x3f3f3f3f; int N, M; int a[1005], b[1005]; vector<int> nei[1005]; bool lgl[1005]; bool in[1005]; long long nhp; bool dfs(int now, int lst, long long hp) { if (hp < a[now]) return 0; lgl[now] = 1; for (int i = 0; i < (((int)(nei[now]).size())); ++i) { int to = nei[now][i]; if (to == lst) continue; if (lgl[to] || in[to]) return nhp = hp + b[now], in[now] = 1, 1; if (dfs(to, now, hp + b[now])) { in[now] = 1; return 1; } } return 0; } bool check(long long hp) { memset(in, 0, sizeof(in)); in[1] = 1; while (1) { memset(lgl, 0, sizeof(lgl)); bool fnd = 0; for (int i = 1; i <= (N); ++i) if (in[i]) { for (int j = 0; j < (((int)(nei[i]).size())); ++j) { int to = nei[i][j]; if (in[to]) continue; if (dfs(to, i, hp)) { fnd = 1; hp = nhp; goto Brk; } } } Brk: if (!fnd) break; } for (int i = 1; i <= (N); ++i) if (!in[i]) return 0; return 1; } void solve() { scanf("%d%d", &N, &M); for (int i = 1; i <= (N); ++i) nei[i].clear(); for (int i = 1; i <= (N - 1); ++i) scanf("%d", a + i + 1), ++a[i]; for (int i = 1; i <= (N - 1); ++i) scanf("%d", b + i + 1); for (int i = 0; i < (M);
50	#include <bits/stdc++.h> using namespace std; int t; int n, m, k; char domino[100][100]; bool vst[100][100]; void solve(int r, int c, int& cnt, bool block) { if (vst[r][c]) return; vst[r][c] = true; if (cnt == 0) { if (block) { domino[r][c] = domino[r + 1][c] = 'a'; domino[r][c + 1] = domino[r + 1][c + 1] = 'b'; } else { domino[r][c] = domino[r + 1][c] = 'c'; domino[r][c + 1] = domino[r + 1][c + 1] = 'd'; } } else { if (block) { domino[r][c] = domino[r][c + 1] = 'a'; domino[r + 1][c] = domino[r + 1][c + 1] = 'b'; } else { domino[r][c] = domino[r][c + 1] = 'c'; domino[r + 1][c] = domino[r + 1][c + 1] = 'd'; } cnt -= 2; } if (c + 2 > m - 1) { if (r + 2 > n - 1) { return; } else { solve(r + 2, c, cnt,!block); } } else { solve(r, c + 2, cnt,!block); if (r + 2 < n - 1) solve(r + 2, c, cnt,!block); } } int main(void) { cin >> t; for (int test_case = 0; test_case < t; test_case++) { memset(domino, 0, sizeof(domino)); memset(vst, false, sizeof vst); cin >> n >> m >> k; bool flag = false; if (n % 2 == 0 && m % 2 == 0) { if (k % 2 == 0) { flag = true; } } else if (n % 2 == 0) { if (m == 1) { if (k == 0) { flag = true; } } else {
51	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void solve() { int t; cin >> t; while (t--) { int in[3], m; cin >> in[0] >> in[1] >> in[2] >> m; sort(in, in + 3); int maxp = in[0] + in[1] + in[2] - 3; if (m <= maxp) { if (in[2]
52	#include <bits/stdc++.h> using namespace std; using ll = long long; constexpr ll mod = 1000000007; int main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout << fixed << setprecision(20); int T; cin >> T; while (T--) { int n, k; cin >> n >> k; vector<int> p(n); for (int i = 0; i < n; i++) { cin >> p[i]; p[i]--; } vector<int> f(n + 1, -1); f[0] = 0; for (int i = 0; i < n; i++) { vector<int> dp(n + 1, -1); dp[0] = 0; for (int j = 0; j <= i; j++) { if (p[i] == i - j) { dp[j] = max(dp[j], f[j] + 1); } else { dp[j] = max(dp[j], f[j]); } dp[j + 1] = max(dp[j + 1], dp[j]); } swap(dp, f); } int ans = -1; for (int i = 0; i <= n; i++) { if (f[i] >= k) { ans = i; break; } } cout << ans << '\n'; } return 0; }
53	#include <bits/stdc++.h> using namespace std; constexpr int N = 3e3; uint16_t a[N], lst[N], nxt[N], cnxt[20], dp[N][N + 1]; int main() { cin.tie(0), ios::sync_with_stdio(0); int t, n; cin >> t; while (t--) { cin >> n; for (int i = 0; i < n; ++i) { cin >> a[i], --a[i]; } memset(lst, 0, n * sizeof *lst); for (int i = 0; i < n; ++i) { ++lst[a[i]]; } int w = -1, r = 0, purged = 0; while (r < n) { if (w >= 0 && a[w] == a[r]) { if (--lst[a[r++]] == 1) { --w; ++purged; } } else if (lst[a[r]] == 1) { ++r; ++purged; } else { a[++w] = a[r++]; } } memset(lst, -1, n * sizeof *lst); n = w + 1; memset(nxt, 127, n * sizeof *nxt); for (int i = 0; i < n; ++i) { if (lst[a[i]]!= (uint16_t)-1) { nxt[lst[a[i]]] = i; } lst[a[i]] = i; } for (int i = n - 1; i > -1; --i) { auto* cnxte = cnxt; for (int z = nxt[i]; z < n; z = nxt[z]) { *cnxte++ = z; } *cnxte = n; cnxte = cnxt; for (int j = i + 1; j <= n; ++j) { int t = dp[i + 1][j] - 1; for (const auto* z = cnxt; z < cnxte; ++z) { t = max(t, dp[i + 1][*z] + dp[*z][j]); } dp[i][j] = t + 1; if (a[j] == a
54	#include <bits/stdc++.h> #pragma GCC optimize("Ofast", "unroll-loops") using namespace std; const int inf = 1000111222; const int max_n = 211; struct point { int x, y; }; long long get_sqr(const point& p1, const point& p2, const point& p3) { long long res = 0; res += (p2.x - p1.x) * 1LL * (p1.y + p2.y); res += (p3.x - p2.x) * 1LL * (p2.y + p3.y); res += (p1.x - p3.x) * 1LL * (p3.y + p1.y); return abs(res); } point p[max_n]; int dp[max_n][max_n], n, k; long long all_sqr[max_n][max_n][max_n], sums[max_n][max_n]; bool check(long long sz) { for (int l = 2; l < n; ++l) { for (int st = 0; st + l < n; ++st) { int fn = st + l; if (sums[st][fn] < sz) { dp[st][fn] = 0; continue; } int ans = 0; long long curr_sqr = 0; int curr_st = 0; for (int i = st + 1; i < fn; ++i) { if (curr_sqr < sz) { curr_st = i; curr_sqr += all_sqr[fn][curr_st - 1][i]; } if (all_sqr[st][fn][i] >= sz) { ans = max(ans, dp[st][i] + dp[i][fn] + 1); } } if (curr_sqr >= sz) { ans = max(ans, 1 + dp[curr_st][fn]); } int pr = curr_st - 1; assert(curr_st!= fn && ans); for (int fnn = fn - 1; fnn > st; --fnn) { curr_sqr += all_sqr[fnn][curr_st][fnn + 1]; long
55	#include <bits/stdc++.h> using namespace std; void err() { cerr << "\n"; } template <class T, class... Ts> void err(const T& arg, const Ts&... args) { cerr << arg <<''; err(args...); } inline int rd() { int f = 0; int x = 0; char ch = getchar(); for (;!isdigit(ch); ch = getchar()) f |= (ch == '-'); for (; isdigit(ch); ch = getchar()) x = (x << 1) + (x << 3) + ch - '0'; if (f) x = -x; return x; } const int inf = 0x3f3f3f3f; const long long INF = 0x3f3f3f3f3f3f3f3f; char s[300007]; int pre[300007][2][2], tmp[2][2]; int get(int i) { if (s[i] == '+') return 1; return 0; } void solve() { int n = rd(), q = rd(); scanf("%s", s + 1); for (int i = 1; i <= n; ++i) { for (int j = 0; j < 2; ++j) { for (int k = 0; k < 2; ++k) { if ((i & 1) == j && get(i) == k) pre[i][j][k] = 1; else pre[i][j][k] = 0; pre[i][j][k] += pre[i - 1][j][k]; } } } while (q--) { int l = rd(), r = rd(); for (int j = 0; j < 2; ++j) { for (int k = 0; k < 2; ++k) { tmp[j][k] = pre[r][j][k] - pre[l - 1][j][k]; } } if (l % 2 == 0) { swap(tmp[0][0], tmp[0][1]); swap(tmp[1][0], tmp[1][1]); } if (tmp[0][0] == tmp[0][1] && tmp[1][0] == tmp[1][1]) { puts("0"); } else { int
56	#include <bits/stdc++.h> using namespace std; int a[150]; int vis[10]; long long ans, len; string s; void dfs(int p, int k, long long n, int f) { if (k == -1) return; if (p >= len) { ans = min(ans, n); return; } if (f) { int mn; if (k) mn = 0; else { for (int i = 0; i < 10; i++) { if (vis[i]) { mn = i; break; } } } for (int i = p; i < len; i++) n = n * 10 + mn; ans = min(ans, n); return; } ++vis[s[p] - '0']; dfs(p + 1, k - (vis[s[p] - '0'] == 1), n * 10 + s[p] - '0', 0); --vis[s[p] - '0']; if (s[p]!= '9') { ++vis[s[p] - '0' + 1]; dfs(p + 1, k - (vis[s[p] - '0' + 1] == 1), n * 10 + s[p] - '0' + 1, 1); --vis[s[p] - '0' + 1]; } int fd = 0; for (int i = s[p] - '0' + 2; i < 10; i++) { if (vis[i]) { fd = i; break; } } if (fd) { ++vis[fd]; dfs(p + 1, k, n * 10 + fd, 1); --vis[fd]; } } int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int t; cin >> t; while (t--) { int n, k; cin >> n >> k; s = to_string(n); len = s.size(); ans = 1ll << 30; dfs(0, k, 0, 0); cout << ans << '\n'; } return 0; }
57	#include <bits/stdc++.h> using namespace std; struct Node { static const int MAX = 1 << 21; int low{MAX}; int high{-1}; int diff{MAX}; operator bool() const { return low < MAX; } }; void merge(vector<Node> &v, const int &start, const int &half_step) { for (int i = start; i < start + half_step; ++i) { const int only_diff = min(v[i].diff, v[i + half_step].diff); const int diff1 = min(only_diff, v[i + half_step].low - v[i].high); const int diff2 = min(only_diff, (v[i].low ^ half_step) - (v[i + half_step].high ^ half_step)); v[i].diff = diff1; v[i + half_step].diff = diff2; const int low1 = min(v[i].low, v[i + half_step].low); const int low2 = min(v[i].low ^ half_step, v[i + half_step].low ^ half_step); v[i].low = low1; v[i + half_step].low = low2; const int high1 = max(v[i].high, v[i + half_step].high); const int high2 = max(v[i].high ^ half_step, v[i + half_step].high ^ half_step); v[i].high = high1; v[i + half_step].high = high2; } } int main() { int n, k; cin >> n >> k; int num = 1 << k; vector<Node> first_round(num); for (; n > 0; --n) { int a; cin >> a; first_round[a].low = a; first_round[a].high = a; } for (int deg = 0; deg < k; ++deg) { const int half_step = 1 << deg; const int step = 2 * half_step; for (int i = 0; i < num; i += step) merge(first_round, i, half_step); } for (int i = 0; i < num;
58	#include <bits/stdc++.h> using namespace std; string ans, a; int n, k; bool go(int i, int n, int k, set<int> &s, int gr) { if (i == n) return true; int val = a[i] - '0'; if (gr == 1) { int x = 0; if (s.size() == k) { x = (*s.begin()); } ans.push_back((char)(x + '0')); int flag = 0; if (s.empty() == true || s.find(x) == s.end()) { s.insert(x); } else { flag = 1; } if (go(i + 1, n, k, s, gr) == true) return true; else { if (flag == 0) { s.erase(x); } ans.pop_back(); return false; } } if (s.size() == k) { if (s.lower_bound(val) == s.end()) { return false; } int ins = (*s.lower_bound(val)) + '0'; int nextgr = 0; nextgr = ((ins - '0') == val)? 0 : 1; ans.push_back(ins); if (go(i + 1, n, k, s, nextgr) == true) return true; else { ans.pop_back(); if (s.upper_bound(val) == s.end()) return false; else { ans.push_back((*s.upper_bound(val)) + '0'); if (go(i + 1, n, k, s, nextgr) == true) return true; else { ans.pop_back(); return false; } } } } int flag = 0; ans.push_back(a[i]); if (s.empty() == true || s.find(val) == s.end()) s.insert(val); else flag = 1; if (go(i + 1, n, k, s, gr) == true) return true; else { ans.pop_back(); if (flag == 0) s.erase(val); int flag2 = 0; if (s.empty() == true || s.find((val + 1) % 10) == s.end()) s
59	#include <bits/stdc++.h> using namespace std; long long int solve(string s, string w) { long long int a, b, c, i, j, k; i = 0; j = 0; a = s.length(); b = w.length(); for (i = 0; i < s.length(); i++) { if (j == w.length()) break; if (s.at(i) == w.at(j)) { b--; a--; j++; } } return a + b; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); int q, T; cin >> T; for (q = 1; q <= T; q++) { string s; cin >> s; long long int a, b, c, i, j, k; long long int ans = 1e18; b = 1; for (i = 1; i <= 42; i++) { a = b; b = b * 2; string w = ""; while (a > 0) { char ch = a % 10 + '0'; w += ch; a /= 10; } reverse(w.begin(), w.end()); ans = min(ans, solve(s, w)); } cout << ans << "\n"; } return 0; }
60	#include <bits/stdc++.h> using namespace std; long long c, j, d, t, k, i, x, n, m, u; signed main() { cin >> t; for (i = 1; i <= t; i++) { cin >> n; vector<long long> v; for (j = 1; j <= n; j++) { cin >> x; if (x % 2 == 0) { v.push_back(j); } } if (n % 2 == 0) { k = n / 2; m = 0; u = 0; if (v.size()!= k) { cout << -1 << "\n"; } else { for (j = 1; j <= k; j++) { m = m + abs(v[j - 1] - 2 * j + 1); u = u + abs(v[j - 1] - 2 * j); } if (m < u) { cout << m << "\n"; } else { cout << u << "\n"; } } } else { k = n / 2; m = 0; u = 0; if (v.size() == k) { for (j = 1; j <= k; j++) { m = m + abs(v[j - 1] - 2 * j); } cout << n << "\n"; } else if (v.size() == k + 1) { for (j = 1; j <= k + 1; j++) { u = u + abs(v[j - 1] - 2 * j + 1); } cout << u << "\n"; } else { cout << -1 << "\n"; } } } }
61	#include <bits/stdc++.h> using namespace std; long long mod = 1e9 + 7; const int mx = 2e5 + 5; vector<int> fact(mx, 1), inv(mx, 1); long long binpow(long long a, long long b, long long m) { a %= m; long long res = 1; while (b > 0) { if (b & 1) res = res * a % m; a = a * a % m; b >>= 1; } return res; } void precompute() { fact[0] = inv[0] = 1; for (int i = 1; i < mx; i++) { fact[i] *= fact[i - 1] % mod; inv[i] = binpow(i, mod - 2, mod); } } void solve() { long long n, k; cin >> n >> k; int flag = 0; if (n % 2 == 1) flag = 1; long long eq = 1, ans = 0; for (int i = 1; i <= k; i++) { if (flag == 1) { eq *= binpow(2, n - 1, mod) + 1; eq %= mod; } else { long long gr; if (i == k) gr = 1; else gr = binpow(binpow(2, n - 1, mod) % mod, k - i, mod); gr %= mod; gr *= eq; gr %= mod; ans += gr; eq *= binpow(2, n - 1, mod) - 1; eq += mod; eq %= mod; } } ans += eq; ans %= mod; cout << ans << endl; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); cout << fixed << setprecision(10); int t = 1; cin >> t; precompute(); while (t--) solve(); }
62	#include <bits/stdc++.h> using namespace std; int t; int n, m, k; int main(void) { ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr); cin >> t; for (int test_case = 0; test_case < t; test_case++) { cin >> n >> m >> k; bool flag = false; if (n % 2 == 0 && m % 2 == 0) { if (k % 2 == 0) { flag = true; } } else if (n % 2 == 0) { if (m == 1) { if (k == 0) flag = true; } else { if (k % 2 == 0) { if (2 * k <= (m - 1) * n) { flag = true; } } } } else { if (n == 1) { if (2 * k == m * n) { flag = true; } } else { if (k > m / 2) { k -= m / 2; if (k % 2 == 0) { flag = true; } } } } if (flag) { cout << "YES" << "\n"; } else { cout << "NO" << "\n"; } } }
63	#include <bits/stdc++.h> using namespace std; void _print(long long t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(long double t) { cerr << t; } void _print(double t) { cerr << t; } void _print(unsigned long long t) { cerr << t; } template <class T, class V> void _print(pair<T, V> p); template <class T> void _print(vector<T> v); template <class T> void _print(set<T> v); template <class T, class V> void _print(map<T, V> v); template <class T> void _print(multiset<T> v); template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(multiset<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T, class V> void _print(map<T, V> v) { cerr << "[ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "]"; } void solve() { int n; cin >> n; if (n == 1) { cout << 'a'; return; } for (int i = 0; i < n / 2; i++) { cout << 'a'; } cout << 'b'; for (int i = 0; i < n / 2 - 1; i++) { cout << 'a'; } if (n % 2 ==
64	#include <bits/stdc++.h> long long a[200001], sum = 0; int n, m; int main() { scanf("%lld", &n); for (int i = 1; i <= n; i++) { scanf("%lld", &a[i]); sum += a[i]; } std::sort(a + 1, a + n + 1); scanf("%lld", &m); for (int i = 1; i <= m; i++) { long long u, v; scanf("%lld%lld", &u, &v); int l = 1, r = n + 1, pos = n + 1; while (l < r) { int mid = l + r >> 1; if (a[mid] >= u) { r = mid; pos = std::min(pos, mid); } else { l = mid + 1; } } long long ans = 0; if (pos!= n + 1) { if (sum - a[pos] >= v) ans = 0; else ans = v - (sum - a[pos]); if (pos > 1) { if (sum - a[pos - 1] >= v) ans = std::min(ans, u - a[pos - 1]); else ans = std::min(ans, u - a[pos - 1] + v - (sum - a[pos - 1])); } } else { pos = n; ans = u - a[pos]; if (v > sum - a[pos]) ans += v - (sum - a[pos]); } std::cout << ans << std::endl; } return 0; }
65	#include <bits/stdc++.h> using namespace std; void solve() { long long int n, k; cin >> n >> k; vector<long long int> v(n); for (long long int i = 0; i < n; i++) cin >> v[i]; long long int ans = -1e7, m1 = 0, m2 = INT_MAX; m1 = v[0]; m2 = 1; for (long long int i = 1; i < n; i++) { long long int c = m2 * (i + 1) - k * (m1 | v[i]); ans = max(ans, c); long long int mm = (ans + (k) * (v[i])) / (i + 1); for (long long int j = i - 1; j >= mm - 1; j--) { if (j <= 0) break; long long int c2 = (i + 1) * (j + 1) - k * (v[i] | v[j]); ans = max(ans, c2); } if (v[i] < m1) { m2 = i, m1 = v[i]; } } cout << ans << "\n"; } int main() { ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL); long long int t = 1; cin >> t; for (long long int i = 1; i <= t; i++) { solve(); } }
66	#include <bits/stdc++.h> inline char gc() { static const int L = 233333; static char sxd[L], *sss = sxd, *ttt = sxd; if (sss == ttt) { ttt = (sss = sxd) + fread(sxd, 1, L, stdin); if (sss == ttt) { return EOF; } } return *sss++; } template <class T> inline bool read(T& x) { x = 0; char c = gc(); bool flg = false; for (;!isdigit(c); c = gc()) { if (c == '-') { flg = true; } else if (c == EOF) { return false; } } for (; isdigit(c); c = gc()) { x = (x * 10) + (c ^ 48); } if (flg) { x = -x; } return true; } template <class T> inline void write(T x) { if (x < 0) { x = -x; putchar('-'); } if (x > 9) { write(x / 10); x %= 10; } putchar(x | 48); } template <class T> inline void writeln(T x) { write(x); puts(""); } template <class T> inline void writesp(T x) { write(x); putchar(' '); } std::vector<int> Z_function(std::string s) { int n = s.length(); std::vector<int> z(n); z[0] = n; for (int i = 1, l = 0, r = 0; i < n; ++i) { if (i <= r && z[i - l] < r - i + 1) { z[i] = z[i - 1]; } else { z[i] = std::max(0, r - i + 1); while (i + z[i] < n && s[z[i]] == s[i + z[i]]) { z[i]++; } } if (i + z[i] - 1 > r) { l = i, r = i + z[i] - 1; } } return z; } void solve() { int n; std::string s; std::c
67	#include <bits/stdc++.h> using namespace std; const int N = 1e5 + 10; const int P = 1e9 + 7; const int INF = 0x3f3f3f3f; int t, n; pair<long long, long long> res[N]; bool cmp(pair<long long, long long> a, pair<long long, long long> b) { return (a.first - a.second) < (b.first - b.second); } void solve() { int k; long long x, minn, ans = 0; for (int i = 0; i < n; ++i) { scanf("%d", &k); minn = 0; for (int j = 0; j < k; ++j) { scanf("%lld", &x); if (x >= minn) minn = x + 1; ++minn; } res[i].first = minn; res[i].second = k; } sort(res, res + n); ans = res[0].first - res[0].second; long long cur = res[0].first; for (int i = 1; i < n; ++i) { long long temp = res[i].first - res[i].second; if (temp > cur) { ans += temp - cur; cur = res[i].first; } else { cur += res[i].second; } } printf("%lld\n", ans); } int main() { scanf("%d", &t); while (t--) { scanf("%d", &n); solve(); } return 0; }
68	#include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; int mod_pow(int b, int p) { int ans = 1; while (p) { if (p & 1) { ans = (1ll * ans * b) % mod; p--; } b = (1ll * b * b) % mod; p /= 2; } return ans; } const int N = (2e5 + 5); int fac[N], inv_fac[N]; void calc_fac() { fac[0] = 1; inv_fac[0] = 1; for (int i = 1; i < N; i++) { fac[i] = (fac[i - 1] * i) % mod; inv_fac[i] = mod_pow(fac[i], mod - 2); } } void solve() { int n, k; cin >> n >> k; if (k == 0) { cout << 1; cout << '\n'; return; } int e = 0; for (int i = 0; i < n; i += 2) { e = (e + 1ll * fac[n] * inv_fac[n - i] % mod * inv_fac[i] % mod) % mod; } if (n & 1) e = (e + 1) % mod; if (n & 1) { int ans = mod_pow(e, k); cout << ans; cout << '\n'; return; } int p = mod_pow(2, n); int pp = mod_pow(p, k); int ans = 0; int left = 1; int right = pp; for (int i = 0; i < k; i++) { right = 1ll * right * mod_pow(p, mod - 2) % mod; ans = (ans + 1ll * left * right) % mod; left = (1ll * left * e) % mod; } ans = (ans + 1ll * left) % mod; cout << ans; cout << '\n'; } int32_t main() { ios::sync_with_stdio(0); cin.tie(0); calc_fac(); int tc; cin >> tc; while (tc--) solve(); return 0; }
69	#include <bits/stdc++.h> using namespace std; const long long int mod = 1e9 + 7, N = 1e6 + 10; int main() { long long int time; cin >> time; while (time--) { long long int l = -1, r = -1, n; cin >> n; string s; cin >> s; for (long long int i = 1; i < s.size(); i++) { if (s[i - 1] == 'a' and s[i] == 'b') { l = i, r = i + 1; break; } if (s[i - 1] == 'b' and s[i] == 'a') { l = i; r = i + 1; break; } } cout << l << " " << r << endl; } }
70	#include <bits/stdc++.h> using namespace std; bool even(long long int x) { return (x % 2 == 0); } bool odd(long long int x) { return (x % 2!= 0); } vector<int> sieve(int n) { bool prime[n + 1]; memset(prime, true, sizeof(prime)); for (int p = 2; p * p <= n; p++) { if (prime[p] == true) { for (int i = p * p; i <= n; i += p) prime[i] = false; } } vector<int> v; for (int p = 2; p <= n; p++) if (prime[p]) v.push_back(p); return v; } long long gcd(long long int a, long long int b) { if (b == 0) return a; return gcd(b, a % b); } bool isprime(long long n) { if (n == 1) return false; if (n == 2 || n == 3) return true; if (n % 2 == 0 || n % 3 == 0) return false; for (long long i = 5; i * i <= n; i = i + 6) { if (n % i == 0 || n % (i + 2) == 0) return false; } return true; } long long lcm(int a, int b) { return (a / gcd(a, b)) * b; } bool compare(pair<int, int> p1, pair<int, int> p2) { if (p1.first == p2.first) return p1.second <= p2.second; else return p1.first > p2.first; } vector<int> presum(vector<long long int> v) { vector<int> res(v.size()); res[0] = v[0]; for (int i = 1; i < v.size(); i++) { res[i] = res[i - 1] + v[i]; } return res; } void precision(int a) { cout << setprecision(a) << fixed; } int main() { int t; cin >> t; while (t--) { int f = 0; int n; cin >> n; string s; cin >>
71	#include <bits/stdc++.h> using namespace std; int n, m; pair<int, int> a[55]; long long dp[55][100005], res[100005] = {0}, s[100005]; inline void solve(int x) { int g = m / x; pair<int, int> b[55]; for (int i = 1; i <= n; i++) { if (a[i].first % x == 0) b[i].first = a[i].first / x; else b[i].first = a[i].first / x + 1; b[i].second = a[i].second / x; } for (int i = 1; i <= n; i++) { for (int j = 1; j <= g; j++) dp[i][j] = 0; } for (int i = 1; i <= g; i++) s[i] = 0; for (int i = a[1].first; i <= a[1].second; i++) dp[1][i] = 1; for (int i = 1; i <= n; i++) { s[0] = 0; for (int k = 1; k <= g; k++) { int r = min(b[i].second, k), l = b[i].first; if (r < l) continue; dp[i][k] = (dp[i][k] + s[k - l] - s[k - r - 1]) % (long long)(998244353); } for (int k = 1; k <= g; k++) { s[k] = (s[k - 1] + dp[i][k]) % (long long)(998244353); } } res[x] = s[g]; } int main() { ios_base::sync_with_stdio(false), cin.tie(NULL); cin >> n >> m; for (int i = 1; i <= n; i++) { int l, r; cin >> l >> r; a[i] = {l, r}; } for (int i = 1; i <= m; i++) { solve(i); } for (int i = m; i >= 1; i--) { for (int j = 2 *
72	#include <bits/stdc++.h> using namespace std; template <class T> ostream& operator<<(ostream& out, vector<T>& v) { out << "["; for (auto k : v) out << k << ","; out << "]" << "\n"; return out; } template <class T> ostream& operator<<(ostream& out, set<T> s) { out << "{"; for (auto k : s) out << k << ","; out << "}" << "\n"; return out; } template <class T, class U> ostream& operator<<(ostream& out, pair<T, U> p) { out << "[ " << p.first << ", " << p.second << " ] "; return out; } template <class T, class U> istream& operator>>(istream& in, pair<T, U>& p) { in >> p.first >> p.second; return in; } vector<int> app[(int)1e4]; int dp[3500][3500]; int a[4000]; int DP(int i, int j) { if (i >= j) return 0; if (dp[i][j]!= -1) return dp[i][j]; dp[i][j] = DP(i + 1, j); for (auto k : app[a[i]]) { if (k > i and k <= j) dp[i][j] = max(dp[i][j], 1 + DP(i + 1, k - 1) + DP(k, j)); } return dp[i][j]; } int main() { cin.tie(0); cin.sync_with_stdio(0); int t; cin >> t; while (t--) { int n; cin >> n; for (int i = 0; i < int(n); i++) { app[i].clear(); for (int j = 0; j < int(n); j++) dp[i][j] = -1; cin >> a[i]; } for (int i = 0; i < int(n); i++) app[a[i]].push_back(i); cout << n - 1 - DP(0, n - 1) << '\n';
73	#include <bits/stdc++.h> #pragma GCC optimize("Ofast") #pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2") #pragma GCC optimization("O3") #pragma GCC optimization("unroll-loops") using namespace std; void pre() {} int arr[20000]; int n; int reverse(int i) { for (int j = 0; j < i / 2; j++) swap(arr[j], arr[i - j - 1]); return i; } int reverse_till(int num) { int k = 0; for (int j = 0; j < n; j++) { if (arr[j] == num) { k = j; break; } } return reverse(k + 1); } int reverse_till_1(int num) { int k = 0; for (int j = 0; j < n; j++) { if (arr[j] == num) { k = j; break; } } k--; return reverse(k + 1); } int reverse_till_11(int num) { int k = 0; for (int j = 0; j < n; j++) { if (arr[j] == num) { k = j; break; } } k++; return reverse(k + 1); } void print_arr() {} void solve() { cin >> n; for (int i = 0; i < n; i++) { cin >> arr[i]; } vector<int> v; for (int i = 0; i < n; i++) { if (arr[i] % 2 == i % 2) { cout << -1 << "\n"; return; } } for (int i = 0; n - 2 * i > 1; i += 2) { int a = n - 2 * i; int b = n - 1 - 2 * i; print_arr(); v.push_back(reverse_till(a)); print_arr(); v.push_back(reverse_till_1(b)); print_arr(); v.push_back(reverse_till_11(b)); print_arr(); v.push_back(reverse(3)); print_arr(); v.push_
74	#include <bits/stdc++.h> using namespace std; using ll = long long; using VL = vector<ll>; using VVL = vector<VL>; using VI = vector<int>; using VVI = vector<VI>; const ll MOD = 1e9 + 7; VVI G; VI V; VVL M; ll f(int i, int j) { if (j < 0 or j > i) return 0; ll& res = M[i][j]; if (res!= -1) return res; if (j == 0) return res = 1; return res = (f(i - 1, j) + V[j - 1] * f(i - 1, j - 1)) % MOD; } void dfs(int x, int p, int d, VI& V) { if (d >= (int)V.size()) V.push_back(1); else ++V[d]; for (int y : G[x]) if (y!= p) dfs(y, x, d + 1, V); } int main() { ios_base::sync_with_stdio(0); cin.tie(0); int t; cin >> t; while (t--) { int n, k; cin >> n >> k; G = VVI(n); for (int r = 0; r < n - 1; ++r) { int x, y; cin >> x >> y; --x; --y; G[x].push_back(y); G[y].push_back(x); } if (k == 2) cout << n * (n - 1) / 2 << endl; else { ll res = 0; for (int x = 0; x < n; ++x) { int m = G[x].size(); VVI T(m); int mx = 0; for (int i = 0; i < m; ++i) { dfs(G[x][i], x, 0, T[i]); mx = max(mx, (int)T[i].size()); } for (int d = 0; d < mx; ++d) { V.clear(); for (int i = 0; i < m; ++i) if (d < (int)T[i].size()) V.
75	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; long long int a = floor(pow(n, 0.5)); long long int b = ceil(pow(n, 0.5)); long long int c = a * a; long long int d = b * b; long long int diff = (d - c) / 2; if (a == b) { cout << 1 << " " << a << endl; continue; } long long int chk = ceil(double((c + d)) / 2); if (chk == n) { cout << b << " " << b << endl; } else if (n < chk) { cout << (n - c) << " " << b << endl; } else { cout << b << " " << (d - n + 1) << endl; } } }
76	#include <bits/stdc++.h> using namespace std; vector<int> x, y, x2, y2, h2, v2; set<int> h, v; vector<int> x3[1000005], y3[1000005]; int main() { int t; scanf("%d", &t); while (t--) { h.clear(); v.clear(); x.clear(); y.clear(); x2.clear(); y2.clear(); h2.clear(); v2.clear(); int n, m, k, tmp; scanf("%d%d%d", &n, &m, &k); for (int i = 1; i <= n; i++) { scanf("%d", &tmp); h.insert(tmp); h2.push_back(tmp); } for (int i = 1; i <= m; i++) { scanf("%d", &tmp); v.insert(tmp); v2.push_back(tmp); } int tmpx, tmpy; for (int i = 1; i <= k; i++) { scanf("%d%d", &tmpx, &tmpy); x.push_back(tmpx); y.push_back(tmpy); x2.push_back(tmpx); y2.push_back(tmpy); x3[tmpx].push_back(tmpy); y3[tmpy].push_back(tmpx); } sort(x2.begin(), x2.end()); sort(y2.begin(), y2.end()); for (int i : h2) { sort(x3[i].begin(), x3[i].end()); } for (int i : v2) { sort(y3[i].begin(), y3[i].end()); } vector<int>::iterator it1, it2; long long ans = 0; for (int i = 0; i < k; i++) { tmpx = x[i], tmpy = y[i]; int f1 = 0, f2 = 0; if (h.find(tmpx)!= h.end()) f1 = 1; if (v.find(tmpy)!= v.end()) f2 = 1; if (f1 && f2) continue; if (f1) { it1 =
77	#include <bits/stdc++.h> using namespace std; template <typename T> istream &operator>>(istream &in, vector<T> &v) { for (auto &i : v) cin >> i; return in; } template <typename T> istream &operator>>(istream &in, pair<T, T> &p) { cin >> p.f >> p.s; return in; } template <typename T> ostream &operator<<(ostream &out, vector<T> &v) { for (auto &i : v) cout << i << " "; return out; } template <typename T> ostream &operator<<(ostream &out, pair<T, T> &p) { cout << p.f << " " << p.s << " "; return out; } template <typename T> istream &operator>>(istream &in, vector<pair<T, T>> &v) { for (auto &i : v) cin >> i.f >> i.s; return in; } template <typename T> ostream &operator<<(ostream &out, vector<pair<T, T>> &v) { for (auto &i : v) cout << i.f << " " << i.s << "\n"; return out; } void solve() { long long int t; cin >> t; for (long long int _ = 1; _ <= t; _++) { long long int k; cin >> k; string s; cin >> s; vector<long long int> arr(10, 0); for (auto &ch : s) { arr[ch - '0']++; } long long int ans[] = {1, 4, 6, 8, 9}; bool flag = 0; for (auto i : ans) { if (arr[i]) { cout << "1\n" << i << "\n"; flag = 1; break; } } if (flag) continue; if (arr[2] > 1) { cout << "2" << "\n" << 22 << "\n"; continue; } if (arr[2] == 1 and s[0]!= 2) { cout << 2 << "\n"; cout << s[0] << 2 << "\n
78	#include <bits/stdc++.h> using namespace std; bool isPossFirst(vector<long long> armor, long long mid) { for (int i = 0; i < armor.size(); i++) { if (mid <= armor[i]) return 0; mid++; } return true; } pair<long long, long long> findMin(vector<long long> armor) { long long l = 0, r = 10000000000; long long mid = 0, ans = 10000000000; while (l <= r) { mid = l + (r - l) / 2; if (isPossFirst(armor, mid)) { ans = min(ans, mid); r = mid - 1; } else { l = mid + 1; } } return {ans, ans + armor.size()}; } bool isPoss(vector<pair<long long, long long>> minEntry, long long mid) { for (int i = 0; i < minEntry.size(); i++) { if (minEntry[i].first > mid) return 0; mid += minEntry[i].second; } return 1; } int main() { int t; cin >> t; while (t--) { int n; cin >> n; vector<pair<long long, long long>> minEntry; for (int i = 0; i < n; i++) { int k; cin >> k; vector<long long> armor(k); for (int j = 0; j < k; j++) { cin >> armor[j]; } minEntry.push_back(findMin(armor)); } sort(minEntry.begin(), minEntry.end()); long long l = 0, r = 10000000000; long long mid = 0, ans = 10000000000; while (l <= r) { mid = l + (r - l) / 2; if (isPoss(minEntry, mid)) { ans = min(ans, mid); r = mid - 1; } else { l = mid + 1; } } cout << ans << endl; } return 0; }
79	#include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10; int f[N], sum[N]; int n, mod; int main() { scanf("%d%d", &n, &mod); f[n] = sum[n] = 1; for (int i = n - 1; i; --i) { f[i] = (f[i] + sum[i + 1]) % mod; for (int j = 2; i * j <= n; ++j) { int l = i * j, r = min(n, j * (i + 1) - 1); f[i] = (f[i] + sum[l] - sum[r + 1]) % mod; } sum[i] = (sum[i + 1] + f[i]) % mod; } cout << f[1] << endl; return 0; }
80	#include <bits/stdc++.h> using namespace std; int main() { long long int t, n; cin >> t; while (t--) { cin >> n; char arr1[n], arr2[n]; long long int result = 0; for (long long int i = 0; i < n; i++) { cin >> arr1[i]; } for (long long int i = 0; i < n; i++) { cin >> arr2[i]; } vector<bool> taken(n, false); for (long long int i = 0; i < n; i++) { if (arr2[i] == '1') { for (int j = i - 1; j <= i + 1; j++) { if (j >= 0 and j < n) { if (!taken[j]) { if ((arr1[j] == '1' and j!= i) or (arr1[j] == '0' and j == i)) { result++; taken[j] = true; } } } } } } cout << result << endl; } }
81	#include <bits/stdc++.h> using namespace std; using ll = long long; using ld = long double; using ull = unsigned long long; using uint = unsigned; inline ll popcnt(ull a) { return __builtin_popcountll(a); } ll intpow(ll a, ll b) { ll ans = 1; while (b) { if (b & 1) ans *= a; a *= a; b /= 2; } return ans; } ll intpow(ll a, ll b, ll m) { ll ans = 1; while (b) { if (b & 1) (ans *= a) %= m; (a *= a) %= m; b /= 2; } return ans; } template <class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; } template <class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; } template <class T> using vc = vector<T>; template <class T> using vvc = vector<vc<T>>; template <class T> using vvvc = vector<vvc<T>>; template <class T> using vvvvc = vector<vvvc<T>>; template <class T> using pq = priority_queue<T>; template <class T> using pqg = priority_queue<T, vector<T>, greater<T>>; template <class T> void scan(T& a) { cin >> a; } template <class T> void scan(vector<T>& a) { for (auto&& i : a) scan(i); } void in() {} template <class Head, class... Tail> void in(Head& head, Tail&... tail) { scan(head); in(tail...); } void print() { cout <<''; } template <class T> void print(const T& a) { cout << a; } template <class T> void print(const vector<T>& a) { if (a.empty()) return; print(a[0]); for (auto i = a.begin(); ++i!= a.end();) { cout <<''; print(*i); }
82	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int l, r; cin >> l >> r; if (l <= r / 2) { cout << (r - 1) / 2 << endl; } else { cout << r % l << endl; } } }
83	#include <bits/stdc++.h> using namespace std; void fast() { ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); } void ran() { srand(chrono::steady_clock::now().time_since_epoch().count()); } long long get_rand() { long long a = rand(); long long b = rand(); return a * (RAND_MAX + 1ll) + b; } void usaco() { freopen("problem.in", "r", stdin); freopen("problem.out", "w", stdout); } template <typename T> using min_pq = priority_queue<T, vector<T>, greater<T>>; int n, m; const int MXN = 6005; int px[MXN], py[MXN]; inline int gcd(int a, int b) { a = abs(a), b = abs(b); return (a % 2 || b % 2); } void solve() { cin >> n; for (int i = 1; i <= n; i++) { cin >> px[i] >> py[i]; px[i] /= 2; py[i] /= 2; } long long ans = 0; int by[2][2]; memset(by, 0, sizeof by); for (int i = 1; i <= n; i++) { for (int j = i + 1; j <= n; j++) { int ij = gcd(px[i] - px[j], py[i] - py[j]); for (int a = 0; a < 2; a++) for (int b = 0; b < 2; b++) { if ((ij + gcd(px[i] - a, py[i] - b) + gcd(px[j] - a, py[j] - b)) % 2 == 0) { ans += by[a][b]; } } } by[px[i] % 2][py[i] % 2]++; } cout << ans << '\n'; } signed main() { ran(); fast(); int t = 1; while (t--) solve(); }
84	#include <bits/stdc++.h> using namespace std; int main() { int l, r, ans, n; cin >> n; while (n--) { cin >> l >> r; int c = (r / 2) + 1; if (l < c) { ans = r % c; cout << ans << endl; } else { ans = l % r; cout << ans << endl; } } return 0; }
85	#include <bits/stdc++.h> using namespace std; inline int read() { int f = 1, r = 0; char c = getchar(); while (!isdigit(c)) f ^= c == '-', c = getchar(); while (isdigit(c)) r = (r << 1) + (r << 3) + (c & 15), c = getchar(); return f? r : -r; } const int N = 2e5 + 7, M = 3e5 + 7; int n, m, a[N]; struct b1t { long long c[M]; inline void add(int p, int x) { for (; p <= m; p += ((p) & -(p))) c[p] += x; } inline long long ask(int p) { long long res = 0; for (; p; p -= ((p) & -(p))) res += c[p]; return res; } } T1, T2; int main() { n = read(); for (int i = 1; i <= n; i++) a[i] = read(), m = max(m, a[i]); long long ans = 0, sum = 0; for (int j = 1; j <= n; j++) { int x = a[j]; ans += sum + (j - 1) * x - T2.ask(x), sum += x; for (int i = x; i <= m; i += x) ans -= x * (j - 1 - T1.ask(i - 1)); T1.add(x, 1); for (int i = x; i <= m; i += x) T2.add(i, x); printf("%lld ", ans); } return 0; }
86	#include <bits/stdc++.h> using namespace std; int st[4 * 1000001]; int lazy[4 * 1000001]; void build(int si, int ss, int se) { if (ss == se) { return; } int mid = (ss + se) / 2; build(2 * si, ss, mid); build(2 * si + 1, mid + 1, se); st[si] = min(st[2 * si], st[2 * si + 1]); } void update(int si, int ss, int se, int qs, int qe, int x) { if (lazy[si] > 0) { int lz_sum = lazy[si]; st[si] += lz_sum; lazy[si] = 0; if (ss!= se) { lazy[2 * si] += lz_sum; lazy[2 * si + 1] += lz_sum; } } if (ss > qe || se < qs) return; if (ss >= qs && se <= qe) { st[si] += x; if (ss!= se) { lazy[2 * si] += x; lazy[2 * si + 1] += x; } return; } int mid = (ss + se) / 2; update(2 * si, ss, mid, qs, qe, x); update(2 * si + 1, mid + 1, se, qs, qe, x); st[si] = min(st[2 * si], st[2 * si + 1]); } int query(int si, int ss, int se, int qs, int qe) { if (lazy[si] > 0) { int lz_sum = lazy[si]; st[si] += lz_sum; lazy[si] = 0; if (ss!= se) { lazy[2 * si] += lz_sum; lazy[2 * si + 1] += lz_sum; } } if (ss > qe || se < qs) return INT_MAX; if (ss >= qs && se <= qe) { return st[si]; } int mid = (ss + se) / 2; return min(query(2 * si, ss, mid, qs, qe), query(2 * si + 1, mid + 1, se, qs
87	#include <bits/stdc++.h> using namespace std; const long long MOD = 1000000007; const long long maxN = 1e5 + 5; void debug(vector<long long> vec) { long long n = vec.size(); for (long long i = 0; i < n; i++) cout << vec[i] << " "; cout << endl; return; } long long gcd(long long a, long long b) { if (b > a) { return gcd(b, a); } if (b == 0) { return a; } return gcd(b, a % b); } long long power(long long x, long long y, long long p) { long long res = 1; x = x % p; if (x == 0) return 0; while (y > 0) { if (y & 1) res = (res * x) % p; y = y >> 1; x = (x * x) % p; } return res; } long long lcm(long long a, long long b) { return (a / gcd(a, b)) * b; } void solve() { long long n; cin >> n; long long ans = n / 10; if (n % 9 == 0) { cout << ans + 1 << endl; } else { cout << ans << endl; } } int32_t main() { ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0); long long t = 1; cin >> t; while (t--) { solve(); } }
88	#include <bits/stdc++.h> using namespace std; void solve() { long long n, m; cin >> n >> m; long long arr[n]; memset(arr, 0, sizeof(arr)); long long ans = n; for (long long i = 0; i < m; i++) { long long u, v; cin >> u >> v; u--, v--; if (u > v) { arr[v]--; if (arr[v] == -1) ans--; } else { arr[u]--; if (arr[u] == -1) ans--; } } long long q; cin >> q; for (long long i = 0; i < q; i++) { int c; cin >> c; if (c == 1) { long long u, v; cin >> u >> v; u--, v--; if (u > v) { arr[v]--; if (arr[v] == -1) ans--; } else { arr[u]--; if (arr[u] == -1) ans--; } } else if (c == 2) { long long u, v; cin >> u >> v; u--, v--; if (u > v) { arr[v]++; if (arr[v] == 0) ans++; } else { arr[u]++; if (arr[u] == -1) ans++; } } else { cout << ans << "\n"; } } } int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); ; solve(); return 0; }
89	#include <bits/stdc++.h> using namespace std; template <typename _T> inline void read(_T &x) { x = 0; char s = getchar(); long long f = 1; while (s < '0' || s > '9') { f = 1; if (s == '-') f = -1; s = getchar(); } while ('0' <= s && s <= '9') { x = (x << 3) + (x << 1) + s - '0'; s = getchar(); } x *= f; } const long long np = 105; const long long mod = 1e9 + 7; long long fac[np], inv[np]; inline long long power(long long a, long long b) { long long res(1); while (b) { if (b & 1) res = res * a, res %= mod; a = a * a; a %= mod; b >>= 1; } return res; } inline long long c(long long n_, long long m_) { return ((fac[n_] * inv[n_ - m_] % mod) * inv[m_]) % mod; } long long head[np], nxt[np * 2], ver[np * 2], tit; inline void add(long long x, long long y) { ver[++tit] = y; nxt[tit] = head[x]; head[x] = tit; } long long dep[np], maxn; long long sub[np][np]; long long dp[np][np]; long long n, k; inline void dfs(long long x, long long ff, long long id) { dep[x] = dep[ff] + 1; maxn = max(dep[x], maxn); sub[id][dep[x]]++; for (long long i = head[x], v; i; i = nxt[i]) { v = ver[i]; if (v == ff) continue; dfs(v, x, id); } } signed main() { fac[0] = 1; for (long long i = 1; i <= 100; i++) fac[i] = fac[i - 1] * i, fac[i] %= mod; for (long long i = 0; i <= 100; i++) inv[
90	#include <bits/stdc++.h> using namespace std; template <class T> T gcd(T a, T b) { return (b == 0? a : gcd(b, a % b)); } int gi() { int a; scanf("%d", &a); return a; } long long gli() { long long a; scanf("%I64d", &a); return a; } int cases() { static int t = gi(); return t--; } char a[300004]; int s[300004]; int samesign(int a, int b) { return (a < 0? (b < 0? 1 : 0) : (b > 0? 1 : 0)); } int comp(int l, int r) { int lsum = -(s[r] - s[l - 1]); if (lsum == 0) return l; int rsum = s[r - 1] - s[l]; if (rsum == 0) return r - 1; int L = l + 1, R = r - 2; while (L < R) { int M = (L + R) / 2; int sum = s[M] - s[l] - (s[r] - s[M + 1]); if (sum == 0) return M; if (samesign(sum, lsum)) { L = M + 1; } else { R = M - 1; } } return L; } int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); while (cases()) { int n = gi(); int q = gi(); scanf("%s", a); s[0] = 0; for (int i = 0; i < n; i++) s[i + 1] = s[i] + (a[i] == '+'? 1 : -1) * (i % 2? 1 : -1); for (int i = 0; i < q; i++) { int l = gi() - 1; int r = gi(); if ((r - l) % 2 == 0) { if (s[r] - s[l] == 0) { printf("0\n"); } else { int w = comp(l + 1, r); printf("2\n%d %d\n", l + 1
91	#include <bits/stdc++.h> using namespace std; const int MAXN = 3e2 + 5; int N, M; int Sight[MAXN * MAXN], Order[MAXN * MAXN], Bac[MAXN * MAXN], Cnt[MAXN * MAXN]; struct seg { int T[MAXN * 4]; void Build(int l, int r, int cur) { if (l == r) { T[cur] = 0; return; } int m = (l + r) >> 1; Build(l, m, cur << 1); Build(m + 1, r, cur << 1 | 1); T[cur] = T[cur << 1] + T[cur << 1 | 1]; } void Change(int x, int l, int r, int cur) { if (l == r) { T[cur] = 1; return; } int m = (l + r) >> 1; if (x <= m) Change(x, l, m, cur << 1); else Change(x, m + 1, r, cur << 1 | 1); T[cur] = T[cur << 1] + T[cur << 1 | 1]; } int Query(int x, int y, int l, int r, int cur) { if (x > y) return 0; if (x <= l && r <= y) return T[cur]; int m = (l + r) >> 1; if (x <= m && y > m) return Query(x, y, l, m, cur << 1) + Query(x, y, m + 1, r, cur << 1 | 1); else if (x <= m) return Query(x, y, l, m, cur << 1); else return Query(x, y, m + 1, r, cur << 1 | 1); } } St[MAXN]; int main() { ios::sync_with_stdio(false); int T; cin >> T; while (T--) { cin >> N >> M; for (int i = 1; i <= N * M; i++) cin >> Sight[i], Order[i] = Sight[i]; sort(Order + 1, Order + N * M + 1); int num = unique(Order + 1, Order + N * M + 1
92	#include <bits/stdc++.h> using namespace std; struct BIT { vector<long long> bit; long long n; BIT(long long size) { n = size + 1; bit.assign(n, 0); } void upd(long long pos, long long val) { for (++pos; pos < n; pos += pos & -pos) { bit[pos] += val; } } long long get(long long pos) { long long ret = 0; for (++pos; pos > 0; pos -= pos & -pos) { ret += bit[pos]; } return ret; } }; const long long mod = 998244353; long long x[200005], y[200005]; long long pos[200005]; long long binpow(long long a, long long b) { long long res = 1; while (b > 0) { if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1; } return res; } long long fact[200005]; long long ans(long long a, long long b) { return fact[a] * binpow(fact[b], mod - 2) % mod * binpow(fact[a - b], mod - 2) % mod; } BIT bt(200005); void solve() { long long n, m; cin >> n >> m; for (long long i = 1; i <= m; i++) { cin >> x[i] >> y[i]; } map<long long, long long> ck; for (long long i = m; i >= 1; i--) { long long l = 1, r = n; while (l < r) { long long m = (l + r) / 2; if (m - bt.get(m) < y[i]) { l = m + 1; } else r = m; } pos[i] = l; ck[l] = 1; bt.upd(l, 1); } set<long long> s2; for (long long i = 1; i <= m; i++) { if (!ck[pos[i] + 1]) { s2.insert(pos[i] + 1); } } map<long long, long long> mp; long long cnt = 0; for (
93	#include <bits/stdc++.h> using namespace std; int _read() { char ch = getchar(); while (ch!= '0' && ch!= '1') ch = getchar(); return ch - 48; } int T, n, a[20005], pd, w; void work() { scanf("%d", &n); pd = 0; for (int i = 1; i <= n; i++) { a[i] = _read(); if (a[i] == 0) w = i, pd = 1; } if (pd = 0) { printf("%d %d %d %d\n", 1, n - 1, 2, n); } else { if (w <= n / 2) printf("%d %d %d %d\n", w, n, w + 1, n); else printf("%d %d %d %d\n", 1, w, 1, w - 1); } } int main() { scanf("%d", &T); while (T--) work(); return 0; }
94	#include <bits/stdc++.h> using namespace std; constexpr int N = 3e3 + 1; int a[N], dp[N][N], nxt[N], prv[N], lst[N]; int main() { cin.tie(0), ios::sync_with_stdio(0); int t, n; cin >> t; while (t--) { cin >> n; for (int i = 0; i < n; ++i) { cin >> a[i], --a[i]; } memset(lst, -1, n * sizeof *lst); n = unique(a, a + n) - a; memset(prv, -1, n * sizeof *prv); memset(nxt, 127, n * sizeof *nxt); for (int i = 0; i < n; ++i) { if (lst[a[i]]!= -1) { prv[i] = lst[a[i]]; nxt[lst[a[i]]] = i; } lst[a[i]] = i; } for (int le = 2; le <= n; ++le) for (int i = 0; i + le <= n; ++i) { int j = i + le - 1; dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]); if (nxt[i] - i > j - prv[j]) { for (int z = nxt[i]; z <= j; z = nxt[z]) { dp[i][j] = max(dp[i][j], dp[i + 1][z - 1] + dp[z][j] + 1); } } else { for (int z = prv[j]; z >= i; z = prv[z]) { dp[i][j] = min(dp[i][j], dp[i][z] + dp[z + 1][j - 1] + 1); } } } cout << n - dp[0][n - 1] - 1 << '\n'; } return 0; }
95	#include <bits/stdc++.h> using namespace std; int a[11], wei; int D[11] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; int S[11] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; long long ans; int t; int bigf; void jian(int x) { for (register int i = x; i <= wei; i += 2) { if (a[i]!= 0) { a[i]--; bigf = 1; break; } a[i] = 9; } if (bigf == 0) for (register int i = x; i <= wei; i += 2) { a[i] = 0; } return; } void jia(int x) { for (register int i = x; i <= wei; i += 2) { if (a[i]!= 9) { a[i]++; break; } a[i] = 0; } return; } void dfs(long long sco, int x) { if (sco == 0) return; int flag = 1; int ten = 1; for (register int i = 1; i <= x; i++) for (register int i = x; i <= wei; i++) { if (a[i]!= 0) { flag = 0; break; } } if (flag) { ans += sco; return; } if (x == wei + 1) { ans += sco; return; } bigf = 0; jian(x + 2); if (bigf == 1) { dfs(sco * S[a[x]], x + 1); jia(x + 2); } dfs(sco * D[a[x]], x + 1); return; } int main() { int n; cin >> n; for (register int o = 1; o <= n; o++) { cin >> t; ans = 0; for (int i = 1; i <= 9; i++) { a[i] = t % 10; t /= 10; if (t == 0) { wei = i; break; } } dfs(1, 1); cout << ans - 2 << endl; } return 0; }
96	#include <bits/stdc++.h> using namespace std; const double pi = acos(-1.0); const double eps = 1e-10; const int MOD = 998244353; const int INF = 0x3f3f3f3f; const int maxn = 3e2 + 10; const int maxm = maxn * maxn; vector<int> arr; int find(int first) { return lower_bound(arr.begin(), arr.end(), first) - arr.begin() + 1; } int c[maxn][maxm], num[maxm]; pair<int, int> b[maxm]; void add(int first, int second, int z) { while (first < maxn) { c[second][first] += z; first += first & -first; } } int ask(int first, int second) { int sum = 0; while (first) { sum += c[second][first]; first -= first & -first; } return sum; } int main() { ios::sync_with_stdio(false); int __; cin >> __; while (__--) { int n, m; cin >> n >> m; for (int i = 1; i <= n * m; ++i) { int num; cin >> num; b[i].first = num; b[i].second = i; arr.push_back(num); } sort(b + 1, b + n * m + 1); for (int i = 1; i <= n * m; ++i) num[b[i].second] = (i - 1) / m + 1; sort(arr.begin(), arr.end()); arr.erase(unique(arr.begin(), arr.end()), arr.end()); long long sum = 0; for (int i = 1; i <= n * m; ++i) swap(b[i].first, b[i].second); sort(b + 1, b + n * m + 1); for (int i = 1; i <= n * m; ++i) swap(b[i].first, b[i].second); for (int i = 1; i <= n * m; ++i) { b[i].first = find(b[i].first); sum += ask(b
97	#include <bits/stdc++.h> using namespace std; int main() { int t; cin >> t; while (t--) { int n; cin >> n; int i = 0, count = 0; while (count <= n) { i++; if (i % 3!= 0 && i % 10!= 3) { count++; } } cout << i << "\n"; } return 0; }
98	#include <bits/stdc++.h> using namespace std; using LL = long long; constexpr int maxn = 50; int w[maxn][maxn]; int p[maxn]; int gp(int u) { return p[u] == u? u : p[u] = gp(p[u]); } vector<pair<int, int>> pr[100 + 1]; int n, k, d[maxn], e[maxn]; pair<int, vector<pair<int, int>>> get(vector<pair<int, int>>& cur, int u, int v) { for (int i = 0; i < n; i += 1) p[i] = i; vector<pair<int, int>> ncur; LL nans = 0; for (int i = 0; i < k; i += 1) e[i] = 0; for (auto [x, y] : cur) { if (w[u][v] < w[x][y]) { int pu = gp(u), pv = gp(v); if (pu!= pv) { p[pu] = pv; ncur.push_back({u, v}); nans += w[u][v]; e[u] += 1; e[v] += 1; } } int px = gp(x), py = gp(y); if (px!= py) { p[px] = py; ncur.push_back({x, y}); nans += w[x][y]; e[x] += 1; e[y] += 1; } } for (int i = 0; i < k; i += 1) if (e[i] > d[i]) return {INT_MAX, {}}; return {nans, ncur}; } int main() { cin.tie(nullptr)->sync_with_stdio(false); cin >> n >> k; for (int i = 0; i < k; i += 1) cin >> d[i]; for (int i = 0; i < n; i += 1) for (int j = i + 1; j < n; j += 1) { cin >> w[i][j]; w[j][i] = w[i][j]; pr[w[i][j]].push_back
99	#include <bits/stdc++.h> using namespace std; int main() { int n; int queryn; string s; cin >> n >> queryn; cin >> s; int dp[6][n]; int query[queryn][2]; string com[6] = {"abc", "acb", "bac", "bca", "cab", "cba"}; for (int i = 0; i < queryn; i++) { cin >> query[i][0] >> query[i][1]; } for (int k = 0; k < 6; k++) { int cost = 0; for (int i = 0, it = 0; i < n; i++, it++) { it = it % 3; if (s[i]!= com[k][it]) { dp[k][i] = ++cost; } else { dp[k][i] = cost; } } } for (int w = 0; w < queryn; w++) { int sum = 10000000; for (int k = 0; k < 6; k++) { sum = min(dp[k][query[w][1] - 1] - ((query[w][0] - 2 > 0)? dp[k][query[w][0] - 2] : 0), sum); } cout << sum << endl; } return 0; }
