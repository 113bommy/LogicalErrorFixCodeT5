114	51 sort(c + 1, c + n + 1);
25	8 cout << "1 4\n";
281	28 cur = cur * (p[i - 1] + 1) % mod;
250	11 long long count(long long x) {
228	2
142	86 long long ans = 0;
104	41 (dp[j - 1][l - 1] * cnt[j - 1] % mod + dp[j][l]) % mod;
558	35 swap(a[i + 1], b[2 * n - i - 1]);
89	17 if (dp[n][i] > k) {
432	27 for (int i = 2; i <= 100; i++) {
32	33 b[i] = 1;
30	32 b[i] = -1;
95	83 for (int i = 1; i <= n; i++) {
223	21 printf(" and n - 1\n");
238	15 ans.mx = max(x.mx, y.rig - x.rig);
517	53 sort(a.begin(), a.end());
27	25 c[i + 1] = 'k';
203	35 if (st > r || en < l) return 1e9;
572	29 long long bord_low = x, bord_high = sum - y;
429	5 int n = s.size();
225	62 for (int i = m * 3 + 1; i <= n; i++) {
459	33 printf("1\n");
284	14 if (a.y == b.y) return a.x > b.x;
6	16 ((1000000007 - (1000000007 / i)) * inv[1000000007 - y]) % 1000000007) *
163	50 for (int i = (1); i <= (n + pl); i++)
570	11 if ((arr[3] - arr[2] - arr[1] + 1) < m)
348	42 if (a[pos] >= n) {
557	24 fun(n - i);
159	30 vector<long long> res_ans(n);
220	25 b = (z - z + x) / 2;
344	12 else if (c < n)
573	58 if (now > b[i].y) {
94	19 std::max(dp[i - 1][del - 1], dp[i - 1][del] + (a[i] == i - del));
389	18 long long int x = *max_element(v[i].begin(), v[i].end());
99	31 for (int j = 0; j <= i; j++) mx[j] = max(mx[j], dp[i][i - j]);
367	32 for (int g = b.length() - 1; g >= 0; g--) b2[i] += b[g];
352	35 cout << 1 << " " << i << "\n";
270	19 if (a[i + 1] >= a[i]) {
44	18 cout << n / 3 + 1 << " " << n / 3 + 1 << '\n';
470	17 for (int i = 0; i <= n; i++) vv[i].clear(), uu[i].clear();
127	21 sum -= a[j];
387	35 sort(power, power + 1 + n, comp);
80	12 if (m % 2 == 1) b -= m / 2;
300	26 stack<long long> Q;
370	80 for (long long i = 0; i < order.size(); i++) {
196	20 for (int i = m; i >= 1; i--) {
71	30 k = k - m / 2;
46	14 cout << 1 << " " << 2 << "\n";
233	30 for (int i = 1, x; i <= m; i++) {
296	45 for (int i = 1; i <= (M); ++i)
81	5 char domino[101][101];
565	79 int ans = 3;
103	35 for (int i = 1; i <= n; i++) {
546	4 uint16_t a[N], lst[N], nxt[N], cnxt[N], dp[N][N + 1];
552	20 for (int l = 2; l < n; ++l) {
464	32 if ((i & 1) == j && get(i) == k)
373	25 for (int i = p; i < len; i++) n = i * 10 + mn;
166	8 operator() const { return low < MAX; }
379	57 if (s.empty() == true || s.find(val) == s.end())
363	30 for (i = 1; i <= 42; i++) {
214	18 u = 1;
273	5 vector<long long> fact(mx, 1), inv(mx, 1);
73	16 if (m == 1) {
175	79 int ans = 3;
576	15 int l = 1, r = n + 1, pos = n + 1;
167	10 m2 = 0;
473	117 z[i] = z[i - l];
388	29 long long temp = res[i].first - res[i].second;
276	48 int left = 0;
506	13 if (s[i - 1] == 'a' and s[i] == 'b') {
513	82 long long ans = 0;
327	20 for (int i = a[1].first; i <= b[1].first; i++) dp[1][i] = 1;
543	33 if (i > j) return 0;
285	60 int b = n - 2 * i;
112	33 ll n, k;
350	7 long long int n;
522	52 int f1 = 0, f2 = 0, f2 = 0;
431	45 long long int ans[] = {0, 5, 6, 8, 8};
393	11 long long l = 0, r = imag[i]) return 0;
397	11 for (int j = 2; i * j <= n; ++j) {
28	20 if (j >= 0 and j < i) {
117	112 int l = 0, r = n + 1;
420	9 if (l <= r / 2) {
16	34 long long ans = 0;
412	13 ans = r % c;
161	28 long long x = a[j];
205	4 int lazy[4 * 1000001];
137	36 if (n % 10 == 0) {
33	17 arr[u]--;
108	71 for (long long i = 1; i <= k; i++) {
467	31 int L = l + 1, R = r - 2;
482	53 for (int i = 1; i <= N * M; i++) {
290	60 while (l <= r) {
448	16 if (pd == 0) {
544	34 for (int z = prv[j]; z >= i; z = prv[z]) {
494	26 if (a[i] != 9) {
490	13 long long c[maxm][maxm], num[maxm];
335	10 while (count < n) {
255	36 for (int i = 0; i < k; i += 2)
202	30 ((query[w][0] - 2 >= 0) ? dp[k][1] - 2] : 0),
452	15 if (ind + 1 < n / 2)
468	32 pos = nb;
329	14 if (num % 10 == 3 || num / 10 == 0)
234	29 for (; pos <= n; pos += (pos & -pos)) {
564	13 long long mn = 3;
135	42 if (k == 1) {
533	65 continue;
126	36 for (long long tmp = 0; tmp < (Pow(3, N - 1)); ++tmp) {
381	43 if (a[j] != b[j]) {
287	39 pos = i + 1;
275	15 long long n, k, i, ans;
134	39 int n = read(), m = read();
382	46 long long ok = 0;
299	24 for (int i = 1; i <= n + 1; ++i)
219	51 if (L > 0) ans++;
561	5 cout << "(";
298	51 printf("%lld\n", ans);
204	4 int lazy[4 * 1000001];
185	21 if (h + abs(y2 - y1) <= H) {
505	86 long long ans = 0;
70	26 if ((k == 0 && n % 2 == 0) || (k * 2 == n * m && m % 2 == 0)) {
260	23 double y = (double)(pref[n] - pref[i + 1]) / (n - i - 1);
252	36 for (int i = 0; i < k; i += 2)
532	8 map<int, vector<int> > rev[2], ver[2];
386	34 if (a > c) {
24	84 for (int i = 1; i <= m; i++) {
440	82 long long ans = 0;
56	7 long long cnt[26 + 7];
78	5 cout << "Yes"
321	9 if (par[u] == u) return u;
529	64 for (long long i = 1; i <= m; i++) a[i] = 1;
405	29 if (i == 2) f[i]--;
553	10 pair<ll, ll> dp[205][205];
216	16 for (int i = 0; i < 2 - (n & 1); i++) {
305	53 for (int j = v[i].second - 1; j >= v[i - 1].second; j--) {
569	10 if (m > max(0, a[2] - 1 - a[0] - a[1]) &&
197	37 res = min(res, pre[i][r] - pre[i][l - 1]);
195	32 sum2 = a[1][m - 1];
445	121 if (j == m) {
239	31 c.minSuff = min(b.maxSuff, b.sum + a.minSuff);
542	13 for (int j = i; j <= n && a[j] == a[i]; j += 1) dp[i][j] = 0;
128	35 for (int i = 1; i <= n; i++) printf("%d %d\n", ans[i].first, ans[i].second);
283	43 cout << 0 << endl;
5	4 const long long dd = (long long)(1e9) + 7;
447	36 printf("1 %d 1 %d\n", n - (n & 1), n / 2);
369	33 if (!cddist) {
58	13 for (int i = 0; i <= n - 3; i++) {
349	18 arr2[0] = 1;
274	53 if (k == 1) {
384	25 if (k[i * 2 + b1 + b1] == 0) k[i * 2 + b1] = 1, num++;
136	19 if (i > 1 && a[i] < a[i - 1]) {
501	24 for (long long d = 1; d < 4; d++) {
328	33 for (int i = 0; i <= gmax; ++i) {
174	16 cout << "b";
57	13 sum += (hash[i] >= 3) ? 2 : hash[i];
150	13 i -= 2;
222	59 int now = 0;
537	35 cout << "No" << '\n';
232	43 v.push_back(z - a);
1	74 cout << dp[1][0] % mod << endl;
434	27 if (s.length() <= a.size()) {
368	41 if (check != s)
478	16 if (s1[i] + s2[i] == '0' + '1') {
256	36 for (int i = 0; i < k; i += 2)
390	17 long long pow = 0, sol = 0;
91	47 for (i = 1; i < n + 1; i++) {
259	36 for (int i = 0; i < k; i += 2)
54	18 if (a[i] < 5)
320	71 for (int i = 1; i <= m; i++) {
152	83 long long ans = 0;
508	17 cout << i + 1 << " " << j + 1 << "\n";
413	16 reminder = r % (s + 1);
311	30 s[i] = 'R';
101	55 long long ans = 0;
451	11 long long idx = -1;
191	24 if (s1[m] - s1[j] > s2[j - 1])
415	15 if (l <= h)
82	54 for (int j = 1; j <= m; j++) {
511	30 l = j, r = j;
398	52 for (int _ = (0); _ < (k + 1); _++) divisores(f, p);
271	21 while (xEnd < m && xs[xEnd] == ys[i + xEnd - xStart]) {
0	4
306	53 for (int j = v[i].second - 1; j >= v[i - 1].second; j--) {
165	3 const int K = 19, N = 1 << K, INF = 0x3f3f3f3f;
515	29 cout << "NO" << endl;
9	6 long long _, n, x[N], y[N], cnt[2][2];
425	47 cout << 2 << "\n" << s[0] << "\n";
461	11 long long val = 1;
157	24 long long x;
122	31 long long ans = 0;
29	13 if (i - 1 >= 0 && str[i - 1] == '1') str[i - 1] = '*', sum++;
123	31 for (long long i = 1; i <= n - k; i++) {
487	3 const int maxm = 100005;
40	16 for (int k = 1; k < lg[n + 1]; ++k) {
43	14 printf("%lld %lld\n", x - 2 * di, di);
374	15 if (t > n) {
248	17 for (int j = 0; j < m; j++) val[i][j] = a[i] * qpow(a[i] + a[j], mod - 2);
35	31 return;
272	33 return (res + (n % 2 == 0) * ksm(b[k - i], n)) % 1000000007;
64	9 bool cmpd(node x, node y) { return x.c * 2 - x.zs > y.z - y.z; }
65	52 for (int i = 1; i <= 5; i++) dfs(i);
337	10 for (int i = 1, j = 1; j <= 1666; j++) {
243	24 if ((x += other.x) >= MOD) x -= MOD;
577	59 for (long long int i = 1; i <= n; i++) {
84	18 if (k & 1) {
474	7 long long n, s;
439	24 cout << 1 << ' ' << j + 2 << ' ' << 1 << ' ' << i + 1 << endl;
310	19 if (cnt == 0) s[0] = 'R';
446	30 while (l <= r && r <= n) {
483	39 long long re = 0;
401	37 if (i > 1) dp[0][i] = dp[1][i];
353	12 if (d <= num) {
102	15 for (int j = 1; j <= n; ++j) {
365	30 long long ans = 0;
551	9 pair<int, long long> dp[300][300];
462	3 map<int, long long> mp;
343	21 printf("%d\n", c - k);
332	9 if (i % 3 == 0 or i % 10 == 0) {
404	14 cout << ans[n] << endl;
224	4 cout << " and a << " " << b << "\n";
264	16 for (j = 0; j < n; j++) {
231	27 if (!(c[j] >> i & 1) && !(d[j] >> i & 1)) a0[j] = 0;
61	5 int t, n, i, ans, a, b, c, d, e, m, j, s, curr;
472	23 int l = 0, r = n - x + 1;
115	30 for (int j = 0; j < len - 1 - i; j++) {
444	19 ll n;
173	25 ans = ans | (1ll << i);
10	8 sb[(i & 2) + (j & 1) / 2]++;
301	33 for (int i = 1; i <= m; i++) rns[i] = i == 0;
437	15 long long n;
498	15 bool d = arr[x.end] < arr[y.start];
351	13 if (p - n >= a) {
460	41 long long a[n], b[n + 1];
3	3 const int N = 300005, mod = 1e9 + 7, mx = 3000000;
36	24 if (x >= 3)
323	47 ans.push_back(i + 1);
568	9 long long minm = max((long long)0, x[2] - x[1] - x[0] - 2);
554	22 if (s[s.size() - 1] != '0') {
34	37 map<int, long long int> graph[200005];
496	34 if (now <= n - 1) {
169	83
345	9 long long n;
263	15 double ans = (a[n - 1] / 1) + sum;
121	29 if (b[i] == false) {
574	17 p = upper_bound(a, a + n, x) - a;
383	20 if (arr[j - 1] <= arr[j])
109	71 for (long long i = 1; i <= k; i++) {
419	6 if (2 * a < b)
67	39 k -= q;
292	16 for (int j = x; j; j = fr[j]) vis[j] = 1;
295	33 used[i] = 2;
242	18 vector<long long> b;
124	31 if ((x < u && u < y) ^ (x < v && v < y)) ans++;
427	38 cout << 2 << '\n' << n2[i] << '\n';
208	8 } else if (a == b && a == 0) {
97	14 for (int j = 1; j <= i; j++) {
48	15 if (a + b * 2 != a) {
49	17 cout << n / 3 + 1 << " " << n / 3 + 1 << endl;
550	20 for (int l = 2; l < n; ++l) {
181	46 if (cv && extra[1]) ans[i] = 1;
371	32 cout << "11111111\n";
210	24 if (abs(c) > abs(d)) {
453	28 for (ts = 1; ts <= t; ts++) {
563	20 for (int j = 0; j <= tt - i; j++) {
50	9 printf("%.0lf %.0lf\n", a - (s * 2), s);
31	33 if (i != t - 1 && s2[i + 1] == '1') {
206	46 else if (c == d && d == 1)
418	12 cout << max_t % (max_t / 2 + 1) << endl;
55	20 printf("1\n");
539	25 if (nex[l] <= r) {
98	34 if (dfs(n, i) >= k) {
324	12 par[y] = v;
502	13 const int N = 1e3 + 5;
229	36 for (i = 3; i <= n; i++) v.push_back((a ^ ior(1, i)) | iand(1, i));
509	31 for (int j = n; j >= 0; j--) {
319	13 vector<pair<long long int, long long int> > ans;
93	20 max(dfs(i - 1, removed) + (A[i] == i - removed), dfs(i - 1, removed - 1));
488	33 id[(j - 1) % m + 1] = c[i][j - now + len - 1];
236	4 const long long inf = 1e16 + 5;
372	25 for (int i = p; i < len; i++) n = i * 10 + mn;
38	39 cout << 0 << endl;
226	2
376	34 for (int i = ptr + 1; i < n.size(); i++) n[i] = 0;
315	20 for (long long int j = i; j < n; j++) cout << j + 1 << " ";
578	27 return x[i] + y[j] > x[n2.i] + y[n2.j];
362	12 if ((n - i) <= 0) {
7	22 int v1 = Y[i] % 2;
47	16 cout << ((n - 1) / 3) << " " << ceil((n - 1) / 3) + 1 << "\n";
336	17 cout << a[n - 1] << endl;
85	28 s[x - 1][y] = w;
325	30 for (int j = (l[i]); j <= (r[i]); j++) f[1][j] = 1;
334	14 for (int i = 1; i <= 1e9; ++i) {
246	5 long long py[1 << 15][15];
333	16 while (count % 3 == 0 or count % 3 == 3) count++;
493	17 else if ((x ^ b) != a)
520	32 long long ans = 0;
375	30 for (j = i + 1; j < L; j++) a[j] = '0';
194	36 for (int i = 0; i < n; ++i) {
497	7 long long len[2], s, e, size;
199	14 for (int j = 0; j < m; j++) {
430	20 if (mymap[s[i]] == 1) {
421	43 if (mposs > 0) continue;
146	27 if (5 - (ceil((pos * 1.0) / 2)) < (team2 - team1)) {
304	27 for (int i = j; i < n; i++) {
249	20 long long ans = 0;
79	12 if (m % 2 == 1) b -= m / 2;
308	63 if (cnt % 2 == 0) {
151	18 if (s[i] == t[j] && (pre - i) % 2 == 1) {
111	14 const int maxn = 105;
526	28 int px = lower_bound(b + 1, a + 1 + m, y) - b;
314	19 ans.push_back(cur);
160	34 long long a;
523	12 Pt[MAXM];
477	20 if (zero > 1 && st > 1 && one > 0) {
244	31 for (i = 0, m = 1 << min(n, 7); i < m; ++i)
257	36 for (int i = 0; i < k; i += 2)
422	10 if (l <= (r / 2)) {
267	103 printf("%d\n", ans);
458	21 long long sum[300005];
41	37 ans = max(ans, i - j + 2);
567	20 if (v[2] >= (v[0] + v[1] + v[2]) / 2) {
489	28 return (a.dd - 1) / m > (b.dd - 1) / m;
341	11 if (a > n || b > n || c > n) {
120	65 for (long long i = 1; i < N; i++) {
313	55 cout << j + 1 << " ";
525	28 int px = lower_bound(b + 1, a + 1 + m, y) - b;
241	83 long long l = 0, r = 1e9 + 7;
227	4 void solve(long long x) {
145	73 rem2--;
63	48 sum += d[i];
148	36 i = 1;
410	35 if (p >= l)
507	25 for (int i = 0; i < n; i++) {
158	44 int l = j, r = min(300000, j + a[i] - 1);
20	18 cout << 2 << " " << n / 2 << "\n";
107	22 cout << C(n, k) << '\n';
168	31 for (long long j = i + 1; j <= n; j++) {
149	18 break;
144	73 rem2--;
133	21 cout << "ACCD\n";
378	18 if (k >= res[j] - '0' && vis[k] > 0) {
66	3 string lt = "abcd";
52	30 cout << c4 << " " << c4 << '\n';
171	20 while (x <= m) x <<= 1;
183	39 if (n % 2 != 0) n++;
317	20 if (a[i] == 0 && a[(i + 1) % n] == 1) {
357	30 cout << i << " " << i - 1 << endl;
331	8 for (int i = 1; i <= 1666; i++) {
406	13 if ((long long)l * 2 >= r) {
491	13 if (x != 1) cp++;
435	38 for (int i = 2; i < 10; i++)
396	4 long long dp[200001];
76	15 if ((n * m / 2 - k) % 2 == 0) {
342	29 if (c >= 0)
476	29 if (i < n - 1) {
192	6 const long long inf = 1e15;
18	7 printf("1 %d\n", p - 1);
2	29 int ans = 1LL * f[n] * invf[n] % MOD;
463	29 qans[i] = vector<int>(len % 2 == 0 ? 2 : 1, -1);
366	38 for (int i = 0; i <= 60; i++) {
253	36 for (int i = 0; i < k; i += 2)
266	103 printf("%d\n", ans);
566	79 int ans = 3;
492	18 long long int distL = v[i - 1].first - a[idx - 1], distR = a[idx] - minR;
495	60 long long int ans = 0;
129	17 for (int j = 1; j < k; ++j) is[++cnt[i] = (interval[i][j], app[i][j + 1] > lim;
278	22 res = 0;
230	10 for (i = 1; i < 3; i++) {
571	9 minsum = a[0] - a[1] + a[2] - 2;
17	27 while (j < m && d[idb[j + 1]] + a[u].first > x) {
62	28 int sum = 0, i = 0;
547	61 for (long long i = 0; i < n; i++) {
72	12 long long n, m, k;
455	25 else if (r - l + 1 % 2)
347	8 cout << 1 << " " << base << endl;
139	75 cout << "Yes\n";
180	66 for (int i = 1; i <= m; i++)
77	19 if (n % 2 == 1 && m % 2 == 0 && k % 2 == 0 && (n * m) - (k * 2) >= n) {
156	45 void upd(int l, int r, int i, int cl, int cl, int cr) {
514	16 for (int j = 0; j <= n; j++) {
279	53 ans = (fact[n] * invFact[n] % mod * invFact[n - k]) % mod;
423	17 cout << fir % 2 << endl;
170	10 if (m >> i & 1) ans ^= 1 << i, n ^= 1 << i;
141	46 long long int h = bpow(g, 998244353 - 2);
457	43 int xx = !sum ? 0 : (sum + 1) % 2 + 1;
339	13 most = jok[j - 1] + 1;
26	14 b = n / 2;
359	11 while (i * i <= n) {
213	56 else if (co1 == b.size())
262	17 printf("%0.8lf", s);
316	25 if (a[i] == 0 && a[i + 1] == 1 && i < n - 1 && f == 0) {
534	11 int v = arr[i] ^ arr[i + 1] ^ arr[i + 1];
39	23 tree[rt].gcd = abs(gcd(tree[rt << 1].gcd, tree[rt << 1].gcd));
69	21 if ((p - n / 2) % 2 == 0 && p >= n / 2)
207	33 if (c == 0 && d == 0) {
154	46 if (pos >= num)
53	45 if (cnt[s[i] - 'a'] >= 2) continue;
87	11 if (b[i] >= 0 and a[i] >= a[j] and b[j] <= b[i]) {
237	15 long long st[105000][55];
516	33 if (i != j)
162	15 for (int i = 1; i <= 2000005; i++) f[i] = i;
361	10 r = 0;
519	19 long long ans = 0;
125	15 vs[u] = vs[v] = true;
380	19 continue;
13	29 return (choose(x, 2) + choose(y, 2)) * z;
23	11 for (int j = 2; j <= p; j++) {
179	42 for (long long j = i + i; j <= n; j += i) ans[i] -= mod;
535	46 ops.push_back(i + 1);
524	19 r = m;
11	62 if (a < b) {
400	14 f[i] = 2;
538	25 if (nex[l] <= r) {
212	10 cout << 1 << endl;
555	19 if (x != 0) ans = ans + x + 1;
178	3 const int N = 200020, MOD = 998244353;
261	24 vector<long long> v;
113	34 st.insert(mn);
188	37 cout << "0\n";
286	25 if (i2 < i1) i2 = i1 - i2;
143	28 for (int i = 0; i < 10; i++) {
198	4 const int inf = 1e9;
499	58 if (l > r) {
19	12 ans2 = n - 1;
466	30 cout << "4\n";
364	25 if (powers[i][px] == nss[pn]) {
394	23 printf("%lld\n", dp1[n]);
289	45 for (int i = (1); i <= (400000); i++)
326	36 if (nb < nm) n_dp[nb + 1] = (n_dp[nb + 1] - dp[nb] + MOD) % MOD;
484	44 ma[a[0]] = j;
37	3 bool isvalid(vector<vector<bool>> ans, int r, int c, int n) {
110	42 for (int d = 1; d <= m; ++d) {
354	20 if (n >= p - l)
247	31 long long c[m][n];
486	3 const int maxm = 100005;
303	14 int res = a[0];
277	46 res = (res + (boun * powlc(powlc(2, k - 1), n) % mod)) % mod;
414	23 b = 1;
235	56 printf("%lld\n", res);
395	4 long long f[N];
193	20 for (i = n - 2; i >= 0; i--) {
90	18 for (int i = n; i >= 0; i--)
548	7 long long dp[maxN][maxN];
187	11 if (h >= H || w >= W) {
60	15 long long t = 1;
575	18 int64_t answer = 0;
45	5 long long n[t], n1[t], n2[t];
105	101 printf("%d\n", res);
556	21 for (k = 1; k < i; k++) {
240	51 for (int i = 1; i <= N; ++i)
200	33 long long now = ps[j][r][(r - l) & 3] - ps[j][l - 1][2];
132	3 vector<long long> x, y, s, dp;
140	74 t[i] = t[s.size() - 1];
360	34 row = (root + 1);
245	8 const long long M = 2e6 + 5;
100	14 if (a[i] == j) ++max(f[i][j], f[i - 1][j - 1]);
211	40 if (tempa[a1] < tempa[a2]) {
426	7 if (num <= 1) return 0;
549	34 for (int z = prv[j]; z >= i; z = prv[z]) {
399	27 cout << dp[0];
4	5 const int inv3 = (mod + 1) / 3;
268	103 printf("%d\n", ans);
280	40 ll fact[MAXN];
391	33 if (out + totaladd <= t[i].first) {
218	30 } else if (x >= y) {
294	37 for (long long j = (1); j <= (m); j++) {
433	27 if (s.length() <= a.size()) {
541	61 for (long long i = 0; i < n; i++) {
560	32 for (int i = 1; i <= n; i++) {
438	51 if (2 * (i + 1) >= n) {
358	23 } else if (n <= t) {
190	46 if (n == 1) {
116	30 for (int j = 0; j < len - 1 - i; j++) {
346	13 for (i = 0; rangeEnd <= val; i++) {
504	66 if (ans[i] == 0) {
454	45 if (i >= n / 2) {
51	19 if (f(ceil(fn / 3.0)) > f(floor(fn / 3.0))) {
42	36 while (r >= l && query(1, 0, n - 1, l, r) == 1) {
258	36 for (int i = 0; i < k; i += 2)
8	13 for (int i = 1; i <= N; i++) C[X[i] % 4][Y[i] % 4]++;
309	64 s[i] = 'B';
118	10 int p = a[(l + r) / 2];
510	20 if (s[i - 1] == 'a') {
402	13 if (i > 1) dp[i] = (dp[i] + dp[i - 1] * 2 + 1) % mod;
521	49 while (cur < k && arr[cur].first <= val) {
527	43 long long dx = std::upper_bound(Y + 1, x[i] + 1, y[i]) - dx();
86	15 string alphabet = "abcdefghijklmnopqrstuvwxyz";
68	35 if (q <= k) {
485	31 for (i = 0; i <= temp; i++) {
106	37 cout << (n * (n - 1) / 2) % mod << '\n';
14	13 printf("%I64d\n", res);
503	36 if (a < 1 || a > n || b < 1 || b > m) continue;
22	7 b = (P - 1) / 2;
74	25 ll k1 = k, k2 = n * m / 2 - k1;
88	7 for (int j = 1; j <= n; j++) {
119	47 if (r[0][i] <= z[i][j]) temp++;
403	13 for (long long j = 1; i * j <= m; j++) {
442	15 long long n;
407	12 if (m <= (n / 2)) {
518	47 if (mx1 - mx2 >= 2) {
481	27 if (flag[i] == 0 && a[i] <= maxx) {
449	15 if (i >= n / 2)
480	49 i += 1;
408	12 cout << (r + 1) / 2 - 1 << endl;
512	100 for (int i = 0; i <= n; i++) {
322	21 printf("%d\n", sum);
475	87 return;
579	39 vector<int> ans(n + 1, -1);
147	39 goal1[k] = (s[i] == '0' ? goal1[k - 1] + 1 : goal1[k - 1]);
436	15 long long n;
251	6 long long ans[MAXM];
377	18 if (k >= res[j] - '0' && vis[k] > 0) {
528	29 ans += ++cnty[pos1] - ++mb[pos2][pos2];
355	16 long long int d = s - k;
456	37 } else if (p + m % 2 == 0) {
186	26 mih = y4 - y1, miw = 0;
409	82 long long ans = 0;
221	5 a %= m;
302	62 int a[1 + MAXN], b[1 + MAXN];
172	16 while (high <= max(n + 1, m + 1)) {
21	10 cout << re << " " << 2 << endl;
416	9 if (r <= l * 2)
176	13 cout << "v\n";
531	6 if (a >= mod) a -= mod;
215	33 if (n1 <= n2) {
293	17 int T, n, m, ans, a[M], b[M], vis[M], pre[M], pre[M];
96	7 vector<vector<long long>> dp(n + 5, vector<long long>(n + 5, -1e12));
201	30 ((query[w][0] - 2 >= 0) ? dp[k][1] - 2] : 0),
441	24 } else if (zero >= n / 2) {
411	12 if ((b / 2) + 1 >= a)
479	86 long long ans = 0;
184	29 if (y1 > h) {
428	31 int ans = 999999999;
164	7 for (int i = 0; i < (1 << k); i++) b[i] = -1e9, c[i] = 1e9;
559	15 sum[i] = s1;
217	16 for (int i = 0; i < 2 - (n & 1); i++) {
545	13 for (int j = i; j <= n && a[j] == a[i]; j += 1) dp[i][j] = 0;
536	25 while (j + 1 < n && x[j] == 0 && x[j + 1] == 0) {
12	29 return (choose(x, 2) + choose(y, 2)) * z;
291	5 const int K = 3500;
392	35 sort(power, power + 1 + n, comp);
282	28 cur = cur * (p[i - 1] + 1) % mod;
338	11 if (a % 3 != 0 && a % 10 != 0) {
530	31 for (int i = 0; i < n; ++i) printf("%d ", p[i]);
424	34 else if (e > 0)
92	7 vector<vector<long long>> dp(n + 5, vector<long long>(n + 5, -1e12));
471	17 if (sa[i] > k) ta[--cnt[r[i]]] = sa[i] - k;
130	15 if (j >= 0 &&
83	15 string alphabet = "abcdefghijklmnopqrstuvwxyz";
269	9 sta[MAX];
385	39 sort(mnps.begin(), mnp);
288	56 if (a[i] >= x) {
177	13 cout << "v\n";
330	10 while (count <= k) {
450	36 printf("1 %d 1 %d %d\n", len, len - 1);
75	58 if (k >= (m - 1) * n / 2)
209	13 if (y == 0) {
312	15 if (s[0] == '?') {
59	28 color %= k;
131	31 if (a[mid].first.first < a[i].first.second)
340	11 if (maxi <= dif * 2) {
15	45 for (long long x = 0; x <= pokor[x][y]; x++) {
443	21 printf("1 %d 2 %d\n", x, n, x + 1, n);
540	4 uint16_t a[N], lst[N], nxt[N], cnxt[20], dp[N][N + 1];
153	60 for (long long i = 0; i < m; i++) {
465	60 } else if ((r - l + 1) % 2 == 0) {
500	31 if (br[rc] == (e - mid))
254	36 for (int i = 0; i < k; i += 2)
265	29 cout << "YES" << endl;
318	25 for (int i = 0; i <= n - 3; i++) {
297	21 if (str >= 1000000001) str = 1000000001;
138	24 if (s == t) {
469	37 printf("1\n");
155	4 int T, n, m, ct, x[Maxn], fa[Maxn], cnt[Maxn], ans[Maxn];
307	26 a[i] = 3;
417	7 if (l <= r / 2) {
356	27 cout << i << " " << old + 2 * i - 2 - n << endl;
182	31 if (v ^ p) {
189	28 cout << -1 << endl;
562	25 for (int j = 0; j <= k / 2; j++) {
